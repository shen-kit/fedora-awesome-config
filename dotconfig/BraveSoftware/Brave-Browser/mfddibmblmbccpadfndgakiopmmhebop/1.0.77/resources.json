[{"name":"1x1.gif","aliases":["1x1-transparent.gif"],"kind":{"mime":"image/gif"},"content":"R0lGODlhAQABAIAAAP///////yH5BAEKAAEALAAAAAABAAEAAAICTAEAOw=="},{"name":"2x2.png","aliases":["2x2-transparent.png"],"kind":{"mime":"image/png"},"content":"iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAYAAABytg0kAAAAC0lEQVQI12NgQAcAABIAAe+JVKQAAAAASUVORK5CYII="},{"name":"3x2.png","aliases":["3x2-transparent.png"],"kind":{"mime":"image/png"},"content":"iVBORw0KGgoAAAANSUhEUgAAAAMAAAACCAYAAACddGYaAAAAC0lEQVQI12NgwAUAABoAASRETuUAAAAASUVORK5CYII="},{"name":"32x32.png","aliases":["32x32-transparent.png"],"kind":{"mime":"image/png"},"content":"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGklEQVRYw+3BAQEAAACCIP+vbkhAAQAAAO8GECAAAZf3V9cAAAAASUVORK5CYII="},{"name":"addthis_widget.js","aliases":["addthis.com/addthis_widget.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICB3aW5kb3cuYWRkdGhpcyA9IHsKICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBub29wZm4sCiAgICAgICAgYnV0dG9uOiBub29wZm4sCiAgICAgICAgY291bnRlcjogbm9vcGZuLAogICAgICAgIGluaXQ6IG5vb3BmbiwKICAgICAgICBsYXllcnM6IG5vb3BmbiwKICAgICAgICByZWFkeTogbm9vcGZuLAogICAgICAgIHNoYXJlY291bnRlcnM6IHsKICAgICAgICAgICAgZ2V0U2hhcmVDb3VudHM6IG5vb3BmbgogICAgICAgIH0sCiAgICAgICAgdG9vbGJveDogbm9vcGZuLAogICAgICAgIHVwZGF0ZTogbm9vcGZuCiAgICB9Owp9KSgpOwo="},{"name":"amazon_ads.js","aliases":["amazon-adsystem.com/aax2/amzn_ads.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBpZiAoIGFtem5hZHMgKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIHcgPSB3aW5kb3c7CiAgICB2YXIgbm9vcGZuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgOwogICAgfS5iaW5kKCk7CiAgICB2YXIgYW16bmFkcyA9IHsKICAgICAgICBhcHBlbmRTY3JpcHRUYWc6IG5vb3BmbiwKICAgICAgICBhcHBlbmRUYXJnZXRpbmdUb0FkU2VydmVyVXJsOiBub29wZm4sCiAgICAgICAgYXBwZW5kVGFyZ2V0aW5nVG9RdWVyeVN0cmluZzogbm9vcGZuLAogICAgICAgIGNsZWFyVGFyZ2V0aW5nRnJvbUdQVEFzeW5jOiBub29wZm4sCiAgICAgICAgZG9BbGxUYXNrczogbm9vcGZuLAogICAgICAgIGRvR2V0QWRzQXN5bmM6IG5vb3BmbiwKICAgICAgICBkb1Rhc2s6IG5vb3BmbiwKICAgICAgICBkZXRlY3RJZnJhbWVBbmRHZXRVUkw6IG5vb3BmbiwKICAgICAgICBnZXRBZHM6IG5vb3BmbiwKICAgICAgICBnZXRBZHNBc3luYzogbm9vcGZuLAogICAgICAgIGdldEFkRm9yU2xvdDogbm9vcGZuLAogICAgICAgIGdldEFkc0NhbGxiYWNrOiBub29wZm4sCiAgICAgICAgZ2V0RGlzcGxheUFkczogbm9vcGZuLAogICAgICAgIGdldERpc3BsYXlBZHNBc3luYzogbm9vcGZuLAogICAgICAgIGdldERpc3BsYXlBZHNDYWxsYmFjazogbm9vcGZuLAogICAgICAgIGdldEtleXM6IG5vb3BmbiwKICAgICAgICBnZXRSZWZlcnJlclVSTDogbm9vcGZuLAogICAgICAgIGdldFNjcmlwdFNvdXJjZTogbm9vcGZuLAogICAgICAgIGdldFRhcmdldGluZzogbm9vcGZuLAogICAgICAgIGdldFRva2Vuczogbm9vcGZuLAogICAgICAgIGdldFZhbGlkTWlsbGlzZWNvbmRzOiBub29wZm4sCiAgICAgICAgZ2V0VmlkZW9BZHM6IG5vb3BmbiwKICAgICAgICBnZXRWaWRlb0Fkc0FzeW5jOiBub29wZm4sCiAgICAgICAgZ2V0VmlkZW9BZHNDYWxsYmFjazogbm9vcGZuLAogICAgICAgIGhhbmRsZUNhbGxCYWNrOiBub29wZm4sCiAgICAgICAgaGFzQWRzOiBub29wZm4sCiAgICAgICAgcmVuZGVyQWQ6IG5vb3BmbiwKICAgICAgICBzYXZlQWRzOiBub29wZm4sCiAgICAgICAgc2V0VGFyZ2V0aW5nOiBub29wZm4sCiAgICAgICAgc2V0VGFyZ2V0aW5nRm9yR1BUQXN5bmM6IG5vb3BmbiwKICAgICAgICBzZXRUYXJnZXRpbmdGb3JHUFRTeW5jOiBub29wZm4sCiAgICAgICAgdHJ5R2V0QWRzQXN5bmM6IG5vb3BmbiwKICAgICAgICB1cGRhdGVBZHM6IG5vb3BmbgogICAgfTsKICAgIHcuYW16bmFkcyA9IGFtem5hZHM7CiAgICB3LmFtem5fYWRzID0gdy5hbXpuX2FkcyB8fCBub29wZm47CiAgICB3LmFheF93cml0ZSA9IHcuYWF4X3dyaXRlIHx8IG5vb3BmbjsKICAgIHcuYWF4X3JlbmRlcl9hZCA9IHcuYWF4X3JlbmRlcl9hZCB8fCBub29wZm47Cn0pKCk7Cg=="},{"name":"amazon_apstag.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgovLyBodHRwczovL3d3dy5yZWRkaXQuY29tL3IvdUJsb2NrT3JpZ2luL2NvbW1lbnRzL2doanFwaC8KLy8gaHR0cHM6Ly9naXRodWIuY29tL05hbm9NZW93L1F1aWNrUmVwb3J0cy9pc3N1ZXMvMzcxNwovLyBodHRwczovL3d3dy5yZWRkaXQuY29tL3IvdUJsb2NrT3JpZ2luL2NvbW1lbnRzL3F5eDdlbi8KCi8vIGh0dHBzOi8vc2VhcmNoZm94Lm9yZy9tb3ppbGxhLWNlbnRyYWwvc291cmNlL2Jyb3dzZXIvZXh0ZW5zaW9ucy93ZWJjb21wYXQvc2hpbXMvYXBzdGFnLmpzCi8vICAgSW1wb3J0IHF1ZXVlLXJlbGF0ZWQgaW5pdGlhbGl6YXRpb24gY29kZS4KCihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIGNvbnN0IHcgPSB3aW5kb3c7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgICAgICA7IC8vIGpzaGludCBpZ25vcmU6bGluZQogICAgfS5iaW5kKCk7CiAgICBjb25zdCBfUSA9IHcuYXBzdGFnICYmIHcuYXBzdGFnLl9RIHx8IFtdOwogICAgY29uc3QgYXBzdGFnID0gewogICAgICAgIF9RLAogICAgICAgIGZldGNoQmlkczogZnVuY3Rpb24oYSwgYikgewogICAgICAgICAgICBpZiAoIHR5cGVvZiBiID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICAgICAgYihbXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGluaXQ6IG5vb3BmbiwKICAgICAgICBzZXREaXNwbGF5Qmlkczogbm9vcGZuLAogICAgICAgIHRhcmdldGluZ0tleXM6IG5vb3BmbiwKICAgIH07CiAgICB3LmFwc3RhZyA9IGFwc3RhZzsKICAgIF9RLnB1c2ggPSBmdW5jdGlvbihwcmVmaXgsIGFyZ3MpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBzd2l0Y2ggKHByZWZpeCkgewogICAgICAgICAgICBjYXNlICdmJzoKICAgICAgICAgICAgICAgIGFwc3RhZy5mZXRjaEJpZHMoLi4uYXJncyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgY29uc29sZS50cmFjZShlKTsKICAgICAgICB9CiAgICB9OwogICAgZm9yICggY29uc3QgY21kIG9mIF9RICkgewogICAgICAgIF9RLnB1c2goY21kKTsKICAgIH0KfSkoKTsK"},{"name":"ampproject_v0.js","aliases":["ampproject.org/v0.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuaGVhZDsKICAgIGlmICggIWhlYWQgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwogICAgc3R5bGUudGV4dENvbnRlbnQgPSBbCiAgICAgICAgJ2JvZHkgeycsCiAgICAgICAgJyAgYW5pbWF0aW9uOiBub25lICFpbXBvcnRhbnQ7JywKICAgICAgICAnICBvdmVyZmxvdzogdW5zZXQgIWltcG9ydGFudDsnLAogICAgICAgICd9JwogICAgXS5qb2luKCdcbicpOwogICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7Cn0pKCk7Cg=="},{"name":"chartbeat.js","aliases":["static.chartbeat.com/chartbeat.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICB3aW5kb3cucFNVUEVSRkxZID0gewogICAgICAgIGFjdGl2aXR5OiBub29wZm4sCiAgICAgICAgdmlydHVhbFBhZ2U6IG5vb3BmbgogICAgfTsKfSkoKTsK"},{"name":"doubleclick_instream_ad_status.js","aliases":["doubleclick.net/instream/ad_status.js"],"kind":{"mime":"application/javascript"},"content":"d2luZG93Lmdvb2dsZV9hZF9zdGF0dXMgPSAxOwo="},{"name":"empty","aliases":[],"kind":{"mime":"application/octet-stream"},"content":""},{"name":"fingerprint2.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxNC1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgovLyBSZWZlcmVuY2U6Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9maW5nZXJwcmludGpzL2ZpbmdlcnByaW50anMvdHJlZS92MgoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgY29uc3QgaGV4MzIgPSBsZW4gPT4gewogICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikKICAgICAgICAgICAgLnRvU3RyaW5nKDE2KQogICAgICAgICAgICAuc2xpY2UoLWxlbikKICAgICAgICAgICAgLnBhZFN0YXJ0KGxlbiwgJzAnKTsKICAgIH07CiAgICBjb25zdCBicm93c2VySWQgPSBgJHtoZXgzMig4KX0ke2hleDMyKDgpfSR7aGV4MzIoOCl9JHtoZXgzMig4KX1gOwogICAgY29uc3QgZnAyID0gZnVuY3Rpb24oKXt9OwogICAgZnAyLmdldCA9IGZ1bmN0aW9uKG9wdHMsIGNiKSB7CiAgICAgICAgaWYgKCAhY2IgICkgeyBjYiA9IG9wdHM7IH0KICAgICAgICBzZXRUaW1lb3V0KCggKSA9PiB7IGNiKFtdKTsgfSwgMSk7CiAgICB9OwogICAgZnAyLmdldFByb21pc2UgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTsKICAgIH07CiAgICBmcDIuZ2V0VjE4ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGJyb3dzZXJJZDsKICAgIH07CiAgICBmcDIueDY0aGFzaDEyOCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBicm93c2VySWQ7CiAgICB9OwogICAgZnAyLnByb3RvdHlwZSA9IHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKG9wdHMsIGNiKSB7CiAgICAgICAgICAgIGlmICggIWNiICApIHsgY2IgPSBvcHRzOyB9CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCApID0+IHsgY2IoYnJvd3NlcklkLCBbXSk7IH0sIDEpOwogICAgICAgIH0sCiAgICB9OwogICAgc2VsZi5GaW5nZXJwcmludDIgPSBmcDI7Cn0pKCk7Cg=="},{"name":"fingerprint3.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAyMi1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCB2aXNpdG9ySWQgPSAoKCApID0+IHsKICAgICAgICBsZXQgaWQgPSAnJzsKICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCA4OyBpKysgKSB7CiAgICAgICAgICAgIGlkICs9IChNYXRoLnJhbmRvbSgpICogMHgxMDAwMCArIDB4MTAwMCB8IDApLnRvU3RyaW5nKDE2KS5zbGljZSgtNCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBpZDsKICAgIH0pKCk7CiAgICBjb25zdCBGaW5nZXJwcmludEpTID0gY2xhc3MgewogICAgICAgIHN0YXRpYyBoYXNoQ29tcG9uZW50cygpIHsKICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3JJZDsKICAgICAgICB9CiAgICAgICAgc3RhdGljIGxvYWQoKSB7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEZpbmdlcnByaW50SlMoKSk7CiAgICAgICAgfQogICAgICAgIGdldCgpIHsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7CiAgICAgICAgICAgICAgICB2aXNpdG9ySWQsCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH07CiAgICB3aW5kb3cuRmluZ2VycHJpbnRKUyA9IEZpbmdlcnByaW50SlM7Cn0pKCk7Cg=="},{"name":"google-analytics_analytics.js","aliases":["google-analytics.com/analytics.js","googletagmanager_gtm.js","googletagmanager.com/gtm.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hbmFseXRpY3MvZGV2Z3VpZGVzL2NvbGxlY3Rpb24vYW5hbHl0aWNzanMvCiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICAvLwogICAgY29uc3QgVHJhY2tlciA9IGZ1bmN0aW9uKCkgewogICAgfTsKICAgIGNvbnN0IHAgPSBUcmFja2VyLnByb3RvdHlwZTsKICAgIHAuZ2V0ID0gbm9vcGZuOwogICAgcC5zZXQgPSBub29wZm47CiAgICBwLnNlbmQgPSBub29wZm47CiAgICAvLwogICAgY29uc3QgdyA9IHdpbmRvdzsKICAgIGNvbnN0IGdhTmFtZSA9IHcuR29vZ2xlQW5hbHl0aWNzT2JqZWN0IHx8ICdnYSc7CiAgICBjb25zdCBnYVF1ZXVlID0gd1tnYU5hbWVdOwogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VCbG9ja09yaWdpbi91QXNzZXRzL3B1bGwvNDExNQogICAgY29uc3QgZ2EgPSBmdW5jdGlvbigpIHsKICAgICAgICBjb25zdCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICAgIGlmICggbGVuID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICBjb25zdCBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpOwogICAgICAgIGxldCBmbjsKICAgICAgICBsZXQgYSA9IGFyZ3NbbGVuLTFdOwogICAgICAgIGlmICggYSBpbnN0YW5jZW9mIE9iamVjdCAmJiBhLmhpdENhbGxiYWNrIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIGZuID0gYS5oaXRDYWxsYmFjazsKICAgICAgICB9IGVsc2UgaWYgKCBhIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIGZuID0gKCApID0+IHsgYShnYS5jcmVhdGUoKSk7IH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc3QgcG9zID0gYXJncy5pbmRleE9mKCdoaXRDYWxsYmFjaycpOwogICAgICAgICAgICBpZiAoIHBvcyAhPT0gLTEgJiYgYXJnc1twb3MrMV0gaW5zdGFuY2VvZiBGdW5jdGlvbiApIHsKICAgICAgICAgICAgICAgIGZuID0gYXJnc1twb3MrMV07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCBmbiBpbnN0YW5jZW9mIEZ1bmN0aW9uID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZm4oKTsKICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgIH0KICAgIH07CiAgICBnYS5jcmVhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbmV3IFRyYWNrZXIoKTsKICAgIH07CiAgICBnYS5nZXRCeU5hbWUgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbmV3IFRyYWNrZXIoKTsKICAgIH07CiAgICBnYS5nZXRBbGwgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gW25ldyBUcmFja2VyKCldOwogICAgfTsKICAgIGdhLnJlbW92ZSA9IG5vb3BmbjsKICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91QmxvY2tPcmlnaW4vdUFzc2V0cy9pc3N1ZXMvMjEwNwogICAgZ2EubG9hZGVkID0gdHJ1ZTsKICAgIHdbZ2FOYW1lXSA9IGdhOwogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrL2lzc3Vlcy8zMDc1CiAgICBjb25zdCBkbCA9IHcuZGF0YUxheWVyOwogICAgaWYgKCBkbCBpbnN0YW5jZW9mIE9iamVjdCApIHsKICAgICAgICBpZiAoIGRsLmhpZGUgaW5zdGFuY2VvZiBPYmplY3QgJiYgdHlwZW9mIGRsLmhpZGUuZW5kID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICBkbC5oaWRlLmVuZCgpOwogICAgICAgICAgICBkbC5oaWRlLmVuZCA9ICgpPT57fTsKICAgICAgICB9CiAgICAgICAgaWYgKCB0eXBlb2YgZGwucHVzaCA9PT0gJ2Z1bmN0aW9uJyApIHsKICAgICAgICAgICAgY29uc3QgZG9DYWxsYmFjayA9IGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICAgICAgICAgIGlmICggaXRlbSBpbnN0YW5jZW9mIE9iamVjdCA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgaXRlbS5ldmVudENhbGxiYWNrICE9PSAnZnVuY3Rpb24nICkgeyByZXR1cm47IH0KICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoaXRlbS5ldmVudENhbGxiYWNrLCAxKTsKICAgICAgICAgICAgICAgIGl0ZW0uZXZlbnRDYWxsYmFjayA9ICgpPT57fTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgZGwucHVzaCA9IG5ldyBQcm94eShkbC5wdXNoLCB7CiAgICAgICAgICAgICAgICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7CiAgICAgICAgICAgICAgICAgICAgZG9DYWxsYmFjayhhcmdzWzBdKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KGRsKSApIHsKICAgICAgICAgICAgICAgIGNvbnN0IHEgPSBkbC5zbGljZSgpOwogICAgICAgICAgICAgICAgZm9yICggY29uc3QgaXRlbSBvZiBxICkgewogICAgICAgICAgICAgICAgICAgIGRvQ2FsbGJhY2soaXRlbSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAvLyBlbXB0eSBnYSBxdWV1ZQogICAgaWYgKCBnYVF1ZXVlIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgQXJyYXkuaXNBcnJheShnYVF1ZXVlLnEpICkgewogICAgICAgIGNvbnN0IHEgPSBnYVF1ZXVlLnEuc2xpY2UoKTsKICAgICAgICBnYVF1ZXVlLnEubGVuZ3RoID0gMDsKICAgICAgICBmb3IgKCBjb25zdCBlbnRyeSBvZiBxICkgewogICAgICAgICAgICBnYSguLi5lbnRyeSk7CiAgICAgICAgfQogICAgfQp9KSgpOwo="},{"name":"google-analytics_cx_api.js","aliases":["google-analytics.com/cx/api.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICB3aW5kb3cuY3hBcGkgPSB7CiAgICAgICAgY2hvb3NlVmFyaWF0aW9uOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfSwKICAgICAgICBnZXRDaG9zZW5WYXJpYXRpb246IG5vb3BmbiwKICAgICAgICBzZXRBbGxvd0hhc2g6IG5vb3BmbiwKICAgICAgICBzZXRDaG9zZW5WYXJpYXRpb246IG5vb3BmbiwKICAgICAgICBzZXRDb29raWVQYXRoOiBub29wZm4sCiAgICAgICAgc2V0RG9tYWluTmFtZTogbm9vcGZuCiAgICAgICAgfTsKfSkoKTsK"},{"name":"google-analytics_ga.js","aliases":["google-analytics.com/ga.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICAvLwogICAgY29uc3QgR2FxID0gZnVuY3Rpb24oKSB7CiAgICB9OwogICAgR2FxLnByb3RvdHlwZS5OYSA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuTyA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuU2EgPSBub29wZm47CiAgICBHYXEucHJvdG90eXBlLlRhID0gbm9vcGZuOwogICAgR2FxLnByb3RvdHlwZS5WYSA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuX2NyZWF0ZUFzeW5jVHJhY2tlciA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuX2dldEFzeW5jVHJhY2tlciA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuX2dldFBsdWdpbiA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGEpIHsKICAgICAgICBpZiAoIHR5cGVvZiBhID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICBhKCk7IHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KGEpID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2dhanMvbWV0aG9kcy9nYUpTQXBpRG9tYWluRGlyZWN0b3J5I19nYXQuR0FfVHJhY2tlcl8uX2xpbmsKICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdUJsb2NrT3JpZ2luL3VCbG9jay1pc3N1ZXMvaXNzdWVzLzE4MDcKICAgICAgICBpZiAoCiAgICAgICAgICAgIHR5cGVvZiBhWzBdID09PSAnc3RyaW5nJyAmJgogICAgICAgICAgICAvKF58XC4pX2xpbmskLy50ZXN0KGFbMF0pICYmCiAgICAgICAgICAgIHR5cGVvZiBhWzFdID09PSAnc3RyaW5nJwogICAgICAgICkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihhWzFdKTsKICAgICAgICAgICAgfSBjYXRjaChleCkgewogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb3JoaWxsL3VCbG9jay9pc3N1ZXMvMjE2MgogICAgICAgIGlmICggYVswXSA9PT0gJ19zZXQnICYmIGFbMV0gPT09ICdoaXRDYWxsYmFjaycgJiYgdHlwZW9mIGFbMl0gPT09ICdmdW5jdGlvbicgKSB7CiAgICAgICAgICAgIGFbMl0oKTsKICAgICAgICB9CiAgICB9OwogICAgLy8KICAgIGNvbnN0IHRyYWNrZXIgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3Qgb3V0ID0ge307CiAgICAgICAgY29uc3QgYXBpID0gWwogICAgICAgICAgICAnX2FkZElnbm9yZWRPcmdhbmljIF9hZGRJZ25vcmVkUmVmIF9hZGRJdGVtIF9hZGRPcmdhbmljJywKICAgICAgICAgICAgJ19hZGRUcmFucyBfY2xlYXJJZ25vcmVkT3JnYW5pYyBfY2xlYXJJZ25vcmVkUmVmIF9jbGVhck9yZ2FuaWMnLAogICAgICAgICAgICAnX2Nvb2tpZVBhdGhDb3B5IF9kZWxldGVDdXN0b21WYXIgX2dldE5hbWUgX3NldEFjY291bnQnLAogICAgICAgICAgICAnX2dldEFjY291bnQgX2dldENsaWVudEluZm8gX2dldERldGVjdEZsYXNoIF9nZXREZXRlY3RUaXRsZScsCiAgICAgICAgICAgICdfZ2V0TGlua2VyVXJsIF9nZXRMb2NhbEdpZlBhdGggX2dldFNlcnZpY2VNb2RlIF9nZXRWZXJzaW9uJywKICAgICAgICAgICAgJ19nZXRWaXNpdG9yQ3VzdG9tVmFyIF9pbml0RGF0YSBfbGlua0J5UG9zdCcsCiAgICAgICAgICAgICdfc2V0QWxsb3dBbmNob3IgX3NldEFsbG93SGFzaCBfc2V0QWxsb3dMaW5rZXIgX3NldENhbXBDb250ZW50S2V5JywKICAgICAgICAgICAgJ19zZXRDYW1wTWVkaXVtS2V5IF9zZXRDYW1wTmFtZUtleSBfc2V0Q2FtcE5PS2V5IF9zZXRDYW1wU291cmNlS2V5JywKICAgICAgICAgICAgJ19zZXRDYW1wVGVybUtleSBfc2V0Q2FtcGFpZ25Db29raWVUaW1lb3V0IF9zZXRDYW1wYWlnblRyYWNrIF9zZXRDbGllbnRJbmZvJywKICAgICAgICAgICAgJ19zZXRDb29raWVQYXRoIF9zZXRDb29raWVQZXJzaXN0ZW5jZSBfc2V0Q29va2llVGltZW91dCBfc2V0Q3VzdG9tVmFyJywKICAgICAgICAgICAgJ19zZXREZXRlY3RGbGFzaCBfc2V0RGV0ZWN0VGl0bGUgX3NldERvbWFpbk5hbWUgX3NldExvY2FsR2lmUGF0aCcsCiAgICAgICAgICAgICdfc2V0TG9jYWxSZW1vdGVTZXJ2ZXJNb2RlIF9zZXRMb2NhbFNlcnZlck1vZGUgX3NldFJlZmVycmVyT3ZlcnJpZGUgX3NldFJlbW90ZVNlcnZlck1vZGUnLAogICAgICAgICAgICAnX3NldFNhbXBsZVJhdGUgX3NldFNlc3Npb25UaW1lb3V0IF9zZXRTaXRlU3BlZWRTYW1wbGVSYXRlIF9zZXRTZXNzaW9uQ29va2llVGltZW91dCcsCiAgICAgICAgICAgICdfc2V0VmFyIF9zZXRWaXNpdG9yQ29va2llVGltZW91dCBfdHJhY2tFdmVudCBfdHJhY2tQYWdlTG9hZFRpbWUnLAogICAgICAgICAgICAnX3RyYWNrUGFnZXZpZXcgX3RyYWNrU29jaWFsIF90cmFja1RpbWluZyBfdHJhY2tUcmFucycsCiAgICAgICAgICAgICdfdmlzaXRDb2RlJwogICAgICAgIF0uam9pbignICcpLnNwbGl0KC9ccysvKTsKICAgICAgICBmb3IgKCBjb25zdCBtZXRob2Qgb2YgYXBpICkgewogICAgICAgICAgICBvdXRbbWV0aG9kXSA9IG5vb3BmbjsKICAgICAgICB9CiAgICAgICAgb3V0Ll9nZXRMaW5rZXJVcmwgPSBmdW5jdGlvbihhKSB7CiAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgIH07CiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0FkZ3VhcmRUZWFtL1NjcmlwdGxldHMvaXNzdWVzLzE1NAogICAgICAgIG91dC5fbGluayA9IGZ1bmN0aW9uKGEpIHsKICAgICAgICAgICAgaWYgKCB0eXBlb2YgYSAhPT0gJ3N0cmluZycgKSB7IHJldHVybjsgfQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihhKTsKICAgICAgICAgICAgfSBjYXRjaChleCkgewogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gb3V0OwogICAgfSkoKTsKICAgIC8vCiAgICBjb25zdCBHYXQgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBHYXQucHJvdG90eXBlLl9hbm9ueW1pemVJUCA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuX2NyZWF0ZVRyYWNrZXIgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLl9mb3JjZVNTTCA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuX2dldFBsdWdpbiA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuX2dldFRyYWNrZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdHJhY2tlcjsKICAgIH07CiAgICBHYXQucHJvdG90eXBlLl9nZXRUcmFja2VyQnlOYW1lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRyYWNrZXI7CiAgICB9OwogICAgR2F0LnByb3RvdHlwZS5fZ2V0VHJhY2tlcnMgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLmFhID0gbm9vcGZuOwogICAgR2F0LnByb3RvdHlwZS5hYiA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuaGIgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLmxhID0gbm9vcGZuOwogICAgR2F0LnByb3RvdHlwZS5vYSA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUucGEgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLnUgPSBub29wZm47CiAgICBjb25zdCBnYXQgPSBuZXcgR2F0KCk7CiAgICB3aW5kb3cuX2dhdCA9IGdhdDsKICAgIC8vCiAgICBjb25zdCBnYXEgPSBuZXcgR2FxKCk7CiAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgYWEgPSB3aW5kb3cuX2dhcSB8fCBbXTsKICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkoYWEpICkgewogICAgICAgICAgICB3aGlsZSAoIGFhWzBdICkgewogICAgICAgICAgICAgICAgZ2FxLnB1c2goYWEuc2hpZnQoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KSgpOwogICAgd2luZG93Ll9nYXEgPSBnYXEucWYgPSBnYXE7Cn0pKCk7Cg=="},{"name":"google-analytics_inpage_linkid.js","aliases":["google-analytics.com/inpage_linkid.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuX2dhcSA9IHdpbmRvdy5fZ2FxIHx8IHsKICAgICAgICBwdXNoOiBmdW5jdGlvbigpIHsKICAgICAgICB9CiAgICB9Owp9KSgpOwo="},{"name":"google-ima.js","aliases":["google-ima3"],"kind":{"mime":"application/javascript"},"content":""},{"name":"googlesyndication_adsbygoogle.js","aliases":["googlesyndication.com/adsbygoogle.js","googlesyndication-adsbygoogle"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBpbml0ID0gKCApID0+IHsKICAgICAgICB3aW5kb3cuYWRzYnlnb29nbGUgPSB7CiAgICAgICAgICAgIGxvYWRlZDogdHJ1ZSwKICAgICAgICAgICAgcHVzaDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGNvbnN0IHBocyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hZHNieWdvb2dsZScpOwogICAgICAgIGNvbnN0IGNzcyA9ICdoZWlnaHQ6MXB4IWltcG9ydGFudDttYXgtaGVpZ2h0OjFweCFpbXBvcnRhbnQ7bWF4LXdpZHRoOjFweCFpbXBvcnRhbnQ7d2lkdGg6MXB4IWltcG9ydGFudDsnOwogICAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHBocy5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgY29uc3QgaWQgPSBgYXN3aWZ0XyR7aX1gOwogICAgICAgICAgICBpZiAoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGlmcmFtZSMke2lkfWApICE9PSBudWxsICkgeyBjb250aW51ZTsgfQogICAgICAgICAgICBjb25zdCBmciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpOwogICAgICAgICAgICBmci5pZCA9IGlkOwogICAgICAgICAgICBmci5zdHlsZSA9IGNzczsKICAgICAgICAgICAgY29uc3QgY2ZyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7CiAgICAgICAgICAgIGNmci5pZCA9IGBnb29nbGVfYWRzX2ZyYW1lJHtpfWA7CiAgICAgICAgICAgIGZyLmFwcGVuZENoaWxkKGNmcik7CiAgICAgICAgICAgIHBoc1tpXS5hcHBlbmRDaGlsZChmcik7CiAgICAgICAgfQogICAgfTsKICAgIGlmICgKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYWRzYnlnb29nbGUnKS5sZW5ndGggPT09IDAgJiYKICAgICAgICBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycKICAgICkgewogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdCwgeyBvbmNlOiB0cnVlIH0pOwogICAgfSBlbHNlIHsKICAgICAgICBpbml0KCk7CiAgICB9Cn0pKCk7CgovKgpwYWdlYWQyLmdvb2dsZXN5bmRpY2F0aW9uLmNvbS9wYWdlYWQvanMvYWRzYnlnb29nbGUuanMsYWRzYnlnb29nbGUtcGxhY2Vob2xkZXIsYWRzYnlnb29nbGVTdGF0dXMsZ29vZ2xlX2FkX2NoYW5uZWwsZ29vZ2xlX2FkX2NsaWVudCxnb29nbGVfYWRfZm9ybWF0LGdvb2dsZV9hZF9mcmVxdWVuY3lfaGludCxnb29nbGVfYWRfaGVpZ2h0LGdvb2dsZV9hZF9ob3N0LGdvb2dsZV9hZF9ob3N0X2NoYW5uZWwsZ29vZ2xlX2FkX21vZGlmaWNhdGlvbnMsZ29vZ2xlX2FkX3JlZ2lvbixnb29nbGVfYWRfcmVzaXphYmxlLGdvb2dsZV9hZF9yZXNpemUsZ29vZ2xlX2FkX3NlY3Rpb24sZ29vZ2xlX2FkX3NlbWFudGljX2FyZWEsZ29vZ2xlX2FkX3dpZHRoLGdvb2dsZV9hZGJyZWFrX3Rlc3QsZ29vZ2xlX2Fkc19mcmFtZSxnb29nbGVfYWRzX2lmcmFtZSxnb29nbGVfYWR0ZXN0LGdvb2dsZV9hZG1vYl9pbnRlcnN0aXRpYWxfc2xvdCxnb29nbGVfYWRtb2JfcmV3YXJkZWRfc2xvdCxnb29nbGVfYWRtb2JfYWRzX29ubHksZ29vZ2xlLWFkc2Vuc2UtcGxhdGZvcm0tYWNjb3VudCxnb29nbGVfYWRzZW5zZV9zZXR0aW5ncyxnb29nbGVfYW1hX2NvbmZpZyxnb29nbGUtYW1hLW9yZGVyLWFzc3VyYW5jZSxnb29nbGVfYW1hX3NldHRpbmdzLGdvb2dsZV9hbWFfc3RhdGUsZ29vZ2xlX2FwbHRsYWQsZ29vZ2xlX2F1ZGlvX3NlbnNlLGdvb2dsZS1hdXRvLXBsYWNlZC1yZWFkLWFsb3VkLXBsYXllci1yZXNlcnZlZCxnb29nbGVfZGVidWdfcGFyYW1zLGdvb2dsZV9mdWxsX3dpZHRoX3Jlc3BvbnNpdmUsZ29vZ2xlX2Z1bGxfd2lkdGhfcmVzcG9uc2l2ZV9hbGxvd2VkLGdvb2dsZV9pbWFnZV9yZXF1ZXN0cyxnb29nbGVfanNfZXJyb3JzLGdvb2dsZV9qc19yZXBvcnRpbmdfcXVldWUsZ29vZ2xlX2xvYWRlcl9mZWF0dXJlc191c2VkLGdvb2dsZV9sbHAsZ29vZ2xlX2xvZ2dpbmdfcXVldWUsZ29vZ2xlX21heF9hZF9jb250ZW50X3JhdGluZyxnb29nbGVfbWVhc3VyZV9qc190aW1pbmcsZ29vZ2xlX21sX3JhbmssZ29vZ2xlX292ZXJsYXlzLGdvb2dsZV9vdmVycmlkZV9mb3JtYXQsZ29vZ2xlX3BhY2thZ2UsZ29vZ2xlX3BhZ2VfdXJsLGdvb2dsZV9wZXJzaXN0ZW50X3N0YXRlX2FzeW5jLGdvb2dsZV9wZ2JfcmVhY3RpdmUsZ29vZ2xlX3BsYWNlbWVudF9pZCxnb29nbGVfcHJldl9hZF9mb3JtYXRzX2J5X3JlZ2lvbixnb29nbGVfcHJldl9hZF9zbG90bmFtZXNfYnlfcmVnaW9uLGdvb2dsZV9yZWFjdGl2ZV9hZF9mb3JtYXQsZ29vZ2xlX3JlYWN0aXZlX2Fkc19nbG9iYWxfc3RhdGUsZ29vZ2xlX3Jlc2l6aW5nX2hlaWdodCxnb29nbGVfcmVzaXppbmdfd2lkdGgsZ29vZ2xlX3Jlc3BvbnNpdmVfYXV0b19mb3JtYXQsZ29vZ2xlX3Jlc3BvbnNpdmVfZHVtbXlfYWQsZ29vZ2xlX3Jlc3BvbnNpdmVfZm9ybWF0cyxnb29nbGVfcmVzdHJpY3RfZGF0YV9wcm9jZXNzaW5nLGdvb2dsZV9ydW1fdGFza19pZF9jb3VudGVyLGdvb2dsZV9zYWZlX2Zvcl9yZXNwb25zaXZlX292ZXJyaWRlLGdvb2dsZV9zaGFkb3dfbW9kZSxnb29nbGVfc3J0LGdvb2dsZV90YWdfZm9yX3VuZGVyX2FnZV9vZl9jb25zZW50LGdvb2dsZV90YWdfb3JpZ2luLGdvb2dsZV90YWdfcGFydG5lcixnb29nbGVfdHJhZmZpY19zb3VyY2UsZ29vZ2xlX3VuaXF1ZV9pZCxnb29nbGV0YWcKKi8K"},{"name":"googletagservices_gpt.js","aliases":["googletagservices.com/gpt.js","googletagservices-gpt"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9kb3VibGVjbGljay1ncHQvcmVmZXJlbmNlCiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH0uYmluZCgpOwogICAgY29uc3Qgbm9vcHRoaXNmbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICAgIGNvbnN0IG5vb3BudWxsZm4gPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH07CiAgICBjb25zdCBub29wYXJyYXlmbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBbXTsKICAgIH07CiAgICBjb25zdCBub29wc3RyZm4gPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICB9OwogICAgLy8KICAgIGNvbnN0IGNvbXBhbmlvbkFkc1NlcnZpY2UgPSB7CiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogbm9vcHRoaXNmbiwKICAgICAgICBlbmFibGVTeW5jTG9hZGluZzogbm9vcGZuLAogICAgICAgIHNldFJlZnJlc2hVbmZpbGxlZFNsb3RzOiBub29wZm4KICAgIH07CiAgICBjb25zdCBjb250ZW50U2VydmljZSA9IHsKICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBub29wdGhpc2ZuLAogICAgICAgIHNldENvbnRlbnQ6IG5vb3BmbgogICAgfTsKICAgIGNvbnN0IFBhc3NiYWNrU2xvdCA9IGZ1bmN0aW9uKCkgewogICAgfTsKICAgIGxldCBwID0gUGFzc2JhY2tTbG90LnByb3RvdHlwZTsKICAgIHAuZGlzcGxheSA9IG5vb3BmbjsKICAgIHAuZ2V0ID0gbm9vcG51bGxmbjsKICAgIHAuc2V0ID0gbm9vcHRoaXNmbjsKICAgIHAuc2V0Q2xpY2tVcmwgPSBub29wdGhpc2ZuOwogICAgcC5zZXRUYWdGb3JDaGlsZERpcmVjdGVkVHJlYXRtZW50ID0gbm9vcHRoaXNmbjsKICAgIHAuc2V0VGFyZ2V0aW5nID0gbm9vcHRoaXNmbjsKICAgIHAudXBkYXRlVGFyZ2V0aW5nRnJvbU1hcCA9IG5vb3B0aGlzZm47CiAgICBjb25zdCBwdWJBZHNTZXJ2aWNlID0gewogICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IG5vb3B0aGlzZm4sCiAgICAgICAgY2xlYXI6IG5vb3BmbiwKICAgICAgICBjbGVhckNhdGVnb3J5RXhjbHVzaW9uczogbm9vcHRoaXNmbiwKICAgICAgICBjbGVhclRhZ0ZvckNoaWxkRGlyZWN0ZWRUcmVhdG1lbnQ6IG5vb3B0aGlzZm4sCiAgICAgICAgY2xlYXJUYXJnZXRpbmc6IG5vb3B0aGlzZm4sCiAgICAgICAgY29sbGFwc2VFbXB0eURpdnM6IG5vb3BmbiwKICAgICAgICBkZWZpbmVPdXRPZlBhZ2VQYXNzYmFjazogZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgUGFzc2JhY2tTbG90KCk7IH0sCiAgICAgICAgZGVmaW5lUGFzc2JhY2s6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IFBhc3NiYWNrU2xvdCgpOyB9LAogICAgICAgIGRpc2FibGVJbml0aWFsTG9hZDogbm9vcGZuLAogICAgICAgIGRpc3BsYXk6IG5vb3BmbiwKICAgICAgICBlbmFibGVBc3luY1JlbmRlcmluZzogbm9vcGZuLAogICAgICAgIGVuYWJsZVNpbmdsZVJlcXVlc3Q6IG5vb3BmbiwKICAgICAgICBlbmFibGVTeW5jUmVuZGVyaW5nOiBub29wZm4sCiAgICAgICAgZW5hYmxlVmlkZW9BZHM6IG5vb3BmbiwKICAgICAgICBnZXQ6IG5vb3BudWxsZm4sCiAgICAgICAgZ2V0QXR0cmlidXRlS2V5czogbm9vcGFycmF5Zm4sCiAgICAgICAgZ2V0VGFyZ2V0aW5nOiBub29wYXJyYXlmbiwKICAgICAgICBnZXRUYXJnZXRpbmdLZXlzOiBub29wYXJyYXlmbiwKICAgICAgICBnZXRTbG90czogbm9vcGFycmF5Zm4sCiAgICAgICAgcmVmcmVzaDogbm9vcGZuLAogICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IG5vb3BmbiwKICAgICAgICBzZXQ6IG5vb3B0aGlzZm4sCiAgICAgICAgc2V0Q2F0ZWdvcnlFeGNsdXNpb246IG5vb3B0aGlzZm4sCiAgICAgICAgc2V0Q2VudGVyaW5nOiBub29wZm4sCiAgICAgICAgc2V0Q29va2llT3B0aW9uczogbm9vcHRoaXNmbiwKICAgICAgICBzZXRGb3JjZVNhZmVGcmFtZTogbm9vcHRoaXNmbiwKICAgICAgICBzZXRMb2NhdGlvbjogbm9vcHRoaXNmbiwKICAgICAgICBzZXRQdWJsaXNoZXJQcm92aWRlZElkOiBub29wdGhpc2ZuLAogICAgICAgIHNldFByaXZhY3lTZXR0aW5nczogbm9vcHRoaXNmbiwKICAgICAgICBzZXRSZXF1ZXN0Tm9uUGVyc29uYWxpemVkQWRzOiBub29wdGhpc2ZuLAogICAgICAgIHNldFNhZmVGcmFtZUNvbmZpZzogbm9vcHRoaXNmbiwKICAgICAgICBzZXRUYWdGb3JDaGlsZERpcmVjdGVkVHJlYXRtZW50OiBub29wdGhpc2ZuLAogICAgICAgIHNldFRhcmdldGluZzogbm9vcHRoaXNmbiwKICAgICAgICBzZXRWaWRlb0NvbnRlbnQ6IG5vb3B0aGlzZm4sCiAgICAgICAgdXBkYXRlQ29ycmVsYXRvcjogbm9vcGZuCiAgICB9OwogICAgY29uc3QgU2l6ZU1hcHBpbmdCdWlsZGVyID0gZnVuY3Rpb24oKSB7CiAgICB9OwogICAgcCA9IFNpemVNYXBwaW5nQnVpbGRlci5wcm90b3R5cGU7CiAgICBwLmFkZFNpemUgPSBub29wdGhpc2ZuOwogICAgcC5idWlsZCA9IG5vb3BudWxsZm47CiAgICBjb25zdCBTbG90ID0gZnVuY3Rpb24oKSB7CiAgICB9OwogICAgcCA9IFNsb3QucHJvdG90eXBlOwogICAgcC5hZGRTZXJ2aWNlID0gbm9vcHRoaXNmbjsKICAgIHAuY2xlYXJDYXRlZ29yeUV4Y2x1c2lvbnMgPSBub29wdGhpc2ZuOwogICAgcC5jbGVhclRhcmdldGluZyA9IG5vb3B0aGlzZm47CiAgICBwLmRlZmluZVNpemVNYXBwaW5nID0gbm9vcHRoaXNmbjsKICAgIHAuZ2V0ID0gbm9vcG51bGxmbjsKICAgIHAuZ2V0QWRVbml0UGF0aCA9IG5vb3BhcnJheWZuOwogICAgcC5nZXRBdHRyaWJ1dGVLZXlzID0gbm9vcGFycmF5Zm47CiAgICBwLmdldENhdGVnb3J5RXhjbHVzaW9ucyA9IG5vb3BhcnJheWZuOwogICAgcC5nZXREb21JZCA9IG5vb3BzdHJmbjsKICAgIHAuZ2V0UmVzcG9uc2VJbmZvcm1hdGlvbiA9IG5vb3BudWxsZm47CiAgICBwLmdldFNsb3RFbGVtZW50SWQgPSBub29wc3RyZm47CiAgICBwLmdldFNsb3RJZCA9IG5vb3B0aGlzZm47CiAgICBwLmdldFRhcmdldGluZyA9IG5vb3BhcnJheWZuOwogICAgcC5nZXRUYXJnZXRpbmdLZXlzID0gbm9vcGFycmF5Zm47CiAgICBwLnNldCA9IG5vb3B0aGlzZm47CiAgICBwLnNldENhdGVnb3J5RXhjbHVzaW9uID0gbm9vcHRoaXNmbjsKICAgIHAuc2V0Q2xpY2tVcmwgPSBub29wdGhpc2ZuOwogICAgcC5zZXRDb2xsYXBzZUVtcHR5RGl2ID0gbm9vcHRoaXNmbjsKICAgIHAuc2V0VGFyZ2V0aW5nID0gbm9vcHRoaXNmbjsKICAgIHAudXBkYXRlVGFyZ2V0aW5nRnJvbU1hcCA9IG5vb3B0aGlzZm47CiAgICAvLwogICAgY29uc3QgZ3B0ID0gd2luZG93Lmdvb2dsZXRhZyB8fCB7fTsKICAgIGNvbnN0IGNtZCA9IGdwdC5jbWQgfHwgW107CiAgICBncHQuYXBpUmVhZHkgPSB0cnVlOwogICAgZ3B0LmNtZCA9IFtdOwogICAgZ3B0LmNtZC5wdXNoID0gZnVuY3Rpb24oYSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGEoKTsKICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgIH0KICAgICAgICByZXR1cm4gMTsKICAgIH07CiAgICBncHQuY29tcGFuaW9uQWRzID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb21wYW5pb25BZHNTZXJ2aWNlOyB9OwogICAgZ3B0LmNvbnRlbnQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbnRlbnRTZXJ2aWNlOyB9OwogICAgZ3B0LmRlZmluZU91dE9mUGFnZVNsb3QgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBTbG90KCk7IH07CiAgICBncHQuZGVmaW5lU2xvdCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IFNsb3QoKTsgfTsKICAgIGdwdC5kZXN0cm95U2xvdHMgPSBub29wZm47CiAgICBncHQuZGlzYWJsZVB1Ymxpc2hlckNvbnNvbGUgPSBub29wZm47CiAgICBncHQuZGlzcGxheSA9IG5vb3BmbjsKICAgIGdwdC5lbmFibGVTZXJ2aWNlcyA9IG5vb3BmbjsKICAgIGdwdC5nZXRWZXJzaW9uID0gbm9vcHN0cmZuOwogICAgZ3B0LnB1YmFkcyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcHViQWRzU2VydmljZTsgfTsKICAgIGdwdC5wdWJhZHNSZWFkeSA9IHRydWU7CiAgICBncHQuc2V0QWRJZnJhbWVUaXRsZSA9IG5vb3BmbjsKICAgIGdwdC5zaXplTWFwcGluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IFNpemVNYXBwaW5nQnVpbGRlcigpOyB9OwogICAgd2luZG93Lmdvb2dsZXRhZyA9IGdwdDsKICAgIHdoaWxlICggY21kLmxlbmd0aCAhPT0gMCApIHsKICAgICAgICBncHQuY21kLnB1c2goY21kLnNoaWZ0KCkpOwogICAgfQp9KSgpOwo="},{"name":"hd-main.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBsID0ge307CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBjb25zdCBwcm9wcyA9IFsKICAgICAgICAiJGoiLCJBZCIsIkJkIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIk5qIiwiT2MiLCJQYyIsIlBlIiwKICAgICAgICAiUWMiLCJRZSIsIlJjIiwiUmUiLCJSaSIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJXZyIsIlhjIiwiWGciLCJZYyIsIllkIiwKICAgICAgICAiYWQiLCJhZSIsImJkIiwiYmYiLCJjZCIsImRkIiwiZWQiLCJlZiIsImVrIiwiZmQiLCJmZyIsImZoIiwiZmsiLCJnZCIsImhkIiwKICAgICAgICAiaWciLCJpaiIsImpkIiwia2QiLCJrZSIsImxkIiwibWQiLCJtaSIsIm5kIiwib2QiLCJvaCIsInBkIiwicGYiLCJxZCIsInJkIiwKICAgICAgICAic2QiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsIndnIiwieGQiLCJ4aCIsInlkIiwiemQiLAogICAgICAgICIkZCIsIiRlIiwiJGsiLCJBZSIsIkFmIiwiQWoiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkVrIiwiRW8iLCJFcCIsIkZlIiwiRm8iLAogICAgICAgICJHZSIsIkdoIiwiSGsiLCJJZSIsIklwIiwiSmUiLCJLZSIsIktrIiwiS3EiLCJMZSIsIkxoIiwiTGsiLCJNZSIsIk1tIiwiTmUiLAogICAgICAgICJPZSIsIlBlIiwiUWUiLCJSZSIsIlJwIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJWcCIsIldlIiwiWGQiLCJYZSIsIllkIiwiWWUiLAogICAgICAgICJaZCIsIlplIiwiWmYiLCJaayIsImFlIiwiYWYiLCJhbCIsImJlIiwiYmYiLCJiZyIsImNlIiwiY3AiLCJkZiIsImRpIiwiZWUiLAogICAgICAgICJlZiIsImZlIiwiZmYiLCJnZiIsImdtIiwiaGUiLCJoZiIsImllIiwiamUiLCJqZiIsImtlIiwia2YiLCJrbCIsImxlIiwibGYiLAogICAgICAgICJsayIsIm1mIiwibWciLCJtbiIsIm5mIiwib2UiLCJvZiIsInBlIiwicGYiLCJwZyIsInFlIiwicWYiLCJyZSIsInJmIiwic2UiLAogICAgICAgICJzZiIsInRlIiwidGYiLCJ0aSIsInVlIiwidWYiLCJ2ZSIsInZmIiwid2UiLCJ3ZiIsIndnIiwid2kiLCJ4ZSIsInllIiwieWYiLAogICAgICAgICJ5ayIsInlsIiwiemUiLCJ6ZiIsInprIgogICAgXTsKICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrICkgewogICAgICAgIGxbcHJvcHNbaV1dID0gbm9vcGZuOwogICAgfQogICAgd2luZG93LkwgPSB3aW5kb3cuSiA9IGw7Cn0pKCk7Cg=="},{"name":"ligatus_angular-tag.js","aliases":["ligatus.com/*/angular-tag.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBzZWxmLmFkUHJvdGVjdCA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3aW5kb3csIHsKICAgICAgICB1YWJwZGw6IHsgdmFsdWU6IHRydWUgfSwKICAgICAgICB1YWJEZXRlY3Q6IHsgdmFsdWU6IHRydWUgfQogICAgfSk7Cn0pKCk7Cg=="},{"name":"mxpnl_mixpanel.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAyMS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICAvLyBodHRwczovL2RldmVsb3Blci5taXhwYW5lbC5jb20vZG9jcy9qYXZhc2NyaXB0LWZ1bGwtYXBpLXJlZmVyZW5jZQogICAgY29uc3QgbWl4cGFuZWwgPSB7CiAgICAgICAgZ2V0X2Rpc3RpbmN0X2lkKCkgewogICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgfSwKICAgICAgICBpbml0KHQsIGNmZykgewogICAgICAgICAgICBpZiAoIGNmZyBpbnN0YW5jZW9mIE9iamVjdCA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoICdsb2FkZWQnIGluIGNmZyA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGNmZy5sb2FkZWQgaW5zdGFuY2VvZiBGdW5jdGlvbiA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBjZmcubG9hZGVkKCk7CiAgICAgICAgfSwKICAgICAgICByZWdpc3RlcigpIHsKICAgICAgICB9LAogICAgICAgIHJlZ2lzdGVyX29uY2UoKSB7CiAgICAgICAgfSwKICAgICAgICB0cmFjaygpIHsKICAgICAgICAgICAgY29uc3QgY2IgPSBBcnJheS5mcm9tKGFyZ3VtZW50cykucG9wKCk7CiAgICAgICAgICAgIGlmICggY2IgaW5zdGFuY2VvZiBGdW5jdGlvbiA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBjYigpOwogICAgICAgIH0sCiAgICB9OwogICAgY29uc3QgcSA9IHNlbGYubWl4cGFuZWwgJiYgc2VsZi5taXhwYW5lbC5faSB8fCBbXTsKICAgIHNlbGYubWl4cGFuZWwgPSBtaXhwYW5lbDsKICAgIGZvciAoIGNvbnN0IGkgb2YgcSApIHsKICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkoaSkgPT09IGZhbHNlICkgeyBjb250aW51ZTsgfQogICAgICAgIG1peHBhbmVsLmluaXQoLi4uaSk7CiAgICB9Cn0pKCk7Cg=="},{"name":"monkeybroker.js","aliases":["d3pkae9owd2lcf.cloudfront.net/mb105.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICB3aW5kb3cucGJqcyA9IHsgbGliTG9hZGVkOiB0cnVlIH07CiAgICBjb25zdCBtYiA9IHdpbmRvdy5Nb25rZXlCcm9rZXIgfHwgewogICAgICAgIGFkZEF0dHJpYnV0ZTogbm9vcGZuLAogICAgICAgIGFkZFNsb3Q6IGZ1bmN0aW9uKGEpIHsKICAgICAgICAgICAgdGhpcy5zbG90c1thLnNsb3RdID0ge307CiAgICAgICAgfSwKICAgICAgICBkZWZpbmVTbG90OiBub29wZm4sCiAgICAgICAgZmlsbFNsb3Q6IG5vb3BmbiwKICAgICAgICBnbzogbm9vcGZuLAogICAgICAgIGludmVudG9yeUNvbmRpdGlvbmFsUGxhY2VtZW50OiBub29wZm4sCiAgICAgICAgcmVnaXN0ZXJTaXplQ2FsbGJhY2s6IG5vb3BmbiwKICAgICAgICByZWdpc3RlclNsb3RDYWxsYmFjazogbm9vcGZuLAogICAgICAgIHNsb3RzOiB7fSwKICAgICAgICB2ZXJzaW9uOiAnJwogICAgfTsKICAgIG1iLnJlZ1Nsb3RzTWFwID0gbWIuc2xvdHM7CiAgICB3aW5kb3cuTW9ua2V5QnJva2VyID0gbWI7Cn0pKCk7Cg=="},{"name":"nobab.js","aliases":["bab-defuser.js","prevent-bab.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBzaWduYXR1cmVzID0gWwogICAgICAgIFsgJ2Jsb2NrYWRibG9jaycgXSwKICAgICAgICBbICdiYWJhc2JtJyBdLAogICAgICAgIFsgL2dldEl0ZW1cKCdiYWJuJ1wpLyBdLAogICAgICAgIFsKICAgICAgICAgICAgJ2dldEVsZW1lbnRCeUlkJywKICAgICAgICAgICAgJ1N0cmluZy5mcm9tQ2hhckNvZGUnLAogICAgICAgICAgICAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknLAogICAgICAgICAgICAnY2hhckF0JywKICAgICAgICAgICAgJ0RPTUNvbnRlbnRMb2FkZWQnLAogICAgICAgICAgICAnQWRCbG9jaycsCiAgICAgICAgICAgICdhZGRFdmVudExpc3RlbmVyJywKICAgICAgICAgICAgJ2RvU2Nyb2xsJywKICAgICAgICAgICAgJ2Zyb21DaGFyQ29kZScsCiAgICAgICAgICAgICc8PDJ8cj4+NCcsCiAgICAgICAgICAgICdzZXNzaW9uU3RvcmFnZScsCiAgICAgICAgICAgICdjbGllbnRXaWR0aCcsCiAgICAgICAgICAgICdsb2NhbFN0b3JhZ2UnLAogICAgICAgICAgICAnTWF0aCcsCiAgICAgICAgICAgICdyYW5kb20nCiAgICAgICAgXSwKICAgIF07CiAgICBjb25zdCBjaGVjayA9IGZ1bmN0aW9uKHMpIHsKICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBzaWduYXR1cmVzLmxlbmd0aDsgaSsrICkgewogICAgICAgICAgICBjb25zdCB0b2tlbnMgPSBzaWduYXR1cmVzW2ldOwogICAgICAgICAgICBsZXQgbWF0Y2ggPSAwOwogICAgICAgICAgICBmb3IgKCBsZXQgaiA9IDA7IGogPCB0b2tlbnMubGVuZ3RoOyBqKysgKSB7CiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1tqXTsKICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IHRva2VuIGluc3RhbmNlb2YgUmVnRXhwCiAgICAgICAgICAgICAgICAgICAgPyBzLnNlYXJjaCh0b2tlbikKICAgICAgICAgICAgICAgICAgICA6IHMuaW5kZXhPZih0b2tlbik7CiAgICAgICAgICAgICAgICBpZiAoIHBvcyAhPT0gLTEgKSB7IG1hdGNoICs9IDE7IH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIChtYXRjaCAvIHRva2Vucy5sZW5ndGgpID49IDAuOCApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKICAgIHdpbmRvdy5ldmFsID0gbmV3IFByb3h5KHdpbmRvdy5ldmFsLCB7ICAgICAgICAgICAgICAvLyBqc2hpbnQgaWdub3JlOiBsaW5lCiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJncykgewogICAgICAgICAgICBjb25zdCBhID0gYXJnc1swXTsKICAgICAgICAgICAgaWYgKCB0eXBlb2YgYSAhPT0gJ3N0cmluZycgfHwgIWNoZWNrKGEpICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIGRvY3VtZW50LmJvZHkgKSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnJlbW92ZVByb3BlcnR5KCd2aXNpYmlsaXR5Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhYmFzYm1zZ3gnKTsKICAgICAgICAgICAgaWYgKCBlbCApIHsKICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CiAgICB3aW5kb3cuc2V0VGltZW91dCA9IG5ldyBQcm94eSh3aW5kb3cuc2V0VGltZW91dCwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpIHsKICAgICAgICAgICAgY29uc3QgYSA9IGFyZ3NbMF07CiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgIHR5cGVvZiBhICE9PSAnc3RyaW5nJyB8fAogICAgICAgICAgICAgICAgL1wuYmFiX2VsZW1lbnRpZC4kLy50ZXN0KGEpID09PSBmYWxzZQogICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKfSkoKTsK"},{"name":"nobab2.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAyMS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0OwogICAgaWYgKCBzY3JpcHQgPT09IG51bGwgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc3JjID0gc2NyaXB0LnNyYzsKICAgIGlmICggdHlwZW9mIHNyYyAhPT0gJ3N0cmluZycgKSB7IHJldHVybjsgfQogICAgLy8gVGhlIHNjcmlwbGV0IGlzIG1lYW50IHRvIGFjdCBPTkxZIHdoZW4gaXQncyBiZWluZyB1c2VkIGFzIGEgcmVkaXJlY3Rpb24KICAgIC8vIGZvciBzcGVjaWZpYyBkb21haW5zLgogICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKAogICAgICAgICdeaHR0cHM/Oi8vW1xcdy1dK1xcLignICsKICAgICAgICBbCiAgICAgICAgICAgICdhZGNsaXh4XFwubmV0JywKICAgICAgICAgICAgJ2FkbmV0YXNpYVxcLmNvbScsCiAgICAgICAgICAgICdhZHRyYWNrZXJzXFwubmV0JywKICAgICAgICAgICAgJ2Jhbm5lcnRyYWNrXFwubmV0JywKICAgICAgICBdLmpvaW4oJ3wnKSArCiAgICAgICAgJykvLicKICAgICk7CiAgICBpZiAoIHJlLnRlc3Qoc3JjKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgd2luZG93Lm5IN2VYek9zRyA9IDg1ODsKfSkoKTsK"},{"name":"noeval.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBsb2cgPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpOwogICAgd2luZG93LmV2YWwgPSBuZXcgUHJveHkod2luZG93LmV2YWwsIHsgICAgICAgICAgLy8ganNoaW50IGlnbm9yZTogbGluZQogICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpIHsKICAgICAgICAgICAgbG9nKGBEb2N1bWVudCB0cmllZCB0byBldmFsLi4uICR7YXJnc1swXX1cbmApOwogICAgICAgIH0KICAgIH0pOwp9KSgpOwo="},{"name":"noeval-silent.js","aliases":["silent-noeval.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuZXZhbCA9IG5ldyBQcm94eSh3aW5kb3cuZXZhbCwgeyAgICAgICAgICAvLyBqc2hpbnQgaWdub3JlOiBsaW5lCiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKCkgewogICAgICAgIH0KICAgIH0pOwp9KSgpOwo="},{"name":"nofab.js","aliases":["fuckadblock.js-3.2.0"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBjb25zdCBGYWIgPSBmdW5jdGlvbigpIHt9OwogICAgRmFiLnByb3RvdHlwZS5jaGVjayA9IG5vb3BmbjsKICAgIEZhYi5wcm90b3R5cGUuY2xlYXJFdmVudCA9IG5vb3BmbjsKICAgIEZhYi5wcm90b3R5cGUuZW1pdEV2ZW50ID0gbm9vcGZuOwogICAgRmFiLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICBpZiAoICFhICkgeyBiKCk7IH0KICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CiAgICBGYWIucHJvdG90eXBlLm9uRGV0ZWN0ZWQgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CiAgICBGYWIucHJvdG90eXBlLm9uTm90RGV0ZWN0ZWQgPSBmdW5jdGlvbihhKSB7CiAgICAgICAgYSgpOwogICAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICAgIEZhYi5wcm90b3R5cGUuc2V0T3B0aW9uID0gbm9vcGZuOwogICAgRmFiLnByb3RvdHlwZS5vcHRpb25zID0gewogICAgICAgIHNldDogbm9vcGZuLAogICAgICAgIGdldDogbm9vcGZuLAogICAgfTsKICAgIGNvbnN0IGZhYiA9IG5ldyBGYWIoKTsKICAgIGNvbnN0IGdldFNldEZhYiA9IHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gRmFiOyB9LAogICAgICAgIHNldDogZnVuY3Rpb24oKSB7fQogICAgfTsKICAgIGNvbnN0IGdldHNldGZhYiA9IHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFiOyB9LAogICAgICAgIHNldDogZnVuY3Rpb24oKSB7fQogICAgfTsKICAgIGlmICggd2luZG93Lmhhc093blByb3BlcnR5KCdGdWNrQWRCbG9jaycpICkgeyB3aW5kb3cuRnVja0FkQmxvY2sgPSBGYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnRnVja0FkQmxvY2snLCBnZXRTZXRGYWIpOyB9CiAgICBpZiAoIHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnQmxvY2tBZEJsb2NrJykgKSB7IHdpbmRvdy5CbG9ja0FkQmxvY2sgPSBGYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnQmxvY2tBZEJsb2NrJywgZ2V0U2V0RmFiKTsgfQogICAgaWYgKCB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ1NuaWZmQWRCbG9jaycpICkgeyB3aW5kb3cuU25pZmZBZEJsb2NrID0gRmFiOyB9CiAgICBlbHNlIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NuaWZmQWRCbG9jaycsIGdldFNldEZhYik7IH0KICAgIGlmICggd2luZG93Lmhhc093blByb3BlcnR5KCdmdWNrQWRCbG9jaycpICkgeyB3aW5kb3cuZnVja0FkQmxvY2sgPSBmYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnZnVja0FkQmxvY2snLCBnZXRzZXRmYWIpOyB9CiAgICBpZiAoIHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnYmxvY2tBZEJsb2NrJykgKSB7IHdpbmRvdy5ibG9ja0FkQmxvY2sgPSBmYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnYmxvY2tBZEJsb2NrJywgZ2V0c2V0ZmFiKTsgfQogICAgaWYgKCB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ3NuaWZmQWRCbG9jaycpICkgeyB3aW5kb3cuc25pZmZBZEJsb2NrID0gZmFiOyB9CiAgICBlbHNlIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3NuaWZmQWRCbG9jaycsIGdldHNldGZhYik7IH0KfSkoKTsK"},{"name":"noop-0.1s.mp3","aliases":["noopmp3-0.1s","abp-resource:blank-mp3"],"kind":{"mime":"audio/mp3"},"content":"SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU2LjQwLjEwMQAAAAAAAAAAAAAA//tUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAGAAADAABgYGBgYGBgYGBgYGBgYGBggICAgICAgICAgICAgICAgICgoKCgoKCgoKCgoKCgoKCgwMDAwMDAwMDAwMDAwMDAwMDg4ODg4ODg4ODg4ODg4ODg4P////////////////////8AAAAATGF2YzU2LjYwAAAAAAAAAAAAAAAAJAAAAAAAAAAAAwDNZKlY//sUZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZB4P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZDwP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZFoP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZHgP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZJYP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{"name":"noop-0.5s.mp3","aliases":[],"kind":{"mime":"audio/mp3"},"content":"SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAWAAAJAAAgICAgKioqKio1NTU1QEBAQEBKSkpKVVVVVVVgYGBgampqamp1dXV1gICAgICKioqKlZWVlZWgoKCgoKqqqqq1tbW1tcDAwMDKysrKytXV1dXg4ODg4Orq6ur19fX19f////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAMAAAAAAAAACQDI0dkC//sUZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZB4P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZDwP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZFoP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZHgP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZJYP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZLQP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZNIP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{"name":"noop-1s.mp4","aliases":["noopmp4-1s"],"kind":{"mime":"video/mp4"},"content":"AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAAGF21kYXTeBAAAbGliZmFhYyAxLjI4AABCAJMgBDIARwAAArEGBf//rdxF6b3m2Ui3lizYINkj7u94MjY0IC0gY29yZSAxNDIgcjIgOTU2YzhkOCAtIEguMjY0L01QRUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMTQgLSBodHRwOi8vd3d3LnZpZGVvbGFuLm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0wIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5hbHlzZT0weDE6MHgxMTEgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhlZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTAgY3FtPTAgZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MCB3ZWlnaHRwPTAga2V5aW50PTI1MCBrZXlpbnRfbWluPTI1IHNjZW5lY3V0PTQwIGludHJhX3JlZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAuNjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCB2YnZfbWF4cmF0ZT03NjggdmJ2X2J1ZnNpemU9MzAwMCBjcmZfbWF4PTAuMCBuYWxfaHJkPW5vbmUgZmlsbGVyPTAgaXBfcmF0aW89MS40MCBhcT0xOjEuMDAAgAAAAFZliIQL8mKAAKvMnJycnJycnJycnXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXiEASZACGQAjgCEASZACGQAjgAAAAAdBmjgX4GSAIQBJkAIZACOAAAAAB0GaVAX4GSAhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGagC/AySEASZACGQAjgAAAAAZBmqAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZrAL8DJIQBJkAIZACOAAAAABkGa4C/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmwAvwMkhAEmQAhkAI4AAAAAGQZsgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGbQC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm2AvwMkhAEmQAhkAI4AAAAAGQZuAL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGboC/AySEASZACGQAjgAAAAAZBm8AvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZvgL8DJIQBJkAIZACOAAAAABkGaAC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmiAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpAL8DJIQBJkAIZACOAAAAABkGaYC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmoAvwMkhAEmQAhkAI4AAAAAGQZqgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGawC/AySEASZACGQAjgAAAAAZBmuAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZsAL8DJIQBJkAIZACOAAAAABkGbIC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm0AvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZtgL8DJIQBJkAIZACOAAAAABkGbgCvAySEASZACGQAjgCEASZACGQAjgAAAAAZBm6AnwMkhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AAAAhubW9vdgAAAGxtdmhkAAAAAAAAAAAAAAAAAAAD6AAABDcAAQAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAzB0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAABAAAAAAAAA+kAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAALAAAACQAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAPpAAAAAAABAAAAAAKobWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAB1MAAAdU5VxAAAAAAALWhkbHIAAAAAAAAAAHZpZGUAAAAAAAAAAAAAAABWaWRlb0hhbmRsZXIAAAACU21pbmYAAAAUdm1oZAAAAAEAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAAhNzdGJsAAAAr3N0c2QAAAAAAAAAAQAAAJ9hdmMxAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAALAAkABIAAAASAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGP//AAAALWF2Y0MBQsAN/+EAFWdCwA3ZAsTsBEAAAPpAADqYA8UKkgEABWjLg8sgAAAAHHV1aWRraEDyXyRPxbo5pRvPAyPzAAAAAAAAABhzdHRzAAAAAAAAAAEAAAAeAAAD6QAAABRzdHNzAAAAAAAAAAEAAAABAAAAHHN0c2MAAAAAAAAAAQAAAAEAAAABAAAAAQAAAIxzdHN6AAAAAAAAAAAAAAAeAAADDwAAAAsAAAALAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAAiHN0Y28AAAAAAAAAHgAAAEYAAANnAAADewAAA5gAAAO0AAADxwAAA+MAAAP2AAAEEgAABCUAAARBAAAEXQAABHAAAASMAAAEnwAABLsAAATOAAAE6gAABQYAAAUZAAAFNQAABUgAAAVkAAAFdwAABZMAAAWmAAAFwgAABd4AAAXxAAAGDQAABGh0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAACAAAAAAAABDcAAAAAAAAAAAAAAAEBAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAQkAAADcAABAAAAAAPgbWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAC7gAAAykBVxAAAAAAALWhkbHIAAAAAAAAAAHNvdW4AAAAAAAAAAAAAAABTb3VuZEhhbmRsZXIAAAADi21pbmYAAAAQc21oZAAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAADT3N0YmwAAABnc3RzZAAAAAAAAAABAAAAV21wNGEAAAAAAAAAAQAAAAAAAAAAAAIAEAAAAAC7gAAAAAAAM2VzZHMAAAAAA4CAgCIAAgAEgICAFEAVBbjYAAu4AAAADcoFgICAAhGQBoCAgAECAAAAIHN0dHMAAAAAAAAAAgAAADIAAAQAAAAAAQAAAkAAAAFUc3RzYwAAAAAAAAAbAAAAAQAAAAEAAAABAAAAAgAAAAIAAAABAAAAAwAAAAEAAAABAAAABAAAAAIAAAABAAAABgAAAAEAAAABAAAABwAAAAIAAAABAAAACAAAAAEAAAABAAAACQAAAAIAAAABAAAACgAAAAEAAAABAAAACwAAAAIAAAABAAAADQAAAAEAAAABAAAADgAAAAIAAAABAAAADwAAAAEAAAABAAAAEAAAAAIAAAABAAAAEQAAAAEAAAABAAAAEgAAAAIAAAABAAAAFAAAAAEAAAABAAAAFQAAAAIAAAABAAAAFgAAAAEAAAABAAAAFwAAAAIAAAABAAAAGAAAAAEAAAABAAAAGQAAAAIAAAABAAAAGgAAAAEAAAABAAAAGwAAAAIAAAABAAAAHQAAAAEAAAABAAAAHgAAAAIAAAABAAAAHwAAAAQAAAABAAAA4HN0c3oAAAAAAAAAAAAAADMAAAAaAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAACMc3RjbwAAAAAAAAAfAAAALAAAA1UAAANyAAADhgAAA6IAAAO+AAAD0QAAA+0AAAQAAAAEHAAABC8AAARLAAAEZwAABHoAAASWAAAEqQAABMUAAATYAAAE9AAABRAAAAUjAAAFPwAABVIAAAVuAAAFgQAABZ0AAAWwAAAFzAAABegAAAX7AAAGFwAAAGJ1ZHRhAAAAWm1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAALWlsc3QAAAAlqXRvbwAAAB1kYXRhAAAAAQAAAABMYXZmNTUuMzMuMTAw"},{"name":"noop.css","aliases":[],"kind":{"mime":"text/css"},"content":"LyogKi8K"},{"name":"noop.html","aliases":["noopframe"],"kind":{"mime":"text/html"},"content":"PCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+PHRpdGxlPjwvdGl0bGU+PC9oZWFkPgogICAgPGJvZHk+PC9ib2R5Pgo8L2h0bWw+Cg=="},{"name":"noop.js","aliases":["noopjs","abp-resource:blank-js"],"kind":{"mime":"application/javascript"},"content":"KGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwp9KSgpOwo="},{"name":"noop.txt","aliases":["nooptext"],"kind":{"mime":"text/plain"},"content":"Cg=="},{"name":"noop-vmap1.0.xml","aliases":["noopvmap-1.0"],"kind":{"mime":"text/xml"},"content":"PHZtYXA6Vk1BUCB4bWxuczp2bWFwPSJodHRwOi8vd3d3LmlhYi5uZXQvdmlkZW9zdWl0ZS92bWFwIiB2ZXJzaW9uPSIxLjAiPjwvdm1hcDpWTUFQPgo="},{"name":"outbrain-widget.js","aliases":["widgets.outbrain.com/outbrain.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBjb25zdCBvYnIgPSB7fTsKICAgIGNvbnN0IG1ldGhvZHMgPSBbCiAgICAgICAgJ2NhbGxDbGljaycsCiAgICAgICAgJ2NhbGxMb2FkTW9yZScsCiAgICAgICAgJ2NhbGxSZWNzJywKICAgICAgICAnY2FsbFVzZXJaYXBwaW5nJywKICAgICAgICAnY2FsbFdoYXRJcycsCiAgICAgICAgJ2NhbmNlbFJlY29tbWVuZGF0aW9uJywKICAgICAgICAnY2FuY2VsUmVjcycsCiAgICAgICAgJ2Nsb3NlQ2FyZCcsCiAgICAgICAgJ2Nsb3NlTW9kYWwnLAogICAgICAgICdjbG9zZVRieCcsCiAgICAgICAgJ2Vycm9ySW5qZWN0aW9uSGFuZGxlcicsCiAgICAgICAgJ2dldENvdW50T2ZSZWNzJywKICAgICAgICAnZ2V0U3RhdCcsCiAgICAgICAgJ2ltYWdlRXJyb3InLAogICAgICAgICdtYW51YWxWaWRlb0NsaWNrZWQnLAogICAgICAgICdvbk9kYlJldHVybicsCiAgICAgICAgJ29uVmlkZW9DbGljaycsCiAgICAgICAgJ3BhZ2VyTG9hZCcsCiAgICAgICAgJ3JlY0NsaWNrZWQnLAogICAgICAgICdyZWZyZXNoU3BlY2lmaWNXaWRnZXQnLAogICAgICAgICdyZW5kZXJTcGFXaWRnZXRzJywKICAgICAgICAncmVmcmVzaFdpZGdldCcsCiAgICAgICAgJ3JlbG9hZFdpZGdldCcsCiAgICAgICAgJ3Jlc2VhcmNoV2lkZ2V0JywKICAgICAgICAncmV0dXJuZWRFcnJvcicsCiAgICAgICAgJ3JldHVybmVkSHRtbERhdGEnLAogICAgICAgICdyZXR1cm5lZElyZERhdGEnLAogICAgICAgICdyZXR1cm5lZEpzb25EYXRhJywKICAgICAgICAnc2Nyb2xsTG9hZCcsCiAgICAgICAgJ3Nob3dEZXNjcmlwdGlvbicsCiAgICAgICAgJ3Nob3dSZWNJbklmcmFtZScsCiAgICAgICAgJ3VzZXJaYXBwaW5nTWVzc2FnZScsCiAgICAgICAgJ3phcHBpbmdGb3JtQWN0aW9uJwogICAgXTsKICAgIG9ici5leHRlcm4gPSB7CiAgICAgICAgdmlkZW86IHsKICAgICAgICAgICAgZ2V0VmlkZW9SZWNzOiBub29wZm4sCiAgICAgICAgICAgIHZpZGVvQ2xpY2tlZDogbm9vcGZuCiAgICAgICAgfQogICAgfTsKICAgIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihhKSB7CiAgICAgICAgb2JyLmV4dGVyblthXSA9IG5vb3BmbjsKICAgIH0pOwogICAgd2luZG93Lk9CUiA9IHdpbmRvdy5PQlIgfHwgb2JyOwp9KSgpOwo="},{"name":"popads.js","aliases":["popads.net.js","prevent-popads-net.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBtYWdpYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoRGF0ZS5ub3coKSAlIDI2ICsgOTcpICsKICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOTgyNDUxNjUzICsgOTgyNDUxNjUzKS50b1N0cmluZygzNik7CiAgICBjb25zdCBvZSA9IHdpbmRvdy5vbmVycm9yOwogICAgd2luZG93Lm9uZXJyb3IgPSBmdW5jdGlvbihtc2csIHNyYywgbGluZSwgY29sLCBlcnJvcikgewogICAgICAgIGlmICggdHlwZW9mIG1zZyA9PT0gJ3N0cmluZycgJiYgbXNnLmluZGV4T2YobWFnaWMpICE9PSAtMSApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICBpZiAoIG9lIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIHJldHVybiBvZShtc2csIHNyYywgbGluZSwgY29sLCBlcnJvcik7CiAgICAgICAgfQogICAgfS5iaW5kKCk7CiAgICBjb25zdCB0aHJvd01hZ2ljID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihtYWdpYyk7IH07CiAgICBkZWxldGUgd2luZG93LlBvcEFkczsKICAgIGRlbGV0ZSB3aW5kb3cucG9wbnM7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3aW5kb3csIHsKICAgICAgICBQb3BBZHM6IHsgc2V0OiB0aHJvd01hZ2ljIH0sCiAgICAgICAgcG9wbnM6IHsgc2V0OiB0aHJvd01hZ2ljIH0KICAgIH0pOwp9KSgpOwo="},{"name":"popads-dummy.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBkZWxldGUgd2luZG93LlBvcEFkczsKICAgIGRlbGV0ZSB3aW5kb3cucG9wbnM7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3aW5kb3csIHsKICAgICAgICBQb3BBZHM6IHsgdmFsdWU6IHt9IH0sCiAgICAgICAgcG9wbnM6IHsgdmFsdWU6IHt9IH0KICAgIH0pOwp9KSgpOwo="},{"name":"prebid-ads.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAyMi1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuY2FuUnVuQWRzID0gdHJ1ZTsKICAgIHdpbmRvdy5pc0FkQmxvY2tBY3RpdmUgPSBmYWxzZTsKfSkoKTsK"},{"name":"scorecardresearch_beacon.js","aliases":["scorecardresearch.com/beacon.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuQ09NU0NPUkUgPSB7CiAgICAgICAgcHVyZ2U6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB3aW5kb3cuX2NvbXNjb3JlID0gW107CiAgICAgICAgfSwKICAgICAgICBiZWFjb246IGZ1bmN0aW9uKCkgewogICAgICAgIH0KICAgIH07Cn0pKCk7Cg=="},{"name":"async-sugarcoat-04394153a7ce417b88e3fe1790a4e6a269bfebe5.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"e2NvbnN0IGE9e307KGU9PnsidXNlIHN0cmljdCI7Y29uc3QgdD1TeW1ib2woImRlZmVycmVkSGFuZGxlIiksbj1TeW1ib2woIm9ubG9hZHN0YXJ0IiksaT1TeW1ib2woIm9ucHJvZ3Jlc3MiKSxyPVN5bWJvbCgib25hYm9ydCIpLGE9U3ltYm9sKCJvbmVycm9yIiksbz1TeW1ib2woIm9ubG9hZCIpLHM9U3ltYm9sKCJvbnRpbWVvdXQiKSxnPVN5bWJvbCgib25sb2FkZW5kIiksbD1TeW1ib2woIm9ucmVhZHlzdGF0ZWNoYW5nZSIpLGQ9U3ltYm9sKCJyZWFkeVN0YXRlIiksdT1TeW1ib2woInRpbWVvdXQiKSxjPVN5bWJvbCgid2l0aENyZWRlbnRpYWxzIikscD1TeW1ib2woInVwbG9hZCIpLGg9U3ltYm9sKCJyZXNwb25zZVR5cGUiKSx2PShlLG4pPT57dmFyIHQ9bi5kZXNjcmlwdGlvbi5zdWJzdHJpbmcoMik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITEsdmFsdWU6bnVsbCx3cml0YWJsZTohMH0pLGUuYWRkRXZlbnRMaXN0ZW5lcih0LGZ1bmN0aW9uKGUpe2NvbnN0IHQ9dGhpc1tuXTt0JiZ0LmNhbGwodGhpcyxlKX0pfSxrPShlLHQpPT57ZVtkXT10LGUuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoInJlYWR5c3RhdGVjaGFuZ2UiKSl9O2xldCBNPSEwO2NsYXNzIG0gZXh0ZW5kcyBFdmVudFRhcmdldHtjb25zdHJ1Y3Rvcigpe2lmKHN1cGVyKCksISh0aGlzIGluc3RhbmNlb2YgZnx8dGhpcyBpbnN0YW5jZW9mIHkpKXRocm93IG5ldyBUeXBlRXJyb3IoIklsbGVnYWwgY29uc3RydWN0b3IiKTt2KHRoaXMsbiksdih0aGlzLGkpLHYodGhpcyxyKSx2KHRoaXMsYSksdih0aGlzLG8pLHYodGhpcyxzKSx2KHRoaXMsZyl9Z2V0IG9ubG9hZHN0YXJ0KCl7cmV0dXJuIHRoaXNbbl19c2V0IG9ubG9hZHN0YXJ0KGUpe3RoaXNbbl09ZX1nZXQgb25wcm9ncmVzcygpe3JldHVybiB0aGlzW2ldfXNldCBvbnByb2dyZXNzKGUpe3RoaXNbaV09ZX1nZXQgb25hYm9ydCgpe3JldHVybiB0aGlzW3JdfXNldCBvbmFib3J0KGUpe3RoaXNbcl09ZX1nZXQgb25lcnJvcigpe3JldHVybiB0aGlzW2FdfXNldCBvbmVycm9yKGUpe3RoaXNbYV09ZX1nZXQgb250aW1lb3V0KCl7cmV0dXJuIHRoaXNbc119c2V0IG9udGltZW91dChlKXt0aGlzW3NdPWV9Z2V0IG9ubG9hZGVuZCgpe3JldHVybiB0aGlzW2ddfXNldCBvbmxvYWRlbmQoZSl7dGhpc1tnXT1lfX1lLlhNTEh0dHBSZXF1ZXN0RXZlbnRUYXJnZXQ9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOm0sd3JpdGFibGU6ITB9O2NsYXNzIHkgZXh0ZW5kcyBte2NvbnN0cnVjdG9yKCl7aWYoTSl0aHJvdyBuZXcgVHlwZUVycm9yKCJJbGxlZ2FsIGNvbnN0cnVjdG9yIik7c3VwZXIoKX19ZS5YTUxIdHRwUmVxdWVzdFVwbG9hZD17Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6eSx3cml0YWJsZTohMH07Y2xhc3MgZiBleHRlbmRzIG17Y29uc3RydWN0b3IoKXtzdXBlcigpLE09ITE7dmFyIGU9bmV3IHk7TT0hMCxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyx0LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMSx2YWx1ZTpudWxsLHdyaXRhYmxlOiEwfSksdih0aGlzLGwpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLGQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiExLHZhbHVlOjAsd3JpdGFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyx1LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMSx2YWx1ZTowLHdyaXRhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsYyx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITEsdmFsdWU6ITEsd3JpdGFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxwLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMSx2YWx1ZTplLHdyaXRhYmxlOiExfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsaCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITEsdmFsdWU6IiIsd3JpdGFibGU6ITB9KX1nZXQgb25yZWFkeXN0YXRlY2hhbmdlKCl7cmV0dXJuIHRoaXNbbF19c2V0IG9ucmVhZHlzdGF0ZWNoYW5nZShlKXt0aGlzW2xdPWV9Z2V0IHJlYWR5U3RhdGUoKXtyZXR1cm4gdGhpc1tkXX1vcGVuKGUsdCl7c3dpdGNoKHRoaXNbZF0pe2Nhc2UgMDpjYXNlIDQ6ayh0aGlzLDEpfX1zZXRSZXF1ZXN0SGVhZGVyKGUsdCl7fXNldFRydXN0VG9rZW4oZSl7fWdldCB0aW1lb3V0KCl7cmV0dXJuIHRoaXNbdV19c2V0IHRpbWVvdXQoZSl7dGhpc1t1XT1lfWdldCB3aXRoQ3JlZGVudGlhbHMoKXtyZXR1cm4gdGhpc1tjXX1zZXQgd2l0aENyZWRlbnRpYWxzKGUpe3N3aXRjaCh0aGlzW2RdKXtjYXNlIDA6Y2FzZSAxOmJyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiRmFpbGVkIHRvIHNldCB0aGUgJ3dpdGhDcmVkZW50aWFscycgcHJvcGVydHkgb24gJ1hNTEh0dHBSZXF1ZXN0JzogVGhlIHZhbHVlIG1heSBvbmx5IGJlIHNldCBpZiB0aGUgb2JqZWN0J3Mgc3RhdGUgaXMgVU5TRU5UIG9yIE9QRU5FRC4iKX10aGlzW2NdPSEhZX1nZXQgdXBsb2FkKCl7cmV0dXJuIHRoaXNbcF19c2VuZCgpe2lmKDEhPT10aGlzW2RdfHxudWxsIT09dGhpc1t0XSl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJGYWlsZWQgdG8gZXhlY3V0ZSAnc2VuZCcgb24gJ1hNTEh0dHBSZXF1ZXN0JzogVGhlIG9iamVjdCdzIHN0YXRlIG11c3QgYmUgT1BFTkVELiIpO3RoaXNbdF09c2V0VGltZW91dCgoKT0+e3RoaXNbdF09bnVsbCxrKHRoaXMsNCksdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBQcm9ncmVzc0V2ZW50KCJlcnJvciIpKSx0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFByb2dyZXNzRXZlbnQoImxvYWRlbmQiKSl9LDApfWFib3J0KCl7MT09PXRoaXNbZF0mJm51bGwhPT10aGlzW3RdJiYoY2xlYXJUaW1lb3V0KHRoaXNbdF0pLHRoaXNbdF09bnVsbCxrKHRoaXMsMCksdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBQcm9ncmVzc0V2ZW50KCJhYm9ydCIpKSx0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFByb2dyZXNzRXZlbnQoImxvYWRlbmQiKSkpfWdldCByZXNwb25zZVVSTCgpe3JldHVybiIifWdldCBzdGF0dXMoKXtyZXR1cm4gMH1nZXQgc3RhdHVzVGV4dCgpe3JldHVybiIifWdldFJlc3BvbnNlSGVhZGVyKGUpe3JldHVybiBudWxsfW92ZXJyaWRlTWltZVR5cGUoZSl7fWdldCByZXNwb25zZVR5cGUoKXtyZXR1cm4gdGhpc1toXX1zZXQgcmVzcG9uc2VUeXBlKGUpe2lmKDQ9PT10aGlzW2RdKXRocm93IG5ldyBET01FeGNlcHRpb24oIkZhaWxlZCB0byBzZXQgdGhlICdyZXNwb25zZVR5cGUnIHByb3BlcnR5IG9uICdYTUxIdHRwUmVxdWVzdCc6IFRoZSByZXNwb25zZSB0eXBlIGNhbm5vdCBiZSBzZXQgaWYgdGhlIG9iamVjdCdzIHN0YXRlIGlzIExPQURJTkcgb3IgRE9ORS4iKTtzd2l0Y2goZSl7Y2FzZSIiOmNhc2UiYXJyYXlidWZmZXIiOmNhc2UiYmxvYiI6Y2FzZSJkb2N1bWVudCI6Y2FzZSJqc29uIjpjYXNlInRleHQiOnRoaXNbaF09ZX19Z2V0IHJlc3BvbnNlKCl7dmFyIGU9dGhpc1toXTtyZXR1cm4iIj09PWV8fCJ0ZXh0Ij09PWU/IiI6bnVsbH1nZXQgcmVzcG9uc2VUZXh0KCl7dmFyIGU9dGhpc1toXTtpZigiIj09PWV8fCJ0ZXh0Ij09PWUpcmV0dXJuIiI7dGhyb3cgbmV3IERPTUV4Y2VwdGlvbigiRmFpbGVkIHRvIHJlYWQgdGhlICdyZXNwb25zZVRleHQnIHByb3BlcnR5IGZyb20gJ1hNTEh0dHBSZXF1ZXN0JzogVGhlIHZhbHVlIGlzIG9ubHkgYWNjZXNzaWJsZSBpZiB0aGUgb2JqZWN0J3MgJ3Jlc3BvbnNlVHlwZScgaXMgJycgb3IgJ3RleHQnICh3YXMgJ2FycmF5YnVmZmVyJykuIil9Z2V0IHJlc3BvbnNlWE1MKCl7cmV0dXJuIG51bGx9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCJVTlNFTlQiLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCx2YWx1ZTowfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIk9QRU5FRCIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLHZhbHVlOjF9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwiSEVBREVSU19SRUNFSVZFRCIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLHZhbHVlOjJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwiTE9BRElORyIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLHZhbHVlOjN9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwiRE9ORSIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLHZhbHVlOjR9KSxlLlhNTEh0dHBSZXF1ZXN0PXtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCx2YWx1ZTpmLHdyaXRhYmxlOiEwfX0pKGEpO2NvbnN0IGI9e307KGU9PnsidXNlIHN0cmljdCI7bGV0IHQ9ITE7Y2xhc3Mgbntjb25zdHJ1Y3Rvcigpe2lmKHQpdGhyb3cgbmV3IFR5cGVFcnJvcigiSWxsZWdhbCBjb25zdHJ1Y3RvciIpfWdldCBsZW5ndGgoKXtyZXR1cm4gT2JqZWN0LmtleXModGhpcykubGVuZ3RofWtleShlKXt2YXIgdD1PYmplY3Qua2V5cyh0aGlzKTtyZXR1cm4gZTwwfHxlPj10Lmxlbmd0aD9udWxsOnRbZV19Z2V0SXRlbShlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsZSk/dGhpc1tlXTpudWxsfXNldEl0ZW0oZSx0KXt0aGlzW2VdPVN0cmluZyh0KX1yZW1vdmVJdGVtKGUpe2RlbGV0ZSB0aGlzW2VdfWNsZWFyKCl7Zm9yKGNvbnN0IGUgb2YgT2JqZWN0LmtleXModGhpcykpZGVsZXRlIHRoaXNbZV19fWUuU3RvcmFnZT17Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6bix3cml0YWJsZTohMH07Y29uc3QgaT1uZXcgbjtlLmxvY2FsU3RvcmFnZT17Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0KCl7cmV0dXJuIGl9fTtjb25zdCByPW5ldyBuO2Uuc2Vzc2lvblN0b3JhZ2U9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldCgpe3JldHVybiByfX0sdD0hMH0pKGIpLE1hcmtldGluZy5iaW5kRGVwZW5kZW5jeUltbWVkaWF0ZShmdW5jdGlvbigpe3dpbmRvdy5NYXJrZXRpbmcsTWFya2V0aW5nLmVuc2lnaHRlbk9wdGlvbnM7dHJ5e01hcmtldGluZy5VRE8ucGVyZlRpbWluZ1N0YXJ0KCJydWxlSWQtIit0aGlzLmlkKyItZGVwbG95bWVudElkLSIrdGhpcy5kZXBsb3ltZW50SWQpLCJ0cnVlIj09ZGVsbF9tYXJrZXRpbmdfdXRpbC5nZXRQYXJhbWV0ZXJCeU5hbWUoIm1kZWJ1ZyIsbG9jYXRpb24uc2VhcmNoKSYmKGRlbGxfbWFya2V0aW5nX3V0aWwuZ2V0RHBpZD1mdW5jdGlvbigpe3JldHVybihuZXcgRGF0ZSkuZ2V0VGltZSgpfSxNYXJrZXRpbmcuZ0V2ZW50KCJEQy05NjMyNjQ1L3NhbGVzMC9jc2JfdGVzdCt0cmFuc2FjdGlvbnMiLCJwdXJjaGFzZSIpLGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoImlmcmFtZSIpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5zcmMuaW5jbHVkZXMoInR5cGU9c2FsZXMiKSYmZS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KE1hcmtldGluZyksIioiKX0pKSxNYXJrZXRpbmcuVURPLnBlcmZUaW1pbmdFbmQoInJ1bGVJZC0iK3RoaXMuaWQrIi1kZXBsb3ltZW50SWQtIit0aGlzLmRlcGxveW1lbnRJZCl9Y2F0Y2goZSl7ZGVsbF9tYXJrZXRpbmdfdXRpbC5kZWJ1ZyhlKX19LDM2MDAzMTEsWzM2MTc2ODJdLDYzNjE0MixbNjE5NDA0XSksTWFya2V0aW5nLmJpbmREZXBlbmRlbmN5RE9NUGFyc2VkKGZ1bmN0aW9uKCl7dmFyIG4sZSxpLHQscjt3aW5kb3cuTWFya2V0aW5nLE1hcmtldGluZy5lbnNpZ2h0ZW5PcHRpb25zO3RyeXtNYXJrZXRpbmcuVURPLnBlcmZUaW1pbmdTdGFydCgicnVsZUlkLSIrdGhpcy5pZCsiLWRlcGxveW1lbnRJZC0iK3RoaXMuZGVwbG95bWVudElkKSxuPXdpbmRvdyxlPWRvY3VtZW50LG5baT0idWV0cSJdPW5baV18fFtdLHQ9ZnVuY3Rpb24oKXt2YXIgZT17fS5jb25zdHJ1Y3Rvci5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LCJYTUxIdHRwUmVxdWVzdCIpLHQ9e30uY29uc3RydWN0b3IuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdywibG9jYWxTdG9yYWdlIik7dHJ5e3JldHVybiBlJiZ7fS5jb25zdHJ1Y3Rvci5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csIlhNTEh0dHBSZXF1ZXN0IixhLlhNTEh0dHBSZXF1ZXN0KSx0JiZ7fS5jb25zdHJ1Y3Rvci5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csImxvY2FsU3RvcmFnZSIsYi5sb2NhbFN0b3JhZ2UpLGZ1bmN0aW9uKCl7dmFyIGU9e3RpOiI1MTAyMjYxIn07ZS5xPW5baV0sbltpXT1uZXcgVUVUKGUpLG5baV0ucHVzaCgicGFnZUxvYWQiKX0uYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7ZSYme30uY29uc3RydWN0b3IuZGVmaW5lUHJvcGVydHkod2luZG93LCJYTUxIdHRwUmVxdWVzdCIsZSksdCYme30uY29uc3RydWN0b3IuZGVmaW5lUHJvcGVydHkod2luZG93LCJsb2NhbFN0b3JhZ2UiLHQpfX0sKHI9ZS5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKSkuc3JjPSIvL2JhdC5iaW5nLmNvbS9iYXQuanMiLHIuYXN5bmM9MSxyLm9ubG9hZD1yLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMucmVhZHlTdGF0ZTtlJiYibG9hZGVkIiE9PWUmJiJjb21wbGV0ZSIhPT1lfHwodCgpLHIub25sb2FkPXIub25yZWFkeXN0YXRlY2hhbmdlPW51bGwpfSwoZT1lLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXSkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocixlKSxNYXJrZXRpbmcuVURPLnBlcmZUaW1pbmdFbmQoInJ1bGVJZC0iK3RoaXMuaWQrIi1kZXBsb3ltZW50SWQtIit0aGlzLmRlcGxveW1lbnRJZCl9Y2F0Y2goZSl7ZGVsbF9tYXJrZXRpbmdfdXRpbC5kZWJ1ZyhlKX19LDM2MDUyNDIsWzM2MDYzMjldLDY5NTg3NCxbNjEwMzIzXSksTWFya2V0aW5nLmJpbmREZXBlbmRlbmN5RE9NUGFyc2VkKGZ1bmN0aW9uKCl7dmFyIGU7d2luZG93Lk1hcmtldGluZyxNYXJrZXRpbmcuZW5zaWdodGVuT3B0aW9uczt0cnl7TWFya2V0aW5nLlVETy5wZXJmVGltaW5nU3RhcnQoInJ1bGVJZC0iK3RoaXMuaWQrIi1kZXBsb3ltZW50SWQtIit0aGlzLmRlcGxveW1lbnRJZCksTWFya2V0aW5nLlVETy5wcmlvcmNvbnNlbnQmJigidXMiPT09KGU9TWFya2V0aW5nLnNjRGF0YU9iai5jb3VudHJ5KSYmTWFya2V0aW5nLmluc2VydFNjcmlwdCgiLy92dC5teXZpc3VhbGlxLm5ldC8yL1R4VVFOSFNLdkdXSWlNajFPaDN0ZnclM0QlM0QvdnQtMjg4LmpzIiksImNhIj09PWUmJk1hcmtldGluZy5pbnNlcnRTY3JpcHQoIi8vdnQubXl2aXN1YWxpcS5uZXQvMi9UeFVRTkhTS3ZHV0lpTWoxT2gzdGZ3JTNEJTNEL3Z0LTI4OS5qcyIpLCJiciI9PT1lJiZNYXJrZXRpbmcuaW5zZXJ0U2NyaXB0KCIvL3Z0Lm15dmlzdWFsaXEubmV0LzIvd1FRdFRpaXpsNFNpeHJoSVR5VHFiZyUzRCUzRC92dC0yODYuanMiKSwidWsiPT09ZSYmTWFya2V0aW5nLmluc2VydFNjcmlwdCgiLy92dC5teXZpc3VhbGlxLm5ldC8yL2FtaTdlV0Q3TWE5cWt1OUhERzIzMnclM0QlM0QvdnQtMjEzLmpzIiksImpwIj09PWUmJk1hcmtldGluZy5pbnNlcnRTY3JpcHQoIi8vdnQubXl2aXN1YWxpcS5uZXQvMi82JTJCeFQlMkJPM3oxemgxNHl1bEpCRE42ZyUzRCUzRC92dC0yODcuanMiKSwiYXUiPT09ZSYmTWFya2V0aW5nLmluc2VydFNjcmlwdCgiLy92dC5teXZpc3VhbGlxLm5ldC8yL2lwZWV5SGh0NG5wUUVpemlDV2FZenclM0QlM0QvdnQtMjk5LmpzIiksIm56Ij09PWUmJk1hcmtldGluZy5pbnNlcnRTY3JpcHQoIi8vdnQubXl2aXN1YWxpcS5uZXQvMi9pcGVleUhodDRucFFFaXppQ1dhWXp3JTNEJTNEL3Z0LTMwMS5qcyIpLCJpbiI9PT1lJiZNYXJrZXRpbmcuaW5zZXJ0U2NyaXB0KCIvL3Z0Lm15dmlzdWFsaXEubmV0LzIvdUJGJTJCbmRKVDduMHI5V3lzTkkxVnd3JTNEJTNEL3Z0LTI5OC5qcyIpLCJmciI9PT1lJiZNYXJrZXRpbmcuaW5zZXJ0U2NyaXB0KCIvL3Z0Lm15dmlzdWFsaXEubmV0LzIvR1hPZE4lMkJXdWdZM04zbjRhNUxBa05RJTNEJTNEL3Z0LTMwMC5qcyIpLCJkZSI9PT1lJiZNYXJrZXRpbmcuaW5zZXJ0U2NyaXB0KCIvL3Z0Lm15dmlzdWFsaXEubmV0LzIvdjlCSk9HY2dsNHdmam43cFhCaHVuQSUzRCUzRC92dC0zMDIuanMiKSksTWFya2V0aW5nLlVETy5wZXJmVGltaW5nRW5kKCJydWxlSWQtIit0aGlzLmlkKyItZGVwbG95bWVudElkLSIrdGhpcy5kZXBsb3ltZW50SWQpfWNhdGNoKGUpe2RlbGxfbWFya2V0aW5nX3V0aWwuZGVidWcoZSl9fSwzNTkzMzY1LFszNTA2OTI0LDM2MDYzMjldLDYyMTkxOSxbNjEwMzEwLDYxMDMyM10pLE1hcmtldGluZy5iaW5kRE9NUGFyc2VkKGZ1bmN0aW9uKCl7d2luZG93Lk1hcmtldGluZyxNYXJrZXRpbmcuZW5zaWdodGVuT3B0aW9uczt0cnl7TWFya2V0aW5nLlVETy5wZXJmVGltaW5nU3RhcnQoInJ1bGVJZC0iK3RoaXMuaWQrIi1kZXBsb3ltZW50SWQtIit0aGlzLmRlcGxveW1lbnRJZCksTWFya2V0aW5nLlVETy5wcmlvcmNvbnNlbnQmJk1hcmtldGluZy5pbWFnZVJlcXVlc3QoImh0dHBzOi8vcHguYWRzLmxpbmtlZGluLmNvbS9jb2xsZWN0Lz9waWQ9NzUxMyZmbXQ9Z2lmIiksTWFya2V0aW5nLlVETy5wZXJmVGltaW5nRW5kKCJydWxlSWQtIit0aGlzLmlkKyItZGVwbG95bWVudElkLSIrdGhpcy5kZXBsb3ltZW50SWQpfWNhdGNoKGUpe2RlbGxfbWFya2V0aW5nX3V0aWwuZGVidWcoZSl9fSwzNTkzMjg3LDYxOTA4OSksTWFya2V0aW5nLmJpbmREZXBlbmRlbmN5SW1tZWRpYXRlKGZ1bmN0aW9uKCl7dmFyIGkscixlO3dpbmRvdy5NYXJrZXRpbmcsTWFya2V0aW5nLmVuc2lnaHRlbk9wdGlvbnM7TWFya2V0aW5nLlVETy5mbF9sb2FkZWQ9ITEsTWFya2V0aW5nLlVETy5wcmlvcmNvbnNlbnQmJihNYXJrZXRpbmcubG9hZFNjcmlwdENhbGxiYWNrKCJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPURDLTk2MzI2NDUiLGZ1bmN0aW9uKCl7ZGVsbF9tYXJrZXRpbmdfdXRpbC5jdXN0b21fbWFya2V0aW5nX2V2ZW50KCJmbF9sb2FkZWQiKSxNYXJrZXRpbmcuVURPLmZsX2xvYWRlZD0hMH0pLHdpbmRvdy5kYXRhTGF5ZXI9d2luZG93LmRhdGFMYXllcnx8W10sd2luZG93Lmd0YWc9ZnVuY3Rpb24oKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpfSxndGFnKCJqcyIsbmV3IERhdGUpLGd0YWcoImNvbmZpZyIsIkRDLTk2MzI2NDUiKSxndGFnKCJjb25maWciLCJEQy05NjMyOTIxIiksZ3RhZygiY29uZmlnIiwiREMtOTYzMjY0OCIpLGk9ZnVuY3Rpb24oKXtyZXR1cm57YWxsb3dfY3VzdG9tX3NjcmlwdHM6ITAsdTE6TWFya2V0aW5nLlVETy5sYW5ndWFnZSx1MTA6TWFya2V0aW5nLlVETy5jc2VnLHUxMTpNYXJrZXRpbmcuVURPLmRlYWxzLHUxMjpNYXJrZXRpbmcuVURPLmRldmljZSx1MTM6TWFya2V0aW5nLlVETy5kaXNjb3VudCx1MTQ6TWFya2V0aW5nLlVETy5mYW1pbHksdTE1Ok1hcmtldGluZy5VRE8ub2dpZCx1MTY6TWFya2V0aW5nLlVETy5vcmRlcmNvZGUsdTE3Ok1hcmtldGluZy5VRE8ucGxhdGZvcm0sdTE4Ok1hcmtldGluZy5VRE8ucHJvZGNhdCx1MTk6TWFya2V0aW5nLlVETy5wcm9kdWN0LHUyOk1hcmtldGluZy5VRE8uc2VnbWVudCx1MjA6TWFya2V0aW5nLlVETy5wcm9tb2lkLHUyMTpNYXJrZXRpbmcuVURPLnR5cGUsdTIyOmRlbGxfbWFya2V0aW5nX3V0aWwuZ2V0UGFyYW1ldGVyQnlOYW1lKCJkZ2MiLGxvY2F0aW9uLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSksdTIzOk1hcmtldGluZy5VRE8uZ2FjZCx1MjQ6ZGVsbF9tYXJrZXRpbmdfdXRpbC5nZXRQYXJhbWV0ZXJCeU5hbWUoImxpZCIsbG9jYXRpb24udG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKSx1MjU6TWFya2V0aW5nLlVETy52ZW4xLHUyNjpNYXJrZXRpbmcuVURPLnZlbjIsdTI4OmRlbGxfbWFya2V0aW5nX3V0aWwuZ2V0UGFyYW1ldGVyQnlOYW1lKCJ0ZmNpZCIsbG9jYXRpb24udG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKSx1Mjk6TWFya2V0aW5nLlVETy5yZXZlbnVlLHUzOk1hcmtldGluZy5VRE8uY3VycmVuY3ksdTMwOk1hcmtldGluZy5VRE8udXNkcmV2LHUzNTpNYXJrZXRpbmcuVURPLmRwaWQsdTM2Ok1hcmtldGluZy5VRE8ubGFuZCx1Mzc6TWFya2V0aW5nLlVETy5zZXJpYWxwcm9kbGlzdCx1Mzg6TWFya2V0aW5nLlVETy5jamV2ZW50LHU0Ok1hcmtldGluZy5VRE8uY291bnRyeSx1NTpNYXJrZXRpbmcuVURPLmFjY291bnRpZCx1NjpNYXJrZXRpbmcuVURPLmNhdGVnb3J5LHU3Ok1hcmtldGluZy5VRE8uY2F0ZWdvcnlwYXRoLHU4Ok1hcmtldGluZy5VRE8uY2lkLHU5Ok1hcmtldGluZy5VRE8uY291cG9ufX0sTWFya2V0aW5nLlVETy5yZWFkRGF0YSgpLChyPWkoKSkudTMxPSIiLChlPWRlbGxfbWFya2V0aW5nX3V0aWwuZ2V0Q29va2llKCJBTUNWXzRERDgwODYxNTE1Q0FCOTkwQTQ5MEQ0NSU0MEFkb2JlT3JnIikpJiYoci51MzE9ZS5zcGxpdCgiTUNNSUR8IilbMV0uc3BsaXQoInwiKVswXSksTWFya2V0aW5nLmdFdmVudD1NYXJrZXRpbmcuZ0V2ZW50fHxmdW5jdGlvbih0LG4pe3ZhciBlO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJmbF9sb2FkZWQiLGZ1bmN0aW9uKCl7dmFyIGU9cjsicHVyY2hhc2UiPT09biYmKGUudmFsdWU9TWFya2V0aW5nLlVETy51c2RyZXZ8fE1hcmtldGluZy5VRE8ucmV2ZW51ZSxlLnRyYW5zYWN0aW9uX2lkPWRlbGxfbWFya2V0aW5nX3V0aWwuZ2V0RHBpZCgpKSxlLnNlbmRfdG89dCxndGFnKCJldmVudCIsbixlKX0pLE1hcmtldGluZy5VRE8uZmxfbG9hZGVkJiYoZT1yPWkoKSwicHVyY2hhc2UiPT09biYmKGUudmFsdWU9TWFya2V0aW5nLlVETy51c2RyZXZ8fE1hcmtldGluZy5VRE8ucmV2ZW51ZSxlLnRyYW5zYWN0aW9uX2lkPWRlbGxfbWFya2V0aW5nX3V0aWwuZ2V0RHBpZCgpKSxlLnNlbmRfdG89dCxndGFnKCJldmVudCIsbixlKSl9KX0sMzYxNzY4MixbMzYwNjMyOV0sNjE5NDA0LFs2MTAzMjNdKSxNYXJrZXRpbmcuYmluZERlcGVuZGVuY3lJbW1lZGlhdGUoZnVuY3Rpb24oKXt3aW5kb3cuTWFya2V0aW5nLE1hcmtldGluZy5lbnNpZ2h0ZW5PcHRpb25zO01hcmtldGluZy5VRE8uZ19kb3dubG9hZD1mdW5jdGlvbih0LG4pe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJodmUiLGZ1bmN0aW9uKGUpe01hcmtldGluZy5VRE8uaHZlb3ZlcmxheT0hMSwiZG93bmxvYWQiPT09ZS5kZXRhaWwudHlwZSYmTWFya2V0aW5nLmdFdmVudCh0LG4pfSksTWFya2V0aW5nLlVETy5odmVvdmVybGF5JiZNYXJrZXRpbmcuZ0V2ZW50KHQsbil9LE1hcmtldGluZy5VRE8uZ19zaGFyZT1mdW5jdGlvbih0LG4pe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJodmUiLGZ1bmN0aW9uKGUpeyJzaGFyZSI9PT1lLmRldGFpbC50eXBlJiZNYXJrZXRpbmcuZ0V2ZW50KHQsbil9KX0sTWFya2V0aW5nLlVETy5nX21wdj1mdW5jdGlvbihlLHQpezM9PXNlc3Npb25TdG9yYWdlLmVuc3BhZ2Vjb3VudEZMVCYmTWFya2V0aW5nLmdFdmVudChlLHQpfSxNYXJrZXRpbmcuVURPLmdfYmNfc3RhcnQ9ZnVuY3Rpb24obixpKXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIHZpZGVvanMmJnZpZGVvanMucGxheWVycylmb3IodmFyIGUgaW4gdmlkZW9qcy5wbGF5ZXJzKXZpZGVvanMucGxheWVyc1tlXS5yZWFkeShmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5lbF8uaGFzQXR0cmlidXRlKCJtdXRlZCIpfHxlLm9uKCJzdGFydCIsZnVuY3Rpb24oKXtlLnZpZGVvX3N0YXJ0fHwoZS52aWRlb181MF9wZXJjZW50PSExLGUudmlkZW9fODBfcGVyY2VudD0hMSxNYXJrZXRpbmcuZ0V2ZW50KG4saSkpfSl9KTtlbHNlIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJodmUiLGZ1bmN0aW9uIGUodCl7ImJyaWdodGNvdmUiPT09dC5kZXRhaWwudHlwZSYmKE1hcmtldGluZy5VRE8uZ19iY19zdGFydChuLGkpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJodmUiLGUpKX0pfSxNYXJrZXRpbmcuVURPLmdfYmNfNTA9ZnVuY3Rpb24odCxuKXt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigiYnJpZ2h0Y292ZTUwIixmdW5jdGlvbihlKXtNYXJrZXRpbmcuZ0V2ZW50KHQsbil9KX0sTWFya2V0aW5nLlVETy5nX2JjXzgwPWZ1bmN0aW9uKHQsbil7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImJyaWdodGNvdmU4MCIsZnVuY3Rpb24oZSl7TWFya2V0aW5nLmdFdmVudCh0LG4pfSl9LE1hcmtldGluZy5VRE8uZ19iY19lbmQ9ZnVuY3Rpb24obixpKXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIHZpZGVvanMmJnZpZGVvanMucGxheWVycylmb3IodmFyIGUgaW4gdmlkZW9qcy5wbGF5ZXJzKXZpZGVvanMucGxheWVyc1tlXS5yZWFkeShmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5lbF8uaGFzQXR0cmlidXRlKCJtdXRlZCIpfHxlLm9uKCJlbmRlZCIsZnVuY3Rpb24oKXtNYXJrZXRpbmcuZ0V2ZW50KG4saSksZS52aWRlb19zdGFydD0hMX0pfSk7ZWxzZSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigiaHZlIixmdW5jdGlvbiBlKHQpeyJicmlnaHRjb3ZlIj09PXQuZGV0YWlsLnR5cGUmJihNYXJrZXRpbmcuVURPLmdfYmNfZW5kKG4saSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoImh2ZSIsZSkpfSl9LE1hcmtldGluZy5VRE8uZ19jb250YWN0dXM9ZnVuY3Rpb24odCxuKXt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigiaHZlIixmdW5jdGlvbihlKXsiY29udGFjdHVzIj09PWUuZGV0YWlsLnR5cGUmJk1hcmtldGluZy5nRXZlbnQodCxuKX0pfSxNYXJrZXRpbmcuVURPLmdfY2hhdD1mdW5jdGlvbih0LG4pe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJodmUiLGZ1bmN0aW9uKGUpeyJjaGF0Ij09PWUuZGV0YWlsLnR5cGUmJk1hcmtldGluZy5nRXZlbnQodCxuKX0pfSxNYXJrZXRpbmcuVURPLmdfYWRkdG9jYXJ0PWZ1bmN0aW9uKGUsdCl7ImNvbnRlbnRzIiE9PWRlbGxfbWFya2V0aW5nX3V0aWwuZ2V0c2NNYXAoIndhY29udHJvbGxlciIpJiYiY2FydCIhPT1kZWxsX21hcmtldGluZ191dGlsLmdldHNjTWFwKCJ3b3JrZmxvd3N0ZXAiKXx8TWFya2V0aW5nLmdFdmVudChlLHQpfSxNYXJrZXRpbmcuVURPLmdfY2hlY2tvdXQ9ZnVuY3Rpb24oZSx0KXsiY29uZmlybWF0aW9uIj09PWRlbGxfbWFya2V0aW5nX3V0aWwuZ2V0c2NNYXAoIndhY29udHJvbGxlciIpJiZNYXJrZXRpbmcuZ0V2ZW50KGUsdCl9LE1hcmtldGluZy5VRE8uZ19wb2RjYXN0X2xpc3Rlbj1mdW5jdGlvbih0LG4pe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJodmUiLGZ1bmN0aW9uKGUpeyJwb2RjYXN0X2xpc3RlbiI9PT1lLmRldGFpbC50eXBlJiZNYXJrZXRpbmcuZ0V2ZW50KHQsbil9KX0sTWFya2V0aW5nLlVETy5nX3BvZGNhc3Rfc3Vic2NyaWJlPWZ1bmN0aW9uKHQsbil7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImh2ZSIsZnVuY3Rpb24oZSl7InBvZGNhc3Rfc3Vic2NyaWJlIj09PWUuZGV0YWlsLnR5cGUmJk1hcmtldGluZy5nRXZlbnQodCxuKX0pfSxNYXJrZXRpbmcuVURPLmdfcmZxX3N1Ym1pdD1mdW5jdGlvbih0LG4pe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJodmUiLGZ1bmN0aW9uKGUpeyJyZnFfc3VibWl0Ij09PWUuZGV0YWlsLnR5cGUmJk1hcmtldGluZy5nRXZlbnQodCxuKX0pfSxNYXJrZXRpbmcuVURPLmdfaW9uX3N1Ym1pdD1mdW5jdGlvbihlLHQpey9saXZlYmFsbC4qY29tcGxldGVkL2dpLnRlc3QoZGVsbF9tYXJrZXRpbmdfdXRpbC5nZXRzY01hcCgicGFnZW5hbWUiKSkmJk1hcmtldGluZy5nRXZlbnQoZSx0KX0sTWFya2V0aW5nLlVETy5nX2dhdGVkX3N1Ym1pdD1mdW5jdGlvbih0LG4pe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJodmUiLGZ1bmN0aW9uKGUpeyJnYXRlZF9zdWJtaXQiPT09ZS5kZXRhaWwudHlwZSYmTWFya2V0aW5nLmdFdmVudCh0LG4pfSl9fSwzNDc1MTkzLFszNjE3NjgyXSw2MjA4MTgsWzYxOTQwNF0pfQo="},{"name":"async-sugarcoat-8a459c41783885dc83d30f5b7da2359091f4e607.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"brave-disable-pageview-api.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIGJyYXZlLWRpc2FibGUtcGFnZXZpZXctYXBpLmpzCi8vIEJhc2VkIG9uOiBodHRwczovL2FkZG9ucy5tb3ppbGxhLm9yZy9maXJlZm94L2FkZG9uL2Rpc2FibGUtcGFnZS12aXNpYmlsaXR5LwovLyBMaWNlbnNlOiAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ic2QtbGljZW5zZS5waHAKLy8gRnJvbTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ3dhcnNlci8zYjQ3YjYxODYzYmZmY2ZlYmU0NDk4Yzc3YjIzMDFjZAooZnVuY3Rpb24oKXsKLy8gdmlzaWJpbGl0eWNoYW5nZSBldmVudHMgYXJlIGNhcHR1cmVkIGFuZCBzdG9wcGVkIApkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJ2aXNpYmlsaXR5Y2hhbmdlIiwgZnVuY3Rpb24oZSkgewogICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKfSwgdHJ1ZSk7Ci8vIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSBhbHdheXMgcmV0dXJucyBmYWxzZQpPYmplY3QuZGVmaW5lUHJvcGVydHkoRG9jdW1lbnQucHJvdG90eXBlLCAiaGlkZGVuIiwgewogICAgZ2V0OiBmdW5jdGlvbiBoaWRkZW4oKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUKfSk7Ci8vIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSBhbHdheXMgcmV0dXJucyAidmlzaWJsZSIKT2JqZWN0LmRlZmluZVByb3BlcnR5KERvY3VtZW50LnByb3RvdHlwZSwgInZpc2liaWxpdHlTdGF0ZSIsIHsKICAgIGdldDogZnVuY3Rpb24gdmlzaWJpbGl0eVN0YXRlKCkgewogICAgICAgIHJldHVybiAidmlzaWJsZSI7CiAgICB9LAogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQp9KTsKfSkoKQo="},{"name":"brave-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIGJyYXZlLWZpeC5qcwovLy8gYWxpYXMgYmYuanMKZGVsZXRlIE5hdmlnYXRvci5wcm90b3R5cGUuYnJhdmUKZGVsZXRlIHdpbmRvdy5uYXZpZ2F0b3IuYnJhdmUK"},{"name":"brave-video-bg-play.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIGJyYXZlLXZpZGVvLWJnLXBsYXkuanMKLy8gQmFzZWQgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3ZpZGVvLWJnLXBsYXkKLy8gTGljZW5zZTogIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3ZpZGVvLWJnLXBsYXkvYmxvYi9tYXN0ZXIvTElDRU5TRSAoTUlUKQovLyBGcm9tOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9nd2Fyc2VyLzNiNDdiNjE4NjNiZmZjZmViZTQ0OThjNzdiMjMwMWNkCihmdW5jdGlvbigpewpjb25zdCBJU19ZT1VUVUJFID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnNlYXJjaCgvKD86XnwuK1wuKXlvdXR1YmUuY29tLykgPiAtMSB8fAogICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnNlYXJjaCgvKD86XnwuK1wuKXlvdXR1YmUtbm9jb29raWUuY29tLykgPiAtMTsKY29uc3QgSVNfTU9CSUxFX1lPVVRVQkUgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT0gJ20ueW91dHViZS5jb20nOwpjb25zdCBJU19ERVNLVE9QX1lPVVRVQkUgPSBJU19ZT1VUVUJFICYmICFJU19NT0JJTEVfWU9VVFVCRTsKY29uc3QgSVNfVklNRU8gPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUuc2VhcmNoKC8oPzpefC4rXC4pdmltZW8uY29tLykgPiAtMTsKY29uc3QgSVNfQU5EUk9JRCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0FuZHJvaWQnKSA+IC0xOwovLyBQYWdlIFZpc2liaWxpdHkgQVBJCmlmIChJU19BTkRST0lEIHx8ICFJU19ERVNLVE9QX1lPVVRVQkUpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhkb2N1bWVudCwKICAgIHsgJ2hpZGRlbic6IHt2YWx1ZTogZmFsc2V9LCAndmlzaWJpbGl0eVN0YXRlJzoge3ZhbHVlOiAndmlzaWJsZSd9IH0pOwp9CndpbmRvdy5hZGRFdmVudExpc3RlbmVyKAogICd2aXNpYmlsaXR5Y2hhbmdlJywgZXZ0ID0+IGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSwgdHJ1ZSk7Ci8vIEZ1bGxzY3JlZW4gQVBJCmlmIChJU19WSU1FTykgewogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKAogICAgJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBldnQgPT4gZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCB0cnVlKTsKfQovLyBVc2VyIGFjdGl2aXR5IHRyYWNraW5nCmlmIChJU19ZT1VUVUJFKSB7CiAgY29uc3QgcmVmcmVzaEludGVydmFsID0gNSAqIDYwICogMTAwMDsgLy8gZXZlcnkgNSBtaW51dGVzCiAgd2FpdEZvcllvdXR1YmVMYWN0SW5pdCgoKSA9PiByZWZyZXNoTGFjdCgpLCByZWZyZXNoSW50ZXJ2YWwpOwp9CmZ1bmN0aW9uIHdhaXRGb3JZb3V0dWJlTGFjdEluaXQoYUNhbGxiYWNrLCBhQ2FsbGJhY2tJbnRlcnZhbCwgYURlbGF5ID0gMTAwMCkgewogIGxldCBwYWdlV2luID0gd2luZG93OwogIGlmIChwYWdlV2luLmhhc093blByb3BlcnR5KCdfbGFjdCcpKSB7CiAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoYUNhbGxiYWNrLCBhQ2FsbGJhY2tJbnRlcnZhbCk7CiAgfSBlbHNlIHsKICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHdhaXRGb3JZb3V0dWJlTGFjdEluaXQoYUNhbGxiYWNrLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ2FsbGJhY2tJbnRlcnZhbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYURlbGF5ICogMiksCiAgICAgICAgICAgICAgICAgICAgICBhRGVsYXkpOwogIH0KfQpmdW5jdGlvbiByZWZyZXNoTGFjdCgpIHsKICB3aW5kb3cuX2xhY3QgPSBEYXRlLm5vdygpOwp9Cn0pKCkK"},{"name":"brave-youtube-navigation-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"KF8gPT4gewogIGNvbnN0IG9yaWdQZXJmTm93ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdzsKICBsZXQgcHJldmlvdXMgPSAwOwoKICB3aW5kb3cucGVyZm9ybWFuY2Uubm93ID0gZnVuY3Rpb24gKCkgewogICAgbGV0IGN1cnJlbnQgPSBvcmlnUGVyZk5vdy5hcHBseSh0aGlzKTsKICAgIGlmIChjdXJyZW50IDw9IHByZXZpb3VzKSB7CiAgICAgIGN1cnJlbnQgPSBwcmV2aW91cyArIE51bWJlci5FUFNJTE9OICogMTAwMDAwOwogICAgfQoKICAgIHJldHVybiBwcmV2aW91cyA9IGN1cnJlbnQ7CiAgfQp9KSgpOwo="},{"name":"brave-youtube-theater-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"KGFzeW5jIF8gPT4gewogIGlmIChzZWxmLmNvb2tpZVN0b3JlID09PSB1bmRlZmluZWQpIHsKICAgIC8vIERvIG5vdGhpbmcgb24gaU9TLiBUaGUgcHJvYmxlbSBkb2Vzbid0IGV4aXN0IHRoZXJlLCBhbmQgdGhlCiAgICAvLyBzb2x1dGlvbiB3b3VsZG4ndCB3b3JrIGFueXdheQogICAgcmV0dXJuCiAgfQogIGNvbnN0IHN0b3JlS2V5ID0gJ2JyYXZlOjp3aWRlJwogIGNvbnN0IGNvb2tpZUtleSA9ICd3aWRlJwoKICBjb25zdCB3aWRlQ29va2llID0gYXdhaXQgY29va2llU3RvcmUuZ2V0KGNvb2tpZUtleSkKICBjb25zdCB3aWRlQ29va2llQmFja3VwID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oc3RvcmVLZXkpCgogIC8vIFNldCB0aGUgY29va2llIGZyb20gbG9jYWxTdG9yYWdlIGlmZjogCiAgLy8gMSkgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0LgogIC8vIDIpIHdlIGhhdmUgYSBiYWNrdXAgaW4gbG9jYWxTdG9yYWdlLgogIGlmICghd2lkZUNvb2tpZSAmJiB3aWRlQ29va2llQmFja3VwKSB7CiAgICAvLyBUaGUgY29va2llIG9iamVjdCBpcyBzdG9yZWQgYXMgYSBzdHJpbmcuIFBhcnNlIGl0LgogICAgY29uc3QgY29va2llT2JqID0gSlNPTi5wYXJzZSh3aWRlQ29va2llQmFja3VwKQogICAgYXdhaXQgY29va2llU3RvcmUuc2V0KGNvb2tpZU9iaikKICAgIC8vIFJlZnJlc2ggdGhlIHBhZ2UgdG8gbWFrZSBZVCB1c2UgdGhlIG5ldyBjb29raWUuCiAgICBsb2NhdGlvbi5yZWxvYWQoKQogIH0KCiAgLy8gUGVyc2lzdCB0aGUgY29va2llIHZhbHVlIHRvIGxvY2FsU3RvcmFnZSBldmVyeSBzZWNvbmQuCiAgc2V0SW50ZXJ2YWwoYXN5bmMgXyA9PiB7CiAgICB0cnkgewogICAgICBjb25zdCB3aWRlQ29va2llID0gYXdhaXQgY29va2llU3RvcmUuZ2V0KGNvb2tpZUtleSkKICAgICAgLy8gV2UgaGF2ZSB0byBzdHJpbmdpZnkgdGhlIGNvb2tpZSBvYmplY3QgdG8gc3RvcmUgaXQgaW4gbG9jYWxTdG9yYWdlLgogICAgICBpZiAod2lkZUNvb2tpZSkgewogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHN0b3JlS2V5LCBKU09OLnN0cmluZ2lmeSh3aWRlQ29va2llKSkKICAgICAgfSBlbHNlIHsKICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShzdG9yZUtleSkKICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAvLyBzd2FsbG93IGVycm9yIGZyb20gbm8gY29va2llIGV4aXN0aW5nCiAgICB9CiAgfSwgMTAwMCkKfSkoKTsK"},{"name":"de-amp.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"KGZ1bmN0aW9uICgpIHsKICBpZiAodHlwZW9mIGRlQW1wRW5hYmxlZCAhPT0gJ3VuZGVmaW5lZCcgJiYgZGVBbXBFbmFibGVkKSB7CiAgICBjb25zdCBhdHRyID0gJ2pzYWN0aW9uJwogICAgY29uc3Qgc2VsZWN0b3IgPSBgYVtkYXRhLWFtcC10aXRsZV1bJHthdHRyfV1gCiAgICBsZXQgdGltZXIKICAgIGNvbnN0IGlkbGVDYWxsYmFjayA9IChfID0+IHsKICAgICAgaWYgKHNlbGYucmVxdWVzdElkbGVDYWxsYmFjaykgewogICAgICAgIHJldHVybiAoY2FsbGJhY2ssIHRpbWVvdXQpID0+IHsKICAgICAgICAgIHJldHVybiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2soY2FsbGJhY2ssIHsgdGltZW91dCB9KQogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dCB3aGVuIHJlcXVlc3RJZGxlQ2FsbGJhY2sgZG9lc24ndCBleGlzdC4KICAgICAgcmV0dXJuIChjYWxsYmFjaykgPT4gewogICAgICAgIHJldHVybiBzZWxmLnNldFRpbWVvdXQoY2FsbGJhY2ssIDApCiAgICAgIH0KICAgIH0pKCkKICAgIGNvbnN0IHJtYXR0ciA9ICgpID0+IHsKICAgICAgdGltZXIgPSB1bmRlZmluZWQKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpCiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7CiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyKQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXgpIHsgfQogICAgfQogICAgY29uc3QgbXV0YXRpb25IYW5kbGVyID0gKG11dGF0aW9ucykgPT4gewogICAgICBpZiAodGltZXIgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIGxldCBza2lwID0gdHJ1ZQogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG11dGF0aW9ucy5sZW5ndGggJiYgc2tpcDsgaSsrKSB7CiAgICAgICAgY29uc3QgeyB0eXBlLCBhZGRlZE5vZGVzLCByZW1vdmVkTm9kZXMgfSA9IG11dGF0aW9uc1tpXQogICAgICAgIGlmICh0eXBlID09PSAnYXR0cmlidXRlcycpIHsKICAgICAgICAgIHNraXAgPSBmYWxzZQogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFkZGVkTm9kZXMubGVuZ3RoICYmIHNraXA7IGorKykgewogICAgICAgICAgaWYgKGFkZGVkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIHsKICAgICAgICAgICAgc2tpcCA9IGZhbHNlCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVtb3ZlZE5vZGVzLmxlbmd0aCAmJiBza2lwOyBqKyspIHsKICAgICAgICAgIGlmIChyZW1vdmVkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIHsKICAgICAgICAgICAgc2tpcCA9IGZhbHNlCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChza2lwKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIHRpbWVyID0gaWRsZUNhbGxiYWNrKHJtYXR0ciwgMTcpCiAgICB9CgogICAgY29uc3Qgc3RhcnQgPSAoKSA9PiB7CiAgICAgIHJtYXR0cigpCiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobXV0YXRpb25IYW5kbGVyKQogICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7CiAgICAgICAgYXR0cmlidXRlczogdHJ1ZSwKICAgICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFthdHRyXSwKICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgICAgc3VidHJlZTogdHJ1ZQogICAgICB9KQogICAgfQoKICAgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHN0YXJ0LCB7IG9uY2U6IHRydWUgfSkKICB9Cn0pKCk7Cg=="},{"name":"touch-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8gUmVtb3ZlIHRvdWNoIGNoZWNrcyBvbiBzZWxlY3RlZCBtb2JpbGUgc2l0ZXMKZGVsZXRlIERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVUb3VjaApkZWxldGUgRG9jdW1lbnQucHJvdG90eXBlLm9udG91Y2hzdGFydApkZWxldGUgRG9jdW1lbnQucHJvdG90eXBlLm9udG91Y2hlbmQKZGVsZXRlIERvY3VtZW50LnByb3RvdHlwZS5vbnRvdWNoY2FuY2VsCmRlbGV0ZSBEb2N1bWVudC5wcm90b3R5cGUuVG91Y2hFdmVudAo="},{"name":"abort-current-script.js","aliases":["acs.js","abort-current-inline-script.js","acis.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"abort-on-property-read.js","aliases":["aopr.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQpmdW5jdGlvbiBnZXRFeGNlcHRpb25Ub2tlbigpIHsKICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgY29uc3QgdG9rZW4gPQogICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoRGF0ZS5ub3coKSAlIDI2ICsgOTcpICsKICAgICAgICBzYWZlLk1hdGhfZmxvb3Ioc2FmZS5NYXRoX3JhbmRvbSgpICogOTgyNDUxNjUzICsgOTgyNDUxNjUzKS50b1N0cmluZygzNik7CiAgICBjb25zdCBvZSA9IHNlbGYub25lcnJvcjsKICAgIHNlbGYub25lcnJvciA9IGZ1bmN0aW9uKG1zZywgLi4uYXJncykgewogICAgICAgIGlmICggdHlwZW9mIG1zZyA9PT0gJ3N0cmluZycgJiYgbXNnLmluY2x1ZGVzKHRva2VuKSApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICBpZiAoIG9lIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIHJldHVybiBvZS5jYWxsKHRoaXMsIG1zZywgLi4uYXJncyk7CiAgICAgICAgfQogICAgfS5iaW5kKCk7CiAgICByZXR1cm4gdG9rZW47Cn0KCiAgKGZ1bmN0aW9uIGFib3J0T25Qcm9wZXJ0eVJlYWQoCiAgICBjaGFpbiA9ICcnCikgewogICAgaWYgKCB0eXBlb2YgY2hhaW4gIT09ICdzdHJpbmcnICkgeyByZXR1cm47IH0KICAgIGlmICggY2hhaW4gPT09ICcnICkgeyByZXR1cm47IH0KICAgIGNvbnN0IGV4Y2VwdGlvblRva2VuID0gZ2V0RXhjZXB0aW9uVG9rZW4oKTsKICAgIGNvbnN0IGFib3J0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKGV4Y2VwdGlvblRva2VuKTsKICAgIH07CiAgICBjb25zdCBtYWtlUHJveHkgPSBmdW5jdGlvbihvd25lciwgY2hhaW4pIHsKICAgICAgICBjb25zdCBwb3MgPSBjaGFpbi5pbmRleE9mKCcuJyk7CiAgICAgICAgaWYgKCBwb3MgPT09IC0xICkgewogICAgICAgICAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvd25lciwgY2hhaW4pOwogICAgICAgICAgICBpZiAoICFkZXNjIHx8IGRlc2MuZ2V0ICE9PSBhYm9ydCApIHsKICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvd25lciwgY2hhaW4sIHsKICAgICAgICAgICAgICAgICAgICBnZXQ6IGFib3J0LAogICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oKXt9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGNvbnN0IHByb3AgPSBjaGFpbi5zbGljZSgwLCBwb3MpOwogICAgICAgIGxldCB2ID0gb3duZXJbcHJvcF07CiAgICAgICAgY2hhaW4gPSBjaGFpbi5zbGljZShwb3MgKyAxKTsKICAgICAgICBpZiAoIHYgKSB7CiAgICAgICAgICAgIG1ha2VQcm94eSh2LCBjaGFpbik7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob3duZXIsIHByb3ApOwogICAgICAgIGlmICggZGVzYyAmJiBkZXNjLnNldCAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3duZXIsIHByb3AsIHsKICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHY7IH0sCiAgICAgICAgICAgIHNldDogZnVuY3Rpb24oYSkgewogICAgICAgICAgICAgICAgdiA9IGE7CiAgICAgICAgICAgICAgICBpZiAoIGEgaW5zdGFuY2VvZiBPYmplY3QgKSB7CiAgICAgICAgICAgICAgICAgICAgbWFrZVByb3h5KGEsIGNoYWluKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IG93bmVyID0gd2luZG93OwogICAgbWFrZVByb3h5KG93bmVyLCBjaGFpbik7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"abort-on-property-write.js","aliases":["aopw.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQpmdW5jdGlvbiBnZXRFeGNlcHRpb25Ub2tlbigpIHsKICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgY29uc3QgdG9rZW4gPQogICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoRGF0ZS5ub3coKSAlIDI2ICsgOTcpICsKICAgICAgICBzYWZlLk1hdGhfZmxvb3Ioc2FmZS5NYXRoX3JhbmRvbSgpICogOTgyNDUxNjUzICsgOTgyNDUxNjUzKS50b1N0cmluZygzNik7CiAgICBjb25zdCBvZSA9IHNlbGYub25lcnJvcjsKICAgIHNlbGYub25lcnJvciA9IGZ1bmN0aW9uKG1zZywgLi4uYXJncykgewogICAgICAgIGlmICggdHlwZW9mIG1zZyA9PT0gJ3N0cmluZycgJiYgbXNnLmluY2x1ZGVzKHRva2VuKSApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICBpZiAoIG9lIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIHJldHVybiBvZS5jYWxsKHRoaXMsIG1zZywgLi4uYXJncyk7CiAgICAgICAgfQogICAgfS5iaW5kKCk7CiAgICByZXR1cm4gdG9rZW47Cn0KCiAgKGZ1bmN0aW9uIGFib3J0T25Qcm9wZXJ0eVdyaXRlKAogICAgcHJvcCA9ICcnCikgewogICAgaWYgKCB0eXBlb2YgcHJvcCAhPT0gJ3N0cmluZycgKSB7IHJldHVybjsgfQogICAgaWYgKCBwcm9wID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBleGNlcHRpb25Ub2tlbiA9IGdldEV4Y2VwdGlvblRva2VuKCk7CiAgICBsZXQgb3duZXIgPSB3aW5kb3c7CiAgICBmb3IgKDs7KSB7CiAgICAgICAgY29uc3QgcG9zID0gcHJvcC5pbmRleE9mKCcuJyk7CiAgICAgICAgaWYgKCBwb3MgPT09IC0xICkgeyBicmVhazsgfQogICAgICAgIG93bmVyID0gb3duZXJbcHJvcC5zbGljZSgwLCBwb3MpXTsKICAgICAgICBpZiAoIG93bmVyIGluc3RhbmNlb2YgT2JqZWN0ID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICAgICAgcHJvcCA9IHByb3Auc2xpY2UocG9zICsgMSk7CiAgICB9CiAgICBkZWxldGUgb3duZXJbcHJvcF07CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3duZXIsIHByb3AsIHsKICAgICAgICBzZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoZXhjZXB0aW9uVG9rZW4pOwogICAgICAgIH0KICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"abort-on-stack-trace.js","aliases":["aost.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"addEventListener-defuser.js","aliases":["aeld.js","prevent-addEventListener.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"json-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"json-prune-fetch-response.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"json-prune-xhr-response.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"evaldata-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"adjust-setInterval.js","aliases":["nano-setInterval-booster.js","nano-sib.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gYWRqdXN0U2V0SW50ZXJ2YWwoCiAgICBuZWVkbGVBcmcgPSAnJywKICAgIGRlbGF5QXJnID0gJycsCiAgICBib29zdEFyZyA9ICcnCikgewogICAgaWYgKCB0eXBlb2YgbmVlZGxlQXJnICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IHJlTmVlZGxlID0gc2FmZS5wYXR0ZXJuVG9SZWdleChuZWVkbGVBcmcpOwogICAgbGV0IGRlbGF5ID0gZGVsYXlBcmcgIT09ICcqJyA/IHBhcnNlSW50KGRlbGF5QXJnLCAxMCkgOiAtMTsKICAgIGlmICggaXNOYU4oZGVsYXkpIHx8IGlzRmluaXRlKGRlbGF5KSA9PT0gZmFsc2UgKSB7IGRlbGF5ID0gMTAwMDsgfQogICAgbGV0IGJvb3N0ID0gcGFyc2VGbG9hdChib29zdEFyZyk7CiAgICBib29zdCA9IGlzTmFOKGJvb3N0KSA9PT0gZmFsc2UgJiYgaXNGaW5pdGUoYm9vc3QpCiAgICAgICAgPyBNYXRoLm1pbihNYXRoLm1heChib29zdCwgMC4wMDEpLCA1MCkKICAgICAgICA6IDAuMDU7CiAgICBzZWxmLnNldEludGVydmFsID0gbmV3IFByb3h5KHNlbGYuc2V0SW50ZXJ2YWwsIHsKICAgICAgICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7CiAgICAgICAgICAgIGNvbnN0IFsgYSwgYiBdID0gYXJnczsKICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgKGRlbGF5ID09PSAtMSB8fCBiID09PSBkZWxheSkgJiYKICAgICAgICAgICAgICAgIHJlTmVlZGxlLnRlc3QoYS50b1N0cmluZygpKQogICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgIGFyZ3NbMV0gPSBiICogYm9vc3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTsKICAgICAgICB9CiAgICB9KTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"adjust-setTimeout.js","aliases":["nano-setTimeout-booster.js","nano-stb.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gYWRqdXN0U2V0VGltZW91dCgKICAgIG5lZWRsZUFyZyA9ICcnLAogICAgZGVsYXlBcmcgPSAnJywKICAgIGJvb3N0QXJnID0gJycKKSB7CiAgICBpZiAoIHR5cGVvZiBuZWVkbGVBcmcgIT09ICdzdHJpbmcnICkgeyByZXR1cm47IH0KICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgY29uc3QgcmVOZWVkbGUgPSBzYWZlLnBhdHRlcm5Ub1JlZ2V4KG5lZWRsZUFyZyk7CiAgICBsZXQgZGVsYXkgPSBkZWxheUFyZyAhPT0gJyonID8gcGFyc2VJbnQoZGVsYXlBcmcsIDEwKSA6IC0xOwogICAgaWYgKCBpc05hTihkZWxheSkgfHwgaXNGaW5pdGUoZGVsYXkpID09PSBmYWxzZSApIHsgZGVsYXkgPSAxMDAwOyB9CiAgICBsZXQgYm9vc3QgPSBwYXJzZUZsb2F0KGJvb3N0QXJnKTsKICAgIGJvb3N0ID0gaXNOYU4oYm9vc3QpID09PSBmYWxzZSAmJiBpc0Zpbml0ZShib29zdCkKICAgICAgICA/IE1hdGgubWluKE1hdGgubWF4KGJvb3N0LCAwLjAwMSksIDUwKQogICAgICAgIDogMC4wNTsKICAgIHNlbGYuc2V0VGltZW91dCA9IG5ldyBQcm94eShzZWxmLnNldFRpbWVvdXQsIHsKICAgICAgICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7CiAgICAgICAgICAgIGNvbnN0IFsgYSwgYiBdID0gYXJnczsKICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgKGRlbGF5ID09PSAtMSB8fCBiID09PSBkZWxheSkgJiYKICAgICAgICAgICAgICAgIHJlTmVlZGxlLnRlc3QoYS50b1N0cmluZygpKQogICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgIGFyZ3NbMV0gPSBiICogYm9vc3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTsKICAgICAgICB9CiAgICB9KTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"noeval-if.js","aliases":["prevent-eval-if.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gbm9FdmFsSWYoCiAgICBuZWVkbGUgPSAnJwopIHsKICAgIGlmICggdHlwZW9mIG5lZWRsZSAhPT0gJ3N0cmluZycgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc2FmZSA9IHNhZmVTZWxmKCk7CiAgICBjb25zdCByZU5lZWRsZSA9IHNhZmUucGF0dGVyblRvUmVnZXgobmVlZGxlKTsKICAgIHdpbmRvdy5ldmFsID0gbmV3IFByb3h5KHdpbmRvdy5ldmFsLCB7ICAvLyBqc2hpbnQgaWdub3JlOiBsaW5lCiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJncykgewogICAgICAgICAgICBjb25zdCBhID0gYXJnc1swXTsKICAgICAgICAgICAgaWYgKCByZU5lZWRsZS50ZXN0KGEudG9TdHJpbmcoKSkgKSB7IHJldHVybjsgfQogICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpOwogICAgICAgIH0KICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"no-fetch-if.js","aliases":["prevent-fetch.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gbm9GZXRjaElmKAogICAgYXJnMSA9ICcnLAopIHsKICAgIGlmICggdHlwZW9mIGFyZzEgIT09ICdzdHJpbmcnICkgeyByZXR1cm47IH0KICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgY29uc3QgbmVlZGxlcyA9IFtdOwogICAgZm9yICggY29uc3QgY29uZGl0aW9uIG9mIGFyZzEuc3BsaXQoL1xzKy8pICkgewogICAgICAgIGlmICggY29uZGl0aW9uID09PSAnJyApIHsgY29udGludWU7IH0KICAgICAgICBjb25zdCBwb3MgPSBjb25kaXRpb24uaW5kZXhPZignOicpOwogICAgICAgIGxldCBrZXksIHZhbHVlOwogICAgICAgIGlmICggcG9zICE9PSAtMSApIHsKICAgICAgICAgICAga2V5ID0gY29uZGl0aW9uLnNsaWNlKDAsIHBvcyk7CiAgICAgICAgICAgIHZhbHVlID0gY29uZGl0aW9uLnNsaWNlKHBvcyArIDEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGtleSA9ICd1cmwnOwogICAgICAgICAgICB2YWx1ZSA9IGNvbmRpdGlvbjsKICAgICAgICB9CiAgICAgICAgbmVlZGxlcy5wdXNoKHsga2V5LCByZTogc2FmZS5wYXR0ZXJuVG9SZWdleCh2YWx1ZSkgfSk7CiAgICB9CiAgICBjb25zdCBsb2cgPSBuZWVkbGVzLmxlbmd0aCA9PT0gMCA/IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSkgOiB1bmRlZmluZWQ7CiAgICBzZWxmLmZldGNoID0gbmV3IFByb3h5KHNlbGYuZmV0Y2gsIHsKICAgICAgICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7CiAgICAgICAgICAgIGxldCBwcm9jZWVkID0gdHJ1ZTsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGxldCBkZXRhaWxzOwogICAgICAgICAgICAgICAgaWYgKCBhcmdzWzBdIGluc3RhbmNlb2Ygc2VsZi5SZXF1ZXN0ICkgewogICAgICAgICAgICAgICAgICAgIGRldGFpbHMgPSBhcmdzWzBdOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBkZXRhaWxzID0gT2JqZWN0LmFzc2lnbih7IHVybDogYXJnc1swXSB9LCBhcmdzWzFdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzID0gbmV3IE1hcCgpOwogICAgICAgICAgICAgICAgZm9yICggY29uc3QgcHJvcCBpbiBkZXRhaWxzICkgewogICAgICAgICAgICAgICAgICAgIGxldCB2ID0gZGV0YWlsc1twcm9wXTsKICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiB2ICE9PSAnc3RyaW5nJyApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgdiA9IEpTT04uc3RyaW5naWZ5KHYpOyB9CiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoKGV4KSB7IH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgdiAhPT0gJ3N0cmluZycgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgICAgICAgICAgcHJvcHMuc2V0KHByb3AsIHYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBsb2cgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBvdXQgPSBBcnJheS5mcm9tKHByb3BzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChhID0+IGAke2FbMF19OiR7YVsxXX1gKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyAnKTsKICAgICAgICAgICAgICAgICAgICBsb2coYHVCTzogZmV0Y2goJHtvdXR9KWApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcHJvY2VlZCA9IG5lZWRsZXMubGVuZ3RoID09PSAwOwogICAgICAgICAgICAgICAgZm9yICggY29uc3QgeyBrZXksIHJlIH0gb2YgbmVlZGxlcyApIHsKICAgICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmhhcyhrZXkpID09PSBmYWxzZSB8fAogICAgICAgICAgICAgICAgICAgICAgICByZS50ZXN0KHByb3BzLmdldChrZXkpKSA9PT0gZmFsc2UKICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaChleCkgewogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwcm9jZWVkCiAgICAgICAgICAgICAgICA/IFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKQogICAgICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUobmV3IFJlc3BvbnNlKCkpOwogICAgICAgIH0KICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"prevent-refresh.js","aliases":["refresh-defuser.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQpmdW5jdGlvbiBydW5BdChmbiwgd2hlbikgewogICAgY29uc3QgaW50RnJvbVJlYWR5U3RhdGUgPSBzdGF0ZSA9PiB7CiAgICAgICAgY29uc3QgdGFyZ2V0cyA9IHsKICAgICAgICAgICAgJ2xvYWRpbmcnOiAxLAogICAgICAgICAgICAnaW50ZXJhY3RpdmUnOiAyLCAnZW5kJzogMiwgJzInOiAyLAogICAgICAgICAgICAnY29tcGxldGUnOiAzLCAnaWRsZSc6IDMsICczJzogMywKICAgICAgICB9OwogICAgICAgIGNvbnN0IHRva2VucyA9IEFycmF5LmlzQXJyYXkoc3RhdGUpID8gc3RhdGUgOiBbIHN0YXRlIF07CiAgICAgICAgZm9yICggY29uc3QgdG9rZW4gb2YgdG9rZW5zICkgewogICAgICAgICAgICBjb25zdCBwcm9wID0gYCR7dG9rZW59YDsKICAgICAgICAgICAgaWYgKCB0YXJnZXRzLmhhc093blByb3BlcnR5KHByb3ApID09PSBmYWxzZSApIHsgY29udGludWU7IH0KICAgICAgICAgICAgcmV0dXJuIHRhcmdldHNbcHJvcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiAwOwogICAgfTsKICAgIGNvbnN0IHJ1bkF0ID0gaW50RnJvbVJlYWR5U3RhdGUod2hlbik7CiAgICBpZiAoIGludEZyb21SZWFkeVN0YXRlKGRvY3VtZW50LnJlYWR5U3RhdGUpID49IHJ1bkF0ICkgewogICAgICAgIGZuKCk7IHJldHVybjsKICAgIH0KICAgIGNvbnN0IG9uU3RhdGVDaGFuZ2UgPSAoICkgPT4gewogICAgICAgIGlmICggaW50RnJvbVJlYWR5U3RhdGUoZG9jdW1lbnQucmVhZHlTdGF0ZSkgPCBydW5BdCApIHsgcmV0dXJuOyB9CiAgICAgICAgZm4oKTsKICAgICAgICBzYWZlLnJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkoZG9jdW1lbnQsIGFyZ3MpOwogICAgfTsKICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgY29uc3QgYXJncyA9IFsgJ3JlYWR5c3RhdGVjaGFuZ2UnLCBvblN0YXRlQ2hhbmdlLCB7IGNhcHR1cmU6IHRydWUgfSBdOwogICAgc2FmZS5hZGRFdmVudExpc3RlbmVyLmFwcGx5KGRvY3VtZW50LCBhcmdzKTsKfQoKICAoZnVuY3Rpb24gcHJldmVudFJlZnJlc2goCiAgICBhcmcxID0gJycKKSB7CiAgICBpZiAoIHR5cGVvZiBhcmcxICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBkZWZ1c2UgPSAoICkgPT4gewogICAgICAgIGNvbnN0IG1ldGEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW2h0dHAtZXF1aXY9InJlZnJlc2giIGldW2NvbnRlbnRdJyk7CiAgICAgICAgaWYgKCBtZXRhID09PSBudWxsICkgeyByZXR1cm47IH0KICAgICAgICBjb25zdCBzID0gYXJnMSA9PT0gJycKICAgICAgICAgICAgPyBtZXRhLmdldEF0dHJpYnV0ZSgnY29udGVudCcpCiAgICAgICAgICAgIDogYXJnMTsKICAgICAgICBjb25zdCBtcyA9IE1hdGgubWF4KHBhcnNlRmxvYXQocykgfHwgMCwgMCkgKiAxMDAwOwogICAgICAgIHNldFRpbWVvdXQoKCApID0+IHsgd2luZG93LnN0b3AoKTsgfSwgbXMpOwogICAgfTsKICAgIHJ1bkF0KCggKSA9PiB7CiAgICAgICAgZGVmdXNlKCk7CiAgICB9LCAnaW50ZXJhY3RpdmUnKTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"remove-attr.js","aliases":["ra.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"remove-class.js","aliases":["rc.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-requestAnimationFrame-if.js","aliases":["norafif.js","prevent-requestAnimationFrame.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gbm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZigKICAgIG5lZWRsZSA9ICcnCikgewogICAgaWYgKCB0eXBlb2YgbmVlZGxlICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IG5lZWRsZU5vdCA9IG5lZWRsZS5jaGFyQXQoMCkgPT09ICchJzsKICAgIGlmICggbmVlZGxlTm90ICkgeyBuZWVkbGUgPSBuZWVkbGUuc2xpY2UoMSk7IH0KICAgIGNvbnN0IGxvZyA9IG5lZWRsZU5vdCA9PT0gZmFsc2UgJiYgbmVlZGxlID09PSAnJyA/IGNvbnNvbGUubG9nIDogdW5kZWZpbmVkOwogICAgY29uc3QgcmVOZWVkbGUgPSBzYWZlLnBhdHRlcm5Ub1JlZ2V4KG5lZWRsZSk7CiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gbmV3IFByb3h5KHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIHsKICAgICAgICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7CiAgICAgICAgICAgIGNvbnN0IGEgPSBTdHJpbmcoYXJnc1swXSk7CiAgICAgICAgICAgIGxldCBkZWZ1c2UgPSBmYWxzZTsKICAgICAgICAgICAgaWYgKCBsb2cgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIGxvZygndUJPOiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIiVzIiknLCBhKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRlZnVzZSA9IHJlTmVlZGxlLnRlc3QoYSkgIT09IG5lZWRsZU5vdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIGRlZnVzZSApIHsKICAgICAgICAgICAgICAgIGFyZ3NbMF0gPSBmdW5jdGlvbigpe307CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTsKICAgICAgICB9CiAgICB9KTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"set-constant.js","aliases":["set.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-setInterval-if.js","aliases":["nosiif.js","prevent-setInterval.js","setInterval-defuser.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gbm9TZXRJbnRlcnZhbElmKAogICAgbmVlZGxlID0gJycsCiAgICBkZWxheSA9ICcnCikgewogICAgaWYgKCB0eXBlb2YgbmVlZGxlICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IG5lZWRsZU5vdCA9IG5lZWRsZS5jaGFyQXQoMCkgPT09ICchJzsKICAgIGlmICggbmVlZGxlTm90ICkgeyBuZWVkbGUgPSBuZWVkbGUuc2xpY2UoMSk7IH0KICAgIGlmICggZGVsYXkgPT09ICcnICkgeyBkZWxheSA9IHVuZGVmaW5lZDsgfQogICAgbGV0IGRlbGF5Tm90ID0gZmFsc2U7CiAgICBpZiAoIGRlbGF5ICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgZGVsYXlOb3QgPSBkZWxheS5jaGFyQXQoMCkgPT09ICchJzsKICAgICAgICBpZiAoIGRlbGF5Tm90ICkgeyBkZWxheSA9IGRlbGF5LnNsaWNlKDEpOyB9CiAgICAgICAgZGVsYXkgPSBwYXJzZUludChkZWxheSwgMTApOwogICAgfQogICAgY29uc3QgbG9nID0gbmVlZGxlTm90ID09PSBmYWxzZSAmJiBuZWVkbGUgPT09ICcnICYmIGRlbGF5ID09PSB1bmRlZmluZWQKICAgICAgICA/IGNvbnNvbGUubG9nCiAgICAgICAgOiB1bmRlZmluZWQ7CiAgICBjb25zdCByZU5lZWRsZSA9IHNhZmUucGF0dGVyblRvUmVnZXgobmVlZGxlKTsKICAgIHNlbGYuc2V0SW50ZXJ2YWwgPSBuZXcgUHJveHkoc2VsZi5zZXRJbnRlcnZhbCwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpIHsKICAgICAgICAgICAgY29uc3QgYSA9IFN0cmluZyhhcmdzWzBdKTsKICAgICAgICAgICAgY29uc3QgYiA9IGFyZ3NbMV07CiAgICAgICAgICAgIGlmICggbG9nICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICBsb2coJ3VCTzogc2V0SW50ZXJ2YWwoIiVzIiwgJXMpJywgYSwgYik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsZXQgZGVmdXNlOwogICAgICAgICAgICAgICAgaWYgKCBuZWVkbGUgIT09ICcnICkgewogICAgICAgICAgICAgICAgICAgIGRlZnVzZSA9IHJlTmVlZGxlLnRlc3QoYSkgIT09IG5lZWRsZU5vdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggZGVmdXNlICE9PSBmYWxzZSAmJiBkZWxheSAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgICAgIGRlZnVzZSA9IChiID09PSBkZWxheSB8fCBpc05hTihiKSAmJiBpc05hTihkZWxheSkgKSAhPT0gZGVsYXlOb3Q7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIGRlZnVzZSApIHsKICAgICAgICAgICAgICAgICAgICBhcmdzWzBdID0gZnVuY3Rpb24oKXt9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJncyk7CiAgICAgICAgfSwKICAgICAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgewogICAgICAgICAgICBpZiAoIHByb3AgPT09ICd0b1N0cmluZycgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0LnRvU3RyaW5nLmJpbmQodGFyZ2V0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7CiAgICAgICAgfSwKICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"no-setTimeout-if.js","aliases":["nostif.js","prevent-setTimeout.js","setTimeout-defuser.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gbm9TZXRUaW1lb3V0SWYoCiAgICBuZWVkbGUgPSAnJywKICAgIGRlbGF5ID0gJycKKSB7CiAgICBpZiAoIHR5cGVvZiBuZWVkbGUgIT09ICdzdHJpbmcnICkgeyByZXR1cm47IH0KICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgY29uc3QgbmVlZGxlTm90ID0gbmVlZGxlLmNoYXJBdCgwKSA9PT0gJyEnOwogICAgaWYgKCBuZWVkbGVOb3QgKSB7IG5lZWRsZSA9IG5lZWRsZS5zbGljZSgxKTsgfQogICAgaWYgKCBkZWxheSA9PT0gJycgKSB7IGRlbGF5ID0gdW5kZWZpbmVkOyB9CiAgICBsZXQgZGVsYXlOb3QgPSBmYWxzZTsKICAgIGlmICggZGVsYXkgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICBkZWxheU5vdCA9IGRlbGF5LmNoYXJBdCgwKSA9PT0gJyEnOwogICAgICAgIGlmICggZGVsYXlOb3QgKSB7IGRlbGF5ID0gZGVsYXkuc2xpY2UoMSk7IH0KICAgICAgICBkZWxheSA9IHBhcnNlSW50KGRlbGF5LCAxMCk7CiAgICB9CiAgICBjb25zdCBsb2cgPSBuZWVkbGVOb3QgPT09IGZhbHNlICYmIG5lZWRsZSA9PT0gJycgJiYgZGVsYXkgPT09IHVuZGVmaW5lZAogICAgICAgID8gY29uc29sZS5sb2cKICAgICAgICA6IHVuZGVmaW5lZDsKICAgIGNvbnN0IHJlTmVlZGxlID0gc2FmZS5wYXR0ZXJuVG9SZWdleChuZWVkbGUpOwogICAgc2VsZi5zZXRUaW1lb3V0ID0gbmV3IFByb3h5KHNlbGYuc2V0VGltZW91dCwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpIHsKICAgICAgICAgICAgY29uc3QgYSA9IFN0cmluZyhhcmdzWzBdKTsKICAgICAgICAgICAgY29uc3QgYiA9IGFyZ3NbMV07CiAgICAgICAgICAgIGlmICggbG9nICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICBsb2coJ3VCTzogc2V0VGltZW91dCgiJXMiLCAlcyknLCBhLCBiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxldCBkZWZ1c2U7CiAgICAgICAgICAgICAgICBpZiAoIG5lZWRsZSAhPT0gJycgKSB7CiAgICAgICAgICAgICAgICAgICAgZGVmdXNlID0gcmVOZWVkbGUudGVzdChhKSAhPT0gbmVlZGxlTm90OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBkZWZ1c2UgIT09IGZhbHNlICYmIGRlbGF5ICE9PSB1bmRlZmluZWQgKSB7CiAgICAgICAgICAgICAgICAgICAgZGVmdXNlID0gKGIgPT09IGRlbGF5IHx8IGlzTmFOKGIpICYmIGlzTmFOKGRlbGF5KSApICE9PSBkZWxheU5vdDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICggZGVmdXNlICkgewogICAgICAgICAgICAgICAgICAgIGFyZ3NbMF0gPSBmdW5jdGlvbigpe307CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKTsKICAgICAgICB9LAogICAgICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7CiAgICAgICAgICAgIGlmICggcHJvcCA9PT0gJ3RvU3RyaW5nJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQudG9TdHJpbmcuYmluZCh0YXJnZXQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTsKICAgICAgICB9LAogICAgfSk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"webrtc-if.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-xhr-if.js","aliases":["prevent-xhr.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-window-open-if.js","aliases":["nowoif.js","prevent-window-open.js","window.open-defuser.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"close-window.js","aliases":["window-close-if.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gY2xvc2VXaW5kb3coCiAgICBhcmcxID0gJycKKSB7CiAgICBpZiAoIHR5cGVvZiBhcmcxICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGxldCBzdWJqZWN0ID0gJyc7CiAgICBpZiAoIC9eXC8uKlwvJC8udGVzdChhcmcxKSApIHsKICAgICAgICBzdWJqZWN0ID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICB9IGVsc2UgaWYgKCBhcmcxICE9PSAnJyApIHsKICAgICAgICBzdWJqZWN0ID0gYCR7d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfSR7d2luZG93LmxvY2F0aW9uLnNlYXJjaH1gOwogICAgfQogICAgdHJ5IHsKICAgICAgICBjb25zdCByZSA9IHNhZmUucGF0dGVyblRvUmVnZXgoYXJnMSk7CiAgICAgICAgaWYgKCByZS50ZXN0KHN1YmplY3QpICkgewogICAgICAgICAgICB3aW5kb3cuY2xvc2UoKTsKICAgICAgICB9CiAgICB9IGNhdGNoKGV4KSB7CiAgICAgICAgY29uc29sZS5sb2coZXgpOwogICAgfQp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"window.name-defuser.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIHdpbmRvd05hbWVEZWZ1c2VyKCkgewogICAgaWYgKCB3aW5kb3cgPT09IHdpbmRvdy50b3AgKSB7CiAgICAgICAgd2luZG93Lm5hbWUgPSAnJzsKICAgIH0KfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"overlay-buster.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIG92ZXJsYXlCdXN0ZXIoKSB7CiAgICBpZiAoIHdpbmRvdyAhPT0gd2luZG93LnRvcCApIHsgcmV0dXJuOyB9CiAgICB2YXIgdHN0YXJ0OwogICAgdmFyIHR0bCA9IDMwMDAwOwogICAgdmFyIGRlbGF5ID0gMDsKICAgIHZhciBkZWxheVN0ZXAgPSA1MDsKICAgIHZhciBidXN0ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsCiAgICAgICAgICAgIGJvZHlFbCA9IGRvY3VtZW50LmJvZHksCiAgICAgICAgICAgIHZ3ID0gTWF0aC5taW4oZG9jRWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoKSwKICAgICAgICAgICAgdmggPSBNYXRoLm1pbihkb2NFbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCksCiAgICAgICAgICAgIHRvbCA9IE1hdGgubWluKHZ3LCB2aCkgKiAwLjA1LAogICAgICAgICAgICBlbCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodncvMiwgdmgvMiksCiAgICAgICAgICAgIHN0eWxlLCByZWN0OwogICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgaWYgKCBlbCA9PT0gbnVsbCB8fCBlbC5wYXJlbnROb2RlID09PSBudWxsIHx8IGVsID09PSBib2R5RWwgKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTsKICAgICAgICAgICAgaWYgKCBwYXJzZUludChzdHlsZS56SW5kZXgsIDEwKSA+PSAxMDAwIHx8IHN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnICkgewogICAgICAgICAgICAgICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICAgICAgaWYgKCByZWN0LmxlZnQgPD0gdG9sICYmIHJlY3QudG9wIDw9IHRvbCAmJiAodncgLSByZWN0LnJpZ2h0KSA8PSB0b2wgJiYgKHZoIC0gcmVjdC5ib3R0b20pIDwgdG9sICkgewogICAgICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpOwogICAgICAgICAgICAgICAgICAgIHRzdGFydCA9IERhdGUubm93KCk7CiAgICAgICAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHZ3LzIsIHZoLzIpOwogICAgICAgICAgICAgICAgICAgIGJvZHlFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cnLCAnYXV0bycsICdpbXBvcnRhbnQnKTsKICAgICAgICAgICAgICAgICAgICBkb2NFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cnLCAnYXV0bycsICdpbXBvcnRhbnQnKTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7CiAgICAgICAgfQogICAgICAgIGlmICggKERhdGUubm93KCkgLSB0c3RhcnQpIDwgdHRsICkgewogICAgICAgICAgICBkZWxheSA9IE1hdGgubWluKGRlbGF5ICsgZGVsYXlTdGVwLCAxMDAwKTsKICAgICAgICAgICAgc2V0VGltZW91dChidXN0ZXIsIGRlbGF5KTsKICAgICAgICB9CiAgICB9OwogICAgdmFyIGRvbVJlYWR5ID0gZnVuY3Rpb24oZXYpIHsKICAgICAgICBpZiAoIGV2ICkgewogICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LnR5cGUsIGRvbVJlYWR5KTsKICAgICAgICB9CiAgICAgICAgdHN0YXJ0ID0gRGF0ZS5ub3coKTsKICAgICAgICBzZXRUaW1lb3V0KGJ1c3RlciwgZGVsYXkpOwogICAgfTsKICAgIGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnICkgewogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBkb21SZWFkeSk7CiAgICB9IGVsc2UgewogICAgICAgIGRvbVJlYWR5KCk7CiAgICB9Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"alert-buster.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIGFsZXJ0QnVzdGVyKCkgewogICAgd2luZG93LmFsZXJ0ID0gbmV3IFByb3h5KHdpbmRvdy5hbGVydCwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbihhKSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhhKTsKICAgICAgICB9LAogICAgICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7CiAgICAgICAgICAgIGlmICggcHJvcCA9PT0gJ3RvU3RyaW5nJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQudG9TdHJpbmcuYmluZCh0YXJnZXQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTsKICAgICAgICB9LAogICAgfSk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"nowebrtc.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIG5vV2VicnRjKCkgewogICAgdmFyIHJ0Y05hbWUgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gPyAnUlRDUGVlckNvbm5lY3Rpb24nIDogKAogICAgICAgIHdpbmRvdy53ZWJraXRSVENQZWVyQ29ubmVjdGlvbiA/ICd3ZWJraXRSVENQZWVyQ29ubmVjdGlvbicgOiAnJwogICAgKTsKICAgIGlmICggcnRjTmFtZSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgdmFyIGxvZyA9IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7CiAgICB2YXIgcGMgPSBmdW5jdGlvbihjZmcpIHsKICAgICAgICBsb2coJ0RvY3VtZW50IHRyaWVkIHRvIGNyZWF0ZSBhbiBSVENQZWVyQ29ubmVjdGlvbjogJW8nLCBjZmcpOwogICAgfTsKICAgIGNvbnN0IG5vb3AgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBwYy5wcm90b3R5cGUgPSB7CiAgICAgICAgY2xvc2U6IG5vb3AsCiAgICAgICAgY3JlYXRlRGF0YUNoYW5uZWw6IG5vb3AsCiAgICAgICAgY3JlYXRlT2ZmZXI6IG5vb3AsCiAgICAgICAgc2V0UmVtb3RlRGVzY3JpcHRpb246IG5vb3AsCiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gJ1tvYmplY3QgUlRDUGVlckNvbm5lY3Rpb25dJzsKICAgICAgICB9CiAgICB9OwogICAgdmFyIHogPSB3aW5kb3dbcnRjTmFtZV07CiAgICB3aW5kb3dbcnRjTmFtZV0gPSBwYy5iaW5kKHdpbmRvdyk7CiAgICBpZiAoIHoucHJvdG90eXBlICkgewogICAgICAgIHoucHJvdG90eXBlLmNyZWF0ZURhdGFDaGFubmVsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7fSwKICAgICAgICAgICAgICAgIHNlbmQ6IGZ1bmN0aW9uKCkge30KICAgICAgICAgICAgfTsKICAgICAgICB9LmJpbmQobnVsbCk7CiAgICB9Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"golem.de.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIGdvbGVtRGUoKSB7CiAgICBjb25zdCByYWVsID0gd2luZG93LmFkZEV2ZW50TGlzdGVuZXI7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICByYWVsKC4uLmFyZ3VtZW50cyk7CiAgICAgICAgbGV0IGhheXN0YWNrOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGhheXN0YWNrID0gYi50b1N0cmluZygpOwogICAgICAgIH0gY2F0Y2goZXgpIHsKICAgICAgICB9CiAgICAgICAgaWYgKAogICAgICAgICAgICB0eXBlb2YgaGF5c3RhY2sgPT09ICdzdHJpbmcnICYmCiAgICAgICAgICAgIC9eXHMqZnVuY3Rpb25ccypcKFwpXHMqXHtccyp3aW5kb3dcLmNsZWFyVGltZW91dFwoclwpXHMqXH1ccyokLy50ZXN0KGhheXN0YWNrKQogICAgICAgICkgewogICAgICAgICAgICBiKCk7CiAgICAgICAgfQogICAgfS5iaW5kKHdpbmRvdyk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"disable-newtab-links.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIGRpc2FibGVOZXd0YWJMaW5rcygpIHsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHsKICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0OwogICAgICAgIHdoaWxlICggdGFyZ2V0ICE9PSBudWxsICkgewogICAgICAgICAgICBpZiAoIHRhcmdldC5sb2NhbE5hbWUgPT09ICdhJyAmJiB0YXJnZXQuaGFzQXR0cmlidXRlKCd0YXJnZXQnKSApIHsKICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlOwogICAgICAgIH0KICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"cookie-remover.js","aliases":["remove-cookie.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gY29va2llUmVtb3ZlcigKICAgIG5lZWRsZSA9ICcnCikgewogICAgaWYgKCB0eXBlb2YgbmVlZGxlICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IHJlTmFtZSA9IHNhZmUucGF0dGVyblRvUmVnZXgobmVlZGxlKTsKICAgIGNvbnN0IHJlbW92ZUNvb2tpZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpLmZvckVhY2goY29va2llU3RyID0+IHsKICAgICAgICAgICAgbGV0IHBvcyA9IGNvb2tpZVN0ci5pbmRleE9mKCc9Jyk7CiAgICAgICAgICAgIGlmICggcG9zID09PSAtMSApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGxldCBjb29raWVOYW1lID0gY29va2llU3RyLnNsaWNlKDAsIHBvcykudHJpbSgpOwogICAgICAgICAgICBpZiAoICFyZU5hbWUudGVzdChjb29raWVOYW1lKSApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGxldCBwYXJ0MSA9IGNvb2tpZU5hbWUgKyAnPSc7CiAgICAgICAgICAgIGxldCBwYXJ0MmEgPSAnOyBkb21haW49JyArIGRvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lOwogICAgICAgICAgICBsZXQgcGFydDJiID0gJzsgZG9tYWluPS4nICsgZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWU7CiAgICAgICAgICAgIGxldCBwYXJ0MmMsIHBhcnQyZDsKICAgICAgICAgICAgbGV0IGRvbWFpbiA9IGRvY3VtZW50LmRvbWFpbjsKICAgICAgICAgICAgaWYgKCBkb21haW4gKSB7CiAgICAgICAgICAgICAgICBpZiAoIGRvbWFpbiAhPT0gZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUgKSB7CiAgICAgICAgICAgICAgICAgICAgcGFydDJjID0gJzsgZG9tYWluPS4nICsgZG9tYWluOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCBkb21haW4uc3RhcnRzV2l0aCgnd3d3LicpICkgewogICAgICAgICAgICAgICAgICAgIHBhcnQyZCA9ICc7IGRvbWFpbj0nICsgZG9tYWluLnJlcGxhY2UoJ3d3dycsICcnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBsZXQgcGFydDMgPSAnOyBwYXRoPS8nOwogICAgICAgICAgICBsZXQgcGFydDQgPSAnOyBNYXgtQWdlPS0xMDAwOyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UJzsKICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gcGFydDEgKyBwYXJ0NDsKICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gcGFydDEgKyBwYXJ0MmEgKyBwYXJ0NDsKICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gcGFydDEgKyBwYXJ0MmIgKyBwYXJ0NDsKICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gcGFydDEgKyBwYXJ0MyArIHBhcnQ0OwogICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBwYXJ0MSArIHBhcnQyYSArIHBhcnQzICsgcGFydDQ7CiAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IHBhcnQxICsgcGFydDJiICsgcGFydDMgKyBwYXJ0NDsKICAgICAgICAgICAgaWYgKCBwYXJ0MmMgIT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IHBhcnQxICsgcGFydDJjICsgcGFydDMgKyBwYXJ0NDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIHBhcnQyZCAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuY29va2llID0gcGFydDEgKyBwYXJ0MmQgKyBwYXJ0MyArIHBhcnQ0OwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9OwogICAgcmVtb3ZlQ29va2llKCk7CiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgcmVtb3ZlQ29va2llKTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"xml-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2hvdWxkTG9nKGRldGFpbHMpIHsKICAgIGlmICggZGV0YWlscyBpbnN0YW5jZW9mIE9iamVjdCA9PT0gZmFsc2UgKSB7IHJldHVybiBmYWxzZTsgfQogICAgcmV0dXJuIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdjYW5EZWJ1ZycpICYmIGRldGFpbHMubG9nOwp9CmZ1bmN0aW9uIHNhZmVTZWxmKCkgewogICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnc2FmZVNlbGYnKSApIHsKICAgICAgICByZXR1cm4gc2NyaXB0bGV0R2xvYmFscy5nZXQoJ3NhZmVTZWxmJyk7CiAgICB9CiAgICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpczsKICAgIGNvbnN0IHNhZmUgPSB7CiAgICAgICAgJ0FycmF5X2Zyb20nOiBBcnJheS5mcm9tLAogICAgICAgICdFcnJvcic6IHNlbGYuRXJyb3IsCiAgICAgICAgJ01hdGhfZmxvb3InOiBNYXRoLmZsb29yLAogICAgICAgICdNYXRoX3JhbmRvbSc6IE1hdGgucmFuZG9tLAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydHknOiBPYmplY3QuZGVmaW5lUHJvcGVydHkuYmluZChPYmplY3QpLAogICAgICAgICdSZWdFeHAnOiBzZWxmLlJlZ0V4cCwKICAgICAgICAnUmVnRXhwX3Rlc3QnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUudGVzdCwKICAgICAgICAnUmVnRXhwX2V4ZWMnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUuZXhlYywKICAgICAgICAnUmVxdWVzdF9jbG9uZSc6IHNlbGYuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUsCiAgICAgICAgJ1hNTEh0dHBSZXF1ZXN0Jzogc2VsZi5YTUxIdHRwUmVxdWVzdCwKICAgICAgICAnYWRkRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ3JlbW92ZUV2ZW50TGlzdGVuZXInOiBzZWxmLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyLAogICAgICAgICdmZXRjaCc6IHNlbGYuZmV0Y2gsCiAgICAgICAgJ0pTT04nOiBzZWxmLkpTT04sCiAgICAgICAgJ0pTT05fcGFyc2VGbic6IHNlbGYuSlNPTi5wYXJzZSwKICAgICAgICAnSlNPTl9zdHJpbmdpZnlGbic6IHNlbGYuSlNPTi5zdHJpbmdpZnksCiAgICAgICAgJ0pTT05fcGFyc2UnOiAoLi4uYXJncykgPT4gc2FmZS5KU09OX3BhcnNlRm4uY2FsbChzYWZlLkpTT04sIC4uLmFyZ3MpLAogICAgICAgICdKU09OX3N0cmluZ2lmeSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fc3RyaW5naWZ5Rm4uY2FsbChzYWZlLkpTT04sIC4uLmFyZ3MpLAogICAgICAgICdsb2cnOiBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLAogICAgICAgIHVib0xvZyguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggc2NyaXB0bGV0R2xvYmFscy5oYXMoJ2NhbkRlYnVnJykgPT09IGZhbHNlICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBhcmdzLmxlbmd0aCA9PT0gMCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYCR7YXJnc1swXX1gID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIHRoaXMubG9nKCdbdUJPXScsIC4uLmFyZ3MpOwogICAgICAgIH0sCiAgICAgICAgaW5pdFBhdHRlcm4ocGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4geyBtYXRjaEFsbDogdHJ1ZSB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGV4cGVjdCA9IChvcHRpb25zLmNhbk5lZ2F0ZSAhPT0gdHJ1ZSB8fCBwYXR0ZXJuLnN0YXJ0c1dpdGgoJyEnKSA9PT0gZmFsc2UpOwogICAgICAgICAgICBpZiAoIGV4cGVjdCA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5zbGljZSgxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBtYXRjaCA9IC9eXC8oLispXC8oW2dpbXN1XSopJC8uZXhlYyhwYXR0ZXJuKTsKICAgICAgICAgICAgaWYgKCBtYXRjaCAhPT0gbnVsbCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcGF0dGVybiwKICAgICAgICAgICAgICAgICAgICByZTogbmV3IHRoaXMuUmVnRXhwKAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gfHwgb3B0aW9ucy5mbGFncwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcGF0dGVybiwKICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAocGF0dGVybi5yZXBsYWNlKAogICAgICAgICAgICAgICAgICAgIC9bLiorP14ke30oKXxbXF1cXF0vZywgJ1xcJCYnKSwKICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgdGVzdFBhdHRlcm4oZGV0YWlscywgaGF5c3RhY2spIHsKICAgICAgICAgICAgaWYgKCBkZXRhaWxzLm1hdGNoQWxsICkgeyByZXR1cm4gdHJ1ZTsgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5SZWdFeHBfdGVzdC5jYWxsKGRldGFpbHMucmUsIGhheXN0YWNrKSA9PT0gZGV0YWlscy5leHBlY3Q7CiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuVG9SZWdleChwYXR0ZXJuLCBmbGFncyA9IHVuZGVmaW5lZCwgdmVyYmF0aW0gPSBmYWxzZSkgewogICAgICAgICAgICBpZiAoIHBhdHRlcm4gPT09ICcnICkgeyByZXR1cm4gL14vOyB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoID09PSBudWxsICkgewogICAgICAgICAgICAgICAgY29uc3QgcmVTdHIgPSBwYXR0ZXJuLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpOwogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodmVyYmF0aW0gPyBgXiR7cmVTdHJ9JGAgOiByZVN0ciwgZmxhZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0gfHwgZmxhZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoKGV4KSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC9eLzsKICAgICAgICB9LAogICAgICAgIGdldEV4dHJhQXJncyhhcmdzLCBvZmZzZXQgPSAwKSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBhcmdzLnNsaWNlKG9mZnNldCkucmVkdWNlKChvdXQsIHYsIGksIGEpID0+IHsKICAgICAgICAgICAgICAgIGlmICggKGkgJiAxKSA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByYXdWYWx1ZSA9IGFbaSsxXTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IC9eXGQrJC8udGVzdChyYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyYXdWYWx1ZSwgMTApCiAgICAgICAgICAgICAgICAgICAgICAgIDogcmF3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goWyBhW2ldLCB2YWx1ZSBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7CiAgICAgICAgICAgIH0sIFtdKTsKICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhlbnRyaWVzKTsKICAgICAgICB9LAogICAgfTsKICAgIHNjcmlwdGxldEdsb2JhbHMuc2V0KCdzYWZlU2VsZicsIHNhZmUpOwogICAgcmV0dXJuIHNhZmU7Cn0KCiAgKGZ1bmN0aW9uIHhtbFBydW5lKAogICAgc2VsZWN0b3IgPSAnJywKICAgIHNlbGVjdG9yQ2hlY2sgPSAnJywKICAgIHVybFBhdHRlcm4gPSAnJwopIHsKICAgIGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBpZiAoIHNlbGVjdG9yID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IHJlVXJsID0gc2FmZS5wYXR0ZXJuVG9SZWdleCh1cmxQYXR0ZXJuKTsKICAgIGNvbnN0IGV4dHJhQXJncyA9IHNhZmUuZ2V0RXh0cmFBcmdzKEFycmF5LmZyb20oYXJndW1lbnRzKSwgMyk7CiAgICBjb25zdCBsb2cgPSBzaG91bGRMb2coZXh0cmFBcmdzKSA/ICgoLi4uYXJncykgPT4geyBzYWZlLnVib0xvZyguLi5hcmdzKTsgfSkgOiAoKCApID0+IHsgfSk7CiAgICBjb25zdCBxdWVyeUFsbCA9ICh4bWxEb2MsIHNlbGVjdG9yKSA9PiB7CiAgICAgICAgY29uc3QgaXNYcGF0aCA9IC9eeHBhdGhcKC4rXCkkLy50ZXN0KHNlbGVjdG9yKTsKICAgICAgICBpZiAoIGlzWHBhdGggPT09IGZhbHNlICkgewogICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh4bWxEb2MucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpOwogICAgICAgIH0KICAgICAgICBjb25zdCB4cHIgPSB4bWxEb2MuZXZhbHVhdGUoCiAgICAgICAgICAgIHNlbGVjdG9yLnNsaWNlKDYsIC0xKSwKICAgICAgICAgICAgeG1sRG9jLAogICAgICAgICAgICBudWxsLAogICAgICAgICAgICBYUGF0aFJlc3VsdC5VTk9SREVSRURfTk9ERV9TTkFQU0hPVF9UWVBFLAogICAgICAgICAgICBudWxsCiAgICAgICAgKTsKICAgICAgICBjb25zdCBvdXQgPSBbXTsKICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB4cHIuc25hcHNob3RMZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHhwci5zbmFwc2hvdEl0ZW0oaSk7CiAgICAgICAgICAgIG91dC5wdXNoKG5vZGUpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb3V0OwogICAgfTsKICAgIGNvbnN0IHBydW5lRnJvbURvYyA9IHhtbERvYyA9PiB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKCBzZWxlY3RvckNoZWNrICE9PSAnJyAmJiB4bWxEb2MucXVlcnlTZWxlY3RvcihzZWxlY3RvckNoZWNrKSA9PT0gbnVsbCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB4bWxEb2M7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCBleHRyYUFyZ3MubG9nZG9jICkgewogICAgICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplciA9IG5ldyBYTUxTZXJpYWxpemVyKCk7CiAgICAgICAgICAgICAgICBsb2coYHhtbFBydW5lOiBkb2N1bWVudCBpc1xuXHQke3NlcmlhbGl6ZXIuc2VyaWFsaXplVG9TdHJpbmcoeG1sRG9jKX1gKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBpdGVtcyA9IHF1ZXJ5QWxsKHhtbERvYywgc2VsZWN0b3IpOwogICAgICAgICAgICBpZiAoIGl0ZW1zLmxlbmd0aCA9PT0gMCApIHsgcmV0dXJuIHhtbERvYzsgfQogICAgICAgICAgICBsb2coYHhtbFBydW5lOiByZW1vdmluZyAke2l0ZW1zLmxlbmd0aH0gaXRlbXNgKTsKICAgICAgICAgICAgZm9yICggY29uc3QgaXRlbSBvZiBpdGVtcyApIHsKICAgICAgICAgICAgICAgIGlmICggaXRlbS5ub2RlVHlwZSA9PT0gMSApIHsKICAgICAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICggaXRlbS5ub2RlVHlwZSA9PT0gMiApIHsKICAgICAgICAgICAgICAgICAgICBpdGVtLm93bmVyRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoaXRlbS5ub2RlTmFtZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsb2coYHhtbFBydW5lOiAke2l0ZW0uY29uc3RydWN0b3IubmFtZX0uJHtpdGVtLm5vZGVOYW1lfSByZW1vdmVkYCk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoKGV4KSB7CiAgICAgICAgICAgIGxvZyhleCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB4bWxEb2M7CiAgICB9OwogICAgY29uc3QgcHJ1bmVGcm9tVGV4dCA9IHRleHQgPT4gewogICAgICAgIGlmICggKC9eXHMqPC8udGVzdCh0ZXh0KSAmJiAvPlxzKiQvLnRlc3QodGV4dCkpID09PSBmYWxzZSApIHsKICAgICAgICAgICAgcmV0dXJuIHRleHQ7CiAgICAgICAgfQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIGNvbnN0IHhtbFBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICAgICAgICAgICAgY29uc3QgeG1sRG9jID0geG1sUGFyc2VyLnBhcnNlRnJvbVN0cmluZyh0ZXh0LCAndGV4dC94bWwnKTsKICAgICAgICAgICAgcHJ1bmVGcm9tRG9jKHhtbERvYyk7CiAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZXIgPSBuZXcgWE1MU2VyaWFsaXplcigpOwogICAgICAgICAgICB0ZXh0ID0gc2VyaWFsaXplci5zZXJpYWxpemVUb1N0cmluZyh4bWxEb2MpOwogICAgICAgIH0gY2F0Y2goZXgpIHsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRleHQ7CiAgICB9OwogICAgY29uc3QgdXJsRnJvbUFyZyA9IGFyZyA9PiB7CiAgICAgICAgaWYgKCB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyApIHsgcmV0dXJuIGFyZzsgfQogICAgICAgIGlmICggYXJnIGluc3RhbmNlb2YgUmVxdWVzdCApIHsgcmV0dXJuIGFyZy51cmw7IH0KICAgICAgICByZXR1cm4gU3RyaW5nKGFyZyk7CiAgICB9OwogICAgc2VsZi5mZXRjaCA9IG5ldyBQcm94eShzZWxmLmZldGNoLCB7CiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJncykgewogICAgICAgICAgICBjb25zdCBmZXRjaFByb21pc2UgPSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJncyk7CiAgICAgICAgICAgIGlmICggcmVVcmwudGVzdCh1cmxGcm9tQXJnKGFyZ3NbMF0pKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hQcm9taXNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmZXRjaFByb21pc2UudGhlbihyZXNwb25zZUJlZm9yZSA9PiB7CiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHJlc3BvbnNlQmVmb3JlLmNsb25lKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpLnRoZW4odGV4dCA9PiB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VBZnRlciA9IG5ldyBSZXNwb25zZShwcnVuZUZyb21UZXh0KHRleHQpLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2VCZWZvcmUuc3RhdHVzLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZUJlZm9yZS5zdGF0dXNUZXh0LAogICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXNwb25zZUJlZm9yZS5oZWFkZXJzLAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHJlc3BvbnNlQWZ0ZXIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2s6IHsgdmFsdWU6IHJlc3BvbnNlQmVmb3JlLm9rIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0ZWQ6IHsgdmFsdWU6IHJlc3BvbnNlQmVmb3JlLnJlZGlyZWN0ZWQgfSwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogeyB2YWx1ZTogcmVzcG9uc2VCZWZvcmUudHlwZSB9LAogICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHsgdmFsdWU6IHJlc3BvbnNlQmVmb3JlLnVybCB9LAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZUFmdGVyOwogICAgICAgICAgICAgICAgfSkuY2F0Y2goKCApID0+CiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VCZWZvcmUKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0pOwogICAgc2VsZi5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUub3BlbiA9IG5ldyBQcm94eShzZWxmLlhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuLCB7CiAgICAgICAgYXBwbHk6IGFzeW5jICh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHsKICAgICAgICAgICAgaWYgKCByZVVybC50ZXN0KHVybEZyb21BcmcoYXJnc1sxXSkpID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpc0FyZy5hZGRFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZiAoIHRoaXNBcmcucmVhZHlTdGF0ZSAhPT0gNCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpc0FyZy5yZXNwb25zZVR5cGU7CiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgdHlwZSA9PT0gJ2RvY3VtZW50JyB8fAogICAgICAgICAgICAgICAgICAgIHR5cGUgPT09ICcnICYmIHRoaXNBcmcucmVzcG9uc2VYTUwgaW5zdGFuY2VvZiBYTUxEb2N1bWVudAogICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgICAgcHJ1bmVGcm9tRG9jKHRoaXNBcmcucmVzcG9uc2VYTUwpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgICB0eXBlID09PSAndGV4dCcgfHwKICAgICAgICAgICAgICAgICAgICB0eXBlID09PSAnJyAmJiB0eXBlb2YgdGhpc0FyZy5yZXNwb25zZVRleHQgPT09ICdzdHJpbmcnCiAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0aW4gPSB0aGlzQXJnLnJlc3BvbnNlVGV4dDsKICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0b3V0ID0gcHJ1bmVGcm9tVGV4dCh0ZXh0aW4pOwogICAgICAgICAgICAgICAgICAgIGlmICggdGV4dG91dCA9PT0gdGV4dGluICkgeyByZXR1cm47IH0KICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpc0FyZywgJ3Jlc3BvbnNlJywgeyB2YWx1ZTogdGV4dG91dCB9KTsKICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpc0FyZywgJ3Jlc3BvbnNlVGV4dCcsIHsgdmFsdWU6IHRleHRvdXQgfSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKTsKICAgICAgICB9CiAgICB9KTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"m3u-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2hvdWxkTG9nKGRldGFpbHMpIHsKICAgIGlmICggZGV0YWlscyBpbnN0YW5jZW9mIE9iamVjdCA9PT0gZmFsc2UgKSB7IHJldHVybiBmYWxzZTsgfQogICAgcmV0dXJuIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdjYW5EZWJ1ZycpICYmIGRldGFpbHMubG9nOwp9CmZ1bmN0aW9uIHNhZmVTZWxmKCkgewogICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnc2FmZVNlbGYnKSApIHsKICAgICAgICByZXR1cm4gc2NyaXB0bGV0R2xvYmFscy5nZXQoJ3NhZmVTZWxmJyk7CiAgICB9CiAgICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpczsKICAgIGNvbnN0IHNhZmUgPSB7CiAgICAgICAgJ0FycmF5X2Zyb20nOiBBcnJheS5mcm9tLAogICAgICAgICdFcnJvcic6IHNlbGYuRXJyb3IsCiAgICAgICAgJ01hdGhfZmxvb3InOiBNYXRoLmZsb29yLAogICAgICAgICdNYXRoX3JhbmRvbSc6IE1hdGgucmFuZG9tLAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydHknOiBPYmplY3QuZGVmaW5lUHJvcGVydHkuYmluZChPYmplY3QpLAogICAgICAgICdSZWdFeHAnOiBzZWxmLlJlZ0V4cCwKICAgICAgICAnUmVnRXhwX3Rlc3QnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUudGVzdCwKICAgICAgICAnUmVnRXhwX2V4ZWMnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUuZXhlYywKICAgICAgICAnUmVxdWVzdF9jbG9uZSc6IHNlbGYuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUsCiAgICAgICAgJ1hNTEh0dHBSZXF1ZXN0Jzogc2VsZi5YTUxIdHRwUmVxdWVzdCwKICAgICAgICAnYWRkRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ3JlbW92ZUV2ZW50TGlzdGVuZXInOiBzZWxmLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyLAogICAgICAgICdmZXRjaCc6IHNlbGYuZmV0Y2gsCiAgICAgICAgJ0pTT04nOiBzZWxmLkpTT04sCiAgICAgICAgJ0pTT05fcGFyc2VGbic6IHNlbGYuSlNPTi5wYXJzZSwKICAgICAgICAnSlNPTl9zdHJpbmdpZnlGbic6IHNlbGYuSlNPTi5zdHJpbmdpZnksCiAgICAgICAgJ0pTT05fcGFyc2UnOiAoLi4uYXJncykgPT4gc2FmZS5KU09OX3BhcnNlRm4uY2FsbChzYWZlLkpTT04sIC4uLmFyZ3MpLAogICAgICAgICdKU09OX3N0cmluZ2lmeSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fc3RyaW5naWZ5Rm4uY2FsbChzYWZlLkpTT04sIC4uLmFyZ3MpLAogICAgICAgICdsb2cnOiBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLAogICAgICAgIHVib0xvZyguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggc2NyaXB0bGV0R2xvYmFscy5oYXMoJ2NhbkRlYnVnJykgPT09IGZhbHNlICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBhcmdzLmxlbmd0aCA9PT0gMCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYCR7YXJnc1swXX1gID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIHRoaXMubG9nKCdbdUJPXScsIC4uLmFyZ3MpOwogICAgICAgIH0sCiAgICAgICAgaW5pdFBhdHRlcm4ocGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4geyBtYXRjaEFsbDogdHJ1ZSB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IGV4cGVjdCA9IChvcHRpb25zLmNhbk5lZ2F0ZSAhPT0gdHJ1ZSB8fCBwYXR0ZXJuLnN0YXJ0c1dpdGgoJyEnKSA9PT0gZmFsc2UpOwogICAgICAgICAgICBpZiAoIGV4cGVjdCA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5zbGljZSgxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBtYXRjaCA9IC9eXC8oLispXC8oW2dpbXN1XSopJC8uZXhlYyhwYXR0ZXJuKTsKICAgICAgICAgICAgaWYgKCBtYXRjaCAhPT0gbnVsbCApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgcGF0dGVybiwKICAgICAgICAgICAgICAgICAgICByZTogbmV3IHRoaXMuUmVnRXhwKAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gfHwgb3B0aW9ucy5mbGFncwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcGF0dGVybiwKICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAocGF0dGVybi5yZXBsYWNlKAogICAgICAgICAgICAgICAgICAgIC9bLiorP14ke30oKXxbXF1cXF0vZywgJ1xcJCYnKSwKICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgdGVzdFBhdHRlcm4oZGV0YWlscywgaGF5c3RhY2spIHsKICAgICAgICAgICAgaWYgKCBkZXRhaWxzLm1hdGNoQWxsICkgeyByZXR1cm4gdHJ1ZTsgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5SZWdFeHBfdGVzdC5jYWxsKGRldGFpbHMucmUsIGhheXN0YWNrKSA9PT0gZGV0YWlscy5leHBlY3Q7CiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuVG9SZWdleChwYXR0ZXJuLCBmbGFncyA9IHVuZGVmaW5lZCwgdmVyYmF0aW0gPSBmYWxzZSkgewogICAgICAgICAgICBpZiAoIHBhdHRlcm4gPT09ICcnICkgeyByZXR1cm4gL14vOyB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoID09PSBudWxsICkgewogICAgICAgICAgICAgICAgY29uc3QgcmVTdHIgPSBwYXR0ZXJuLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpOwogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodmVyYmF0aW0gPyBgXiR7cmVTdHJ9JGAgOiByZVN0ciwgZmxhZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0gfHwgZmxhZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoKGV4KSB7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIC9eLzsKICAgICAgICB9LAogICAgICAgIGdldEV4dHJhQXJncyhhcmdzLCBvZmZzZXQgPSAwKSB7CiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBhcmdzLnNsaWNlKG9mZnNldCkucmVkdWNlKChvdXQsIHYsIGksIGEpID0+IHsKICAgICAgICAgICAgICAgIGlmICggKGkgJiAxKSA9PT0gMCApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCByYXdWYWx1ZSA9IGFbaSsxXTsKICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IC9eXGQrJC8udGVzdChyYXdWYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyYXdWYWx1ZSwgMTApCiAgICAgICAgICAgICAgICAgICAgICAgIDogcmF3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goWyBhW2ldLCB2YWx1ZSBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7CiAgICAgICAgICAgIH0sIFtdKTsKICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhlbnRyaWVzKTsKICAgICAgICB9LAogICAgfTsKICAgIHNjcmlwdGxldEdsb2JhbHMuc2V0KCdzYWZlU2VsZicsIHNhZmUpOwogICAgcmV0dXJuIHNhZmU7Cn0KCiAgKGZ1bmN0aW9uIG0zdVBydW5lKAogICAgbTN1UGF0dGVybiA9ICcnLAogICAgdXJsUGF0dGVybiA9ICcnCikgewogICAgaWYgKCB0eXBlb2YgbTN1UGF0dGVybiAhPT0gJ3N0cmluZycgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc2FmZSA9IHNhZmVTZWxmKCk7CiAgICBjb25zdCBvcHRpb25zID0gc2FmZS5nZXRFeHRyYUFyZ3MoQXJyYXkuZnJvbShhcmd1bWVudHMpLCAyKTsKICAgIGNvbnN0IGxvZ0xldmVsID0gc2hvdWxkTG9nKG9wdGlvbnMpOwogICAgY29uc3QgdWJvTG9nID0gbG9nTGV2ZWwgPyAoKC4uLmFyZ3MpID0+IHNhZmUudWJvTG9nKC4uLmFyZ3MpKSA6ICgoICkgPT4geyB9KTsKICAgIGNvbnN0IHJlZ2V4RnJvbUFyZyA9IGFyZyA9PiB7CiAgICAgICAgaWYgKCBhcmcgPT09ICcnICkgeyByZXR1cm4gL14vOyB9CiAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnbXNdKikkLy5leGVjKGFyZyk7CiAgICAgICAgaWYgKCBtYXRjaCAhPT0gbnVsbCApIHsKICAgICAgICAgICAgbGV0IGZsYWdzID0gbWF0Y2hbMl0gfHwgJyc7CiAgICAgICAgICAgIGlmICggZmxhZ3MuaW5jbHVkZXMoJ20nKSApIHsgZmxhZ3MgKz0gJ3MnOyB9CiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBmbGFncyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXcgUmVnRXhwKAogICAgICAgICAgICBhcmcucmVwbGFjZSgvWy4rP14ke30oKXxbXF1cXF0vZywgJ1xcJCYnKS5yZXBsYWNlKC9cKisvZywgJy4qPycpCiAgICAgICAgKTsKICAgIH07CiAgICBjb25zdCByZU0zdSA9IHJlZ2V4RnJvbUFyZyhtM3VQYXR0ZXJuKTsKICAgIGNvbnN0IHJlVXJsID0gcmVnZXhGcm9tQXJnKHVybFBhdHRlcm4pOwogICAgY29uc3QgcHJ1bmVTcGxpY2VvdXRCbG9jayA9IChsaW5lcywgaSkgPT4gewogICAgICAgIGlmICggbGluZXNbaV0uc3RhcnRzV2l0aCgnI0VYVC1YLUNVRTpUWVBFPSJTcGxpY2VPdXQiJykgPT09IGZhbHNlICkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHVib0xvZygnbTN1LXBydW5lOiBkaXNjYXJkaW5nJywgYFxuXHQke2xpbmVzW2ldfWApOwogICAgICAgIGxpbmVzW2ldID0gdW5kZWZpbmVkOyBpICs9IDE7CiAgICAgICAgaWYgKCBsaW5lc1tpXS5zdGFydHNXaXRoKCcjRVhULVgtQVNTRVQ6Q0FJRCcpICkgewogICAgICAgICAgICB1Ym9Mb2coYFx0JHtsaW5lc1tpXX1gKTsKICAgICAgICAgICAgbGluZXNbaV0gPSB1bmRlZmluZWQ7IGkgKz0gMTsKICAgICAgICB9CiAgICAgICAgaWYgKCBsaW5lc1tpXS5zdGFydHNXaXRoKCcjRVhULVgtU0NURTM1OicpICkgewogICAgICAgICAgICB1Ym9Mb2coYFx0JHtsaW5lc1tpXX1gKTsKICAgICAgICAgICAgbGluZXNbaV0gPSB1bmRlZmluZWQ7IGkgKz0gMTsKICAgICAgICB9CiAgICAgICAgaWYgKCBsaW5lc1tpXS5zdGFydHNXaXRoKCcjRVhULVgtQ1VFLUlOJykgKSB7CiAgICAgICAgICAgIHVib0xvZyhgXHQke2xpbmVzW2ldfWApOwogICAgICAgICAgICBsaW5lc1tpXSA9IHVuZGVmaW5lZDsgaSArPSAxOwogICAgICAgIH0KICAgICAgICBpZiAoIGxpbmVzW2ldLnN0YXJ0c1dpdGgoJyNFWFQtWC1TQ1RFMzU6JykgKSB7CiAgICAgICAgICAgIHVib0xvZyhgXHQke2xpbmVzW2ldfWApOwogICAgICAgICAgICBsaW5lc1tpXSA9IHVuZGVmaW5lZDsgaSArPSAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH07CiAgICBjb25zdCBwcnVuZUluZkJsb2NrID0gKGxpbmVzLCBpKSA9PiB7CiAgICAgICAgaWYgKCBsaW5lc1tpXS5zdGFydHNXaXRoKCcjRVhUSU5GJykgPT09IGZhbHNlICkgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgICBpZiAoIHJlTTN1LnRlc3QobGluZXNbaSsxXSkgPT09IGZhbHNlICkgeyByZXR1cm4gZmFsc2U7IH0KICAgICAgICB1Ym9Mb2coJ20zdS1wcnVuZTogZGlzY2FyZGluZycsIGBcblx0JHtsaW5lc1tpXX0sIFxuXHQke2xpbmVzW2krMV19YCk7CiAgICAgICAgbGluZXNbaV0gPSBsaW5lc1tpKzFdID0gdW5kZWZpbmVkOyBpICs9IDI7CiAgICAgICAgaWYgKCBsaW5lc1tpXS5zdGFydHNXaXRoKCcjRVhULVgtRElTQ09OVElOVUlUWScpICkgewogICAgICAgICAgICB1Ym9Mb2coYFx0JHtsaW5lc1tpXX1gKTsKICAgICAgICAgICAgbGluZXNbaV0gPSB1bmRlZmluZWQ7IGkgKz0gMTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9OwogICAgY29uc3QgcHJ1bmVyID0gdGV4dCA9PiB7CiAgICAgICAgaWYgKCAoL15ccyojRVhUTTNVLy50ZXN0KHRleHQpKSA9PT0gZmFsc2UgKSB7IHJldHVybiB0ZXh0OyB9CiAgICAgICAgaWYgKCByZU0zdS5tdWx0aWxpbmUgKSB7CiAgICAgICAgICAgIHJlTTN1Lmxhc3RJbmRleCA9IDA7CiAgICAgICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gcmVNM3UuZXhlYyh0ZXh0KTsKICAgICAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7IGJyZWFrOyB9CiAgICAgICAgICAgICAgICBsZXQgZGlzY2FyZCA9IG1hdGNoWzBdOwogICAgICAgICAgICAgICAgbGV0IGJlZm9yZSA9IHRleHQuc2xpY2UoMCwgbWF0Y2guaW5kZXgpOwogICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgIC9eW1xuXHJdKy8udGVzdChkaXNjYXJkKSA9PT0gZmFsc2UgJiYKICAgICAgICAgICAgICAgICAgICAvW1xuXHJdKyQvLnRlc3QoYmVmb3JlKSA9PT0gZmFsc2UKICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0T2ZMaW5lID0gL1teXG5ccl0rJC8uZXhlYyhiZWZvcmUpOwogICAgICAgICAgICAgICAgICAgIGlmICggc3RhcnRPZkxpbmUgIT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSA9IGJlZm9yZS5zbGljZSgwLCBzdGFydE9mTGluZS5pbmRleCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NhcmQgPSBzdGFydE9mTGluZVswXSArIGRpc2NhcmQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbGV0IGFmdGVyID0gdGV4dC5zbGljZShtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgL1tcblxyXSskLy50ZXN0KGRpc2NhcmQpID09PSBmYWxzZSAmJgogICAgICAgICAgICAgICAgICAgIC9eW1xuXHJdKy8udGVzdChhZnRlcikgPT09IGZhbHNlCiAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmRPZkxpbmUgPSAvXlteXG5ccl0rLy5leGVjKGFmdGVyKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIGVuZE9mTGluZSAhPT0gbnVsbCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgPSBhZnRlci5zbGljZShlbmRPZkxpbmUuaW5kZXgpOwogICAgICAgICAgICAgICAgICAgICAgICBkaXNjYXJkICs9IGRpc2NhcmQgKyBlbmRPZkxpbmVbMF07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGV4dCA9IGJlZm9yZS50cmltKCkgKyAnXG4nICsgYWZ0ZXIudHJpbSgpOwogICAgICAgICAgICAgICAgcmVNM3UubGFzdEluZGV4ID0gYmVmb3JlLmxlbmd0aCArIDE7CiAgICAgICAgICAgICAgICB1Ym9Mb2coJ20zdS1wcnVuZTogZGlzY2FyZGluZ1xuJywKICAgICAgICAgICAgICAgICAgICBkaXNjYXJkLnNwbGl0KC9cbisvKS5tYXAocyA9PiBgXHQke3N9YCkuam9pbignXG4nKQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIGlmICggcmVNM3UuZ2xvYmFsID09PSBmYWxzZSApIHsgYnJlYWs7IH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdGV4dDsKICAgICAgICB9CiAgICAgICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KC9cblxyfFxufFxyLyk7CiAgICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKysgKSB7CiAgICAgICAgICAgIGlmICggbGluZXNbaV0gPT09IHVuZGVmaW5lZCApIHsgY29udGludWU7IH0KICAgICAgICAgICAgaWYgKCBwcnVuZVNwbGljZW91dEJsb2NrKGxpbmVzLCBpKSApIHsgY29udGludWU7IH0KICAgICAgICAgICAgaWYgKCBwcnVuZUluZkJsb2NrKGxpbmVzLCBpKSApIHsgY29udGludWU7IH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxpbmVzLmZpbHRlcihsID0+IGwgIT09IHVuZGVmaW5lZCkuam9pbignXG4nKTsKICAgIH07CiAgICBjb25zdCB1cmxGcm9tQXJnID0gYXJnID0+IHsKICAgICAgICBpZiAoIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnICkgeyByZXR1cm4gYXJnOyB9CiAgICAgICAgaWYgKCBhcmcgaW5zdGFuY2VvZiBSZXF1ZXN0ICkgeyByZXR1cm4gYXJnLnVybDsgfQogICAgICAgIHJldHVybiBTdHJpbmcoYXJnKTsKICAgIH07CiAgICBjb25zdCByZWFsRmV0Y2ggPSBzZWxmLmZldGNoOwogICAgc2VsZi5mZXRjaCA9IG5ldyBQcm94eShzZWxmLmZldGNoLCB7CiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJncykgewogICAgICAgICAgICBpZiAoIHJlVXJsLnRlc3QodXJsRnJvbUFyZyhhcmdzWzBdKSkgPT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVhbEZldGNoKC4uLmFyZ3MpLnRoZW4ocmVhbFJlc3BvbnNlID0+CiAgICAgICAgICAgICAgICByZWFsUmVzcG9uc2UudGV4dCgpLnRoZW4odGV4dCA9PgogICAgICAgICAgICAgICAgICAgIG5ldyBSZXNwb25zZShwcnVuZXIodGV4dCksIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZWFsUmVzcG9uc2Uuc3RhdHVzLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZWFsUmVzcG9uc2Uuc3RhdHVzVGV4dCwKICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogcmVhbFJlc3BvbnNlLmhlYWRlcnMsCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9KTsKICAgIHNlbGYuWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW4gPSBuZXcgUHJveHkoc2VsZi5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUub3BlbiwgewogICAgICAgIGFwcGx5OiBhc3luYyAodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7CiAgICAgICAgICAgIGlmICggcmVVcmwudGVzdCh1cmxGcm9tQXJnKGFyZ3NbMV0pKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXNBcmcuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKCB0aGlzQXJnLnJlYWR5U3RhdGUgIT09IDQgKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHRoaXNBcmcucmVzcG9uc2VUeXBlOwogICAgICAgICAgICAgICAgaWYgKCB0eXBlICE9PSAnJyAmJiB0eXBlICE9PSAndGV4dCcgKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgY29uc3QgdGV4dGluID0gdGhpc0FyZy5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0b3V0ID0gcHJ1bmVyKHRleHRpbik7CiAgICAgICAgICAgICAgICBpZiAoIHRleHRvdXQgPT09IHRleHRpbiApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpc0FyZywgJ3Jlc3BvbnNlJywgeyB2YWx1ZTogdGV4dG91dCB9KTsKICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzQXJnLCAncmVzcG9uc2VUZXh0JywgeyB2YWx1ZTogdGV4dG91dCB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJncyk7CiAgICAgICAgfQogICAgfSk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"href-sanitizer.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"call-nothrow.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIGNhbGxOb3Rocm93KAogICAgY2hhaW4gPSAnJwopIHsKICAgIGlmICggdHlwZW9mIGNoYWluICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBpZiAoIGNoYWluID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBwYXJ0cyA9IGNoYWluLnNwbGl0KCcuJyk7CiAgICBsZXQgb3duZXIgPSB3aW5kb3csIHByb3A7CiAgICBmb3IgKDs7KSB7CiAgICAgICAgcHJvcCA9IHBhcnRzLnNoaWZ0KCk7CiAgICAgICAgaWYgKCBwYXJ0cy5sZW5ndGggPT09IDAgKSB7IGJyZWFrOyB9CiAgICAgICAgb3duZXIgPSBvd25lcltwcm9wXTsKICAgICAgICBpZiAoIG93bmVyIGluc3RhbmNlb2YgT2JqZWN0ID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICB9CiAgICBpZiAoIHByb3AgPT09ICcnICkgeyByZXR1cm47IH0KICAgIGNvbnN0IGZuID0gb3duZXJbcHJvcF07CiAgICBpZiAoIHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJyApIHsgcmV0dXJuOyB9CiAgICBvd25lcltwcm9wXSA9IG5ldyBQcm94eShmbiwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbiguLi5hcmdzKSB7CiAgICAgICAgICAgIGxldCByOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgciA9IFJlZmxlY3QuYXBwbHkoLi4uYXJncyk7CiAgICAgICAgICAgIH0gY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICB9LAogICAgfSk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"spoof-css.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"remove-node-text.js","aliases":["rmnt.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-cookie.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-cookie-reload.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-local-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQpmdW5jdGlvbiBzZXRMb2NhbFN0b3JhZ2VJdGVtRm4oCiAgICB3aGljaCA9ICdsb2NhbCcsCiAgICB0cnVzdGVkID0gZmFsc2UsCiAgICBrZXkgPSAnJywKICAgIHZhbHVlID0gJycsCikgewogICAgaWYgKCBrZXkgPT09ICcnICkgeyByZXR1cm47IH0KCiAgICBjb25zdCB0cnVzdGVkVmFsdWVzID0gWwogICAgICAgICcnLAogICAgICAgICd1bmRlZmluZWQnLCAnbnVsbCcsCiAgICAgICAgJ2ZhbHNlJywgJ3RydWUnLAogICAgICAgICdvbicsICdvZmYnLAogICAgICAgICd5ZXMnLCAnbm8nLAogICAgICAgICd7fScsICdbXScsICciIicsCiAgICAgICAgJyRyZW1vdmUkJywKICAgIF07CgogICAgaWYgKCB0cnVzdGVkICkgewogICAgICAgIGlmICggdmFsdWUgPT09ICckbm93JCcgKSB7CiAgICAgICAgICAgIHZhbHVlID0gRGF0ZS5ub3coKTsKICAgICAgICB9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gJyRjdXJyZW50RGF0ZSQnICkgewogICAgICAgICAgICB2YWx1ZSA9IGAke0RhdGUoKX1gOwogICAgICAgIH0gZWxzZSBpZiAoIHZhbHVlID09PSAnJGN1cnJlbnRJU09EYXRlJCcgKSB7CiAgICAgICAgICAgIHZhbHVlID0gKG5ldyBEYXRlKCkpLnRvSVNPU3RyaW5nKCk7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBpZiAoIHRydXN0ZWRWYWx1ZXMuaW5jbHVkZXModmFsdWUudG9Mb3dlckNhc2UoKSkgPT09IGZhbHNlICkgewogICAgICAgICAgICBpZiAoIC9eXGQrJC8udGVzdCh2YWx1ZSkgPT09IGZhbHNlICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApOwogICAgICAgICAgICBpZiAoIHZhbHVlID4gMzI3NjcgKSB7IHJldHVybjsgfQogICAgICAgIH0KICAgIH0KCiAgICB0cnkgewogICAgICAgIGNvbnN0IHN0b3JhZ2UgPSBzZWxmW2Ake3doaWNofVN0b3JhZ2VgXTsKICAgICAgICBpZiAoIHZhbHVlID09PSAnJHJlbW92ZSQnICkgewogICAgICAgICAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgICAgICAgICAgY29uc3QgcGF0dGVybiA9IHNhZmUucGF0dGVyblRvUmVnZXgoa2V5LCB1bmRlZmluZWQsIHRydWUgKTsKICAgICAgICAgICAgY29uc3QgdG9SZW1vdmUgPSBbXTsKICAgICAgICAgICAgZm9yICggbGV0IGkgPSAwLCBuID0gc3RvcmFnZS5sZW5ndGg7IGkgPCBuOyBpKysgKSB7CiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBzdG9yYWdlLmtleShpKTsKICAgICAgICAgICAgICAgIGlmICggcGF0dGVybi50ZXN0KGtleSkgKSB7IHRvUmVtb3ZlLnB1c2goa2V5KTsgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoIGNvbnN0IGtleSBvZiB0b1JlbW92ZSApIHsKICAgICAgICAgICAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RvcmFnZS5zZXRJdGVtKGtleSwgYCR7dmFsdWV9YCk7CiAgICAgICAgfQogICAgfSBjYXRjaChleCkgewogICAgfQp9CgogIChmdW5jdGlvbiBzZXRMb2NhbFN0b3JhZ2VJdGVtKGtleSA9ICcnLCB2YWx1ZSA9ICcnKSB7CiAgICBzZXRMb2NhbFN0b3JhZ2VJdGVtRm4oJ2xvY2FsJywgZmFsc2UsIGtleSwgdmFsdWUpOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"set-session-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQpmdW5jdGlvbiBzZXRMb2NhbFN0b3JhZ2VJdGVtRm4oCiAgICB3aGljaCA9ICdsb2NhbCcsCiAgICB0cnVzdGVkID0gZmFsc2UsCiAgICBrZXkgPSAnJywKICAgIHZhbHVlID0gJycsCikgewogICAgaWYgKCBrZXkgPT09ICcnICkgeyByZXR1cm47IH0KCiAgICBjb25zdCB0cnVzdGVkVmFsdWVzID0gWwogICAgICAgICcnLAogICAgICAgICd1bmRlZmluZWQnLCAnbnVsbCcsCiAgICAgICAgJ2ZhbHNlJywgJ3RydWUnLAogICAgICAgICdvbicsICdvZmYnLAogICAgICAgICd5ZXMnLCAnbm8nLAogICAgICAgICd7fScsICdbXScsICciIicsCiAgICAgICAgJyRyZW1vdmUkJywKICAgIF07CgogICAgaWYgKCB0cnVzdGVkICkgewogICAgICAgIGlmICggdmFsdWUgPT09ICckbm93JCcgKSB7CiAgICAgICAgICAgIHZhbHVlID0gRGF0ZS5ub3coKTsKICAgICAgICB9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gJyRjdXJyZW50RGF0ZSQnICkgewogICAgICAgICAgICB2YWx1ZSA9IGAke0RhdGUoKX1gOwogICAgICAgIH0gZWxzZSBpZiAoIHZhbHVlID09PSAnJGN1cnJlbnRJU09EYXRlJCcgKSB7CiAgICAgICAgICAgIHZhbHVlID0gKG5ldyBEYXRlKCkpLnRvSVNPU3RyaW5nKCk7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBpZiAoIHRydXN0ZWRWYWx1ZXMuaW5jbHVkZXModmFsdWUudG9Mb3dlckNhc2UoKSkgPT09IGZhbHNlICkgewogICAgICAgICAgICBpZiAoIC9eXGQrJC8udGVzdCh2YWx1ZSkgPT09IGZhbHNlICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApOwogICAgICAgICAgICBpZiAoIHZhbHVlID4gMzI3NjcgKSB7IHJldHVybjsgfQogICAgICAgIH0KICAgIH0KCiAgICB0cnkgewogICAgICAgIGNvbnN0IHN0b3JhZ2UgPSBzZWxmW2Ake3doaWNofVN0b3JhZ2VgXTsKICAgICAgICBpZiAoIHZhbHVlID09PSAnJHJlbW92ZSQnICkgewogICAgICAgICAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgICAgICAgICAgY29uc3QgcGF0dGVybiA9IHNhZmUucGF0dGVyblRvUmVnZXgoa2V5LCB1bmRlZmluZWQsIHRydWUgKTsKICAgICAgICAgICAgY29uc3QgdG9SZW1vdmUgPSBbXTsKICAgICAgICAgICAgZm9yICggbGV0IGkgPSAwLCBuID0gc3RvcmFnZS5sZW5ndGg7IGkgPCBuOyBpKysgKSB7CiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBzdG9yYWdlLmtleShpKTsKICAgICAgICAgICAgICAgIGlmICggcGF0dGVybi50ZXN0KGtleSkgKSB7IHRvUmVtb3ZlLnB1c2goa2V5KTsgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoIGNvbnN0IGtleSBvZiB0b1JlbW92ZSApIHsKICAgICAgICAgICAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RvcmFnZS5zZXRJdGVtKGtleSwgYCR7dmFsdWV9YCk7CiAgICAgICAgfQogICAgfSBjYXRjaChleCkgewogICAgfQp9CgogIChmdW5jdGlvbiBzZXRTZXNzaW9uU3RvcmFnZUl0ZW0oa2V5ID0gJycsIHZhbHVlID0gJycpIHsKICAgIHNldExvY2FsU3RvcmFnZUl0ZW1Gbignc2Vzc2lvbicsIGZhbHNlLCBrZXksIHZhbHVlKTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"set-attr.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQpmdW5jdGlvbiBydW5BdChmbiwgd2hlbikgewogICAgY29uc3QgaW50RnJvbVJlYWR5U3RhdGUgPSBzdGF0ZSA9PiB7CiAgICAgICAgY29uc3QgdGFyZ2V0cyA9IHsKICAgICAgICAgICAgJ2xvYWRpbmcnOiAxLAogICAgICAgICAgICAnaW50ZXJhY3RpdmUnOiAyLCAnZW5kJzogMiwgJzInOiAyLAogICAgICAgICAgICAnY29tcGxldGUnOiAzLCAnaWRsZSc6IDMsICczJzogMywKICAgICAgICB9OwogICAgICAgIGNvbnN0IHRva2VucyA9IEFycmF5LmlzQXJyYXkoc3RhdGUpID8gc3RhdGUgOiBbIHN0YXRlIF07CiAgICAgICAgZm9yICggY29uc3QgdG9rZW4gb2YgdG9rZW5zICkgewogICAgICAgICAgICBjb25zdCBwcm9wID0gYCR7dG9rZW59YDsKICAgICAgICAgICAgaWYgKCB0YXJnZXRzLmhhc093blByb3BlcnR5KHByb3ApID09PSBmYWxzZSApIHsgY29udGludWU7IH0KICAgICAgICAgICAgcmV0dXJuIHRhcmdldHNbcHJvcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiAwOwogICAgfTsKICAgIGNvbnN0IHJ1bkF0ID0gaW50RnJvbVJlYWR5U3RhdGUod2hlbik7CiAgICBpZiAoIGludEZyb21SZWFkeVN0YXRlKGRvY3VtZW50LnJlYWR5U3RhdGUpID49IHJ1bkF0ICkgewogICAgICAgIGZuKCk7IHJldHVybjsKICAgIH0KICAgIGNvbnN0IG9uU3RhdGVDaGFuZ2UgPSAoICkgPT4gewogICAgICAgIGlmICggaW50RnJvbVJlYWR5U3RhdGUoZG9jdW1lbnQucmVhZHlTdGF0ZSkgPCBydW5BdCApIHsgcmV0dXJuOyB9CiAgICAgICAgZm4oKTsKICAgICAgICBzYWZlLnJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkoZG9jdW1lbnQsIGFyZ3MpOwogICAgfTsKICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgY29uc3QgYXJncyA9IFsgJ3JlYWR5c3RhdGVjaGFuZ2UnLCBvblN0YXRlQ2hhbmdlLCB7IGNhcHR1cmU6IHRydWUgfSBdOwogICAgc2FmZS5hZGRFdmVudExpc3RlbmVyLmFwcGx5KGRvY3VtZW50LCBhcmdzKTsKfQoKICAoZnVuY3Rpb24gc2V0QXR0cigKICAgIHNlbGVjdG9yID0gJycsCiAgICBhdHRyID0gJycsCiAgICB2YWx1ZSA9ICcnCikgewogICAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnICkgeyByZXR1cm47IH0KICAgIGlmICggc2VsZWN0b3IgPT09ICcnICkgeyByZXR1cm47IH0KCiAgICBjb25zdCB2YWxpZFZhbHVlcyA9IFsgJycsICdmYWxzZScsICd0cnVlJyBdOwogICAgbGV0IGNvcHlGcm9tID0gJyc7CgogICAgaWYgKCB2YWxpZFZhbHVlcy5pbmNsdWRlcyh2YWx1ZS50b0xvd2VyQ2FzZSgpKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgaWYgKCAvXlxkKyQvLnRlc3QodmFsdWUpICkgewogICAgICAgICAgICBjb25zdCBuID0gcGFyc2VJbnQodmFsdWUsIDEwKTsKICAgICAgICAgICAgaWYgKCBuID49IDMyNzY4ICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdmFsdWUgPSBgJHtufWA7CiAgICAgICAgfSBlbHNlIGlmICggL15cWy4rXF0kLy50ZXN0KHZhbHVlKSApIHsKICAgICAgICAgICAgY29weUZyb20gPSB2YWx1ZS5zbGljZSgxLCAtMSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICBjb25zdCBleHRyYWN0VmFsdWUgPSBlbGVtID0+IHsKICAgICAgICBpZiAoIGNvcHlGcm9tICE9PSAnJyApIHsKICAgICAgICAgICAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKGNvcHlGcm9tKSB8fCAnJzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgfTsKCiAgICBjb25zdCBhcHBseVNldEF0dHIgPSAoICkgPT4gewogICAgICAgIGNvbnN0IGVsZW1zID0gW107CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZWxlbXMucHVzaCguLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7CiAgICAgICAgfQogICAgICAgIGNhdGNoKGV4KSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgZm9yICggY29uc3QgZWxlbSBvZiBlbGVtcyApIHsKICAgICAgICAgICAgY29uc3QgYmVmb3JlID0gZWxlbS5nZXRBdHRyaWJ1dGUoYXR0cik7CiAgICAgICAgICAgIGNvbnN0IGFmdGVyID0gZXh0cmFjdFZhbHVlKGVsZW0pOwogICAgICAgICAgICBpZiAoIGFmdGVyID09PSBiZWZvcmUgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKGF0dHIsIGFmdGVyKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9OwogICAgbGV0IG9ic2VydmVyLCB0aW1lcjsKICAgIGNvbnN0IG9uRG9tQ2hhbmdlZCA9IG11dGF0aW9ucyA9PiB7CiAgICAgICAgaWYgKCB0aW1lciAhPT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICBsZXQgc2hvdWxkV29yayA9IGZhbHNlOwogICAgICAgIGZvciAoIGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9ucyApIHsKICAgICAgICAgICAgaWYgKCBtdXRhdGlvbi5hZGRlZE5vZGVzLmxlbmd0aCA9PT0gMCApIHsgY29udGludWU7IH0KICAgICAgICAgICAgZm9yICggY29uc3Qgbm9kZSBvZiBtdXRhdGlvbi5hZGRlZE5vZGVzICkgewogICAgICAgICAgICAgICAgaWYgKCBub2RlLm5vZGVUeXBlICE9PSAxICkgeyBjb250aW51ZTsgfQogICAgICAgICAgICAgICAgc2hvdWxkV29yayA9IHRydWU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIHNob3VsZFdvcmsgKSB7IGJyZWFrOyB9CiAgICAgICAgfQogICAgICAgIGlmICggc2hvdWxkV29yayA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgIHRpbWVyID0gc2VsZi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCApID0+IHsKICAgICAgICAgICAgdGltZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIGFwcGx5U2V0QXR0cigpOwogICAgICAgIH0pOwogICAgfTsKICAgIGNvbnN0IHN0YXJ0ID0gKCApID0+IHsKICAgICAgICBpZiAoIGFwcGx5U2V0QXR0cigpID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihvbkRvbUNoYW5nZWQpOwogICAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwgewogICAgICAgICAgICBzdWJ0cmVlOiB0cnVlLAogICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgICAgfSk7CiAgICB9OwogICAgcnVuQXQoKCApID0+IHsgc3RhcnQoKTsgfSwgJ2lkbGUnKTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"prevent-canvas.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gcHJldmVudENhbnZhcygKICAgIGNvbnRleHRUeXBlID0gJycKKSB7CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IHBhdHRlcm4gPSBzYWZlLmluaXRQYXR0ZXJuKGNvbnRleHRUeXBlLCB7IGNhbk5lZ2F0ZTogdHJ1ZSB9KTsKICAgIGNvbnN0IHByb3RvID0gZ2xvYmFsVGhpcy5IVE1MQ2FudmFzRWxlbWVudC5wcm90b3R5cGU7CiAgICBwcm90by5nZXRDb250ZXh0ID0gbmV3IFByb3h5KHByb3RvLmdldENvbnRleHQsIHsKICAgICAgICBhcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzYWZlLnRlc3RQYXR0ZXJuKHBhdHRlcm4sIGFyZ3NbMF0pICkgeyByZXR1cm4gbnVsbDsgfQogICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpOwogICAgICAgIH0KICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"multiup.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIG11bHRpdXAoKSB7CiAgICBjb25zdCBoYW5kbGVyID0gZXYgPT4gewogICAgICAgIGNvbnN0IHRhcmdldCA9IGV2LnRhcmdldDsKICAgICAgICBpZiAoIHRhcmdldC5tYXRjaGVzKCdidXR0b25bbGlua10nKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgIGNvbnN0IGFuY2VzdG9yID0gdGFyZ2V0LmNsb3Nlc3QoJ2Zvcm0nKTsKICAgICAgICBpZiAoIGFuY2VzdG9yID09PSBudWxsICkgeyByZXR1cm47IH0KICAgICAgICBpZiAoIGFuY2VzdG9yICE9PSB0YXJnZXQucGFyZW50RWxlbWVudCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgbGluayA9ICh0YXJnZXQuZ2V0QXR0cmlidXRlKCdsaW5rJykgfHwgJycpLnRyaW0oKTsKICAgICAgICBpZiAoIGxpbmsgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBsaW5rOwogICAgfTsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlciwgeyBjYXB0dXJlOiB0cnVlIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"replace-node-text.js","aliases":["rpnt.js"],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQpmdW5jdGlvbiBydW5BdChmbiwgd2hlbikgewogICAgY29uc3QgaW50RnJvbVJlYWR5U3RhdGUgPSBzdGF0ZSA9PiB7CiAgICAgICAgY29uc3QgdGFyZ2V0cyA9IHsKICAgICAgICAgICAgJ2xvYWRpbmcnOiAxLAogICAgICAgICAgICAnaW50ZXJhY3RpdmUnOiAyLCAnZW5kJzogMiwgJzInOiAyLAogICAgICAgICAgICAnY29tcGxldGUnOiAzLCAnaWRsZSc6IDMsICczJzogMywKICAgICAgICB9OwogICAgICAgIGNvbnN0IHRva2VucyA9IEFycmF5LmlzQXJyYXkoc3RhdGUpID8gc3RhdGUgOiBbIHN0YXRlIF07CiAgICAgICAgZm9yICggY29uc3QgdG9rZW4gb2YgdG9rZW5zICkgewogICAgICAgICAgICBjb25zdCBwcm9wID0gYCR7dG9rZW59YDsKICAgICAgICAgICAgaWYgKCB0YXJnZXRzLmhhc093blByb3BlcnR5KHByb3ApID09PSBmYWxzZSApIHsgY29udGludWU7IH0KICAgICAgICAgICAgcmV0dXJuIHRhcmdldHNbcHJvcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiAwOwogICAgfTsKICAgIGNvbnN0IHJ1bkF0ID0gaW50RnJvbVJlYWR5U3RhdGUod2hlbik7CiAgICBpZiAoIGludEZyb21SZWFkeVN0YXRlKGRvY3VtZW50LnJlYWR5U3RhdGUpID49IHJ1bkF0ICkgewogICAgICAgIGZuKCk7IHJldHVybjsKICAgIH0KICAgIGNvbnN0IG9uU3RhdGVDaGFuZ2UgPSAoICkgPT4gewogICAgICAgIGlmICggaW50RnJvbVJlYWR5U3RhdGUoZG9jdW1lbnQucmVhZHlTdGF0ZSkgPCBydW5BdCApIHsgcmV0dXJuOyB9CiAgICAgICAgZm4oKTsKICAgICAgICBzYWZlLnJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkoZG9jdW1lbnQsIGFyZ3MpOwogICAgfTsKICAgIGNvbnN0IHNhZmUgPSBzYWZlU2VsZigpOwogICAgY29uc3QgYXJncyA9IFsgJ3JlYWR5c3RhdGVjaGFuZ2UnLCBvblN0YXRlQ2hhbmdlLCB7IGNhcHR1cmU6IHRydWUgfSBdOwogICAgc2FmZS5hZGRFdmVudExpc3RlbmVyLmFwcGx5KGRvY3VtZW50LCBhcmdzKTsKfQpmdW5jdGlvbiByZXBsYWNlTm9kZVRleHRGbigKICAgIG5vZGVOYW1lID0gJycsCiAgICBwYXR0ZXJuID0gJycsCiAgICByZXBsYWNlbWVudCA9ICcnCikgewogICAgY29uc3Qgc2FmZSA9IHNhZmVTZWxmKCk7CiAgICBjb25zdCByZU5vZGVOYW1lID0gc2FmZS5wYXR0ZXJuVG9SZWdleChub2RlTmFtZSwgJ2knLCB0cnVlKTsKICAgIGNvbnN0IHJlUGF0dGVybiA9IHNhZmUucGF0dGVyblRvUmVnZXgocGF0dGVybiwgJ2dtcycpOwogICAgY29uc3QgZXh0cmFBcmdzID0gc2FmZS5nZXRFeHRyYUFyZ3MoQXJyYXkuZnJvbShhcmd1bWVudHMpLCAzKTsKICAgIGNvbnN0IHNob3VsZExvZyA9IHNjcmlwdGxldEdsb2JhbHMuaGFzKCdjYW5EZWJ1ZycpICYmIGV4dHJhQXJncy5sb2cgfHwgMDsKICAgIGNvbnN0IHJlQ29uZGl0aW9uID0gc2FmZS5wYXR0ZXJuVG9SZWdleChleHRyYUFyZ3MuY29uZGl0aW9uIHx8ICcnLCAnZ21zJyk7CiAgICBjb25zdCBzdG9wID0gKHRha2VSZWNvcmQgPSB0cnVlKSA9PiB7CiAgICAgICAgaWYgKCB0YWtlUmVjb3JkICkgewogICAgICAgICAgICBoYW5kbGVNdXRhdGlvbnMob2JzZXJ2ZXIudGFrZVJlY29yZHMoKSk7CiAgICAgICAgfQogICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTsKICAgICAgICBpZiAoIHNob3VsZExvZyAhPT0gMCApIHsKICAgICAgICAgICAgc2FmZS51Ym9Mb2coYHJlcGxhY2Utbm9kZS10ZXh0LWNvcmUuZm46IHF1aXR0aW5nICIke3BhdHRlcm59IiA9PiAiJHtyZXBsYWNlbWVudH0iYCk7CiAgICAgICAgfQogICAgfTsKICAgIGxldCBzZWRDb3VudCA9IGV4dHJhQXJncy5zZWRDb3VudCB8fCAwOwogICAgY29uc3QgaGFuZGxlTm9kZSA9IG5vZGUgPT4gewogICAgICAgIGNvbnN0IGJlZm9yZSA9IG5vZGUudGV4dENvbnRlbnQ7CiAgICAgICAgaWYgKCBzYWZlLlJlZ0V4cF90ZXN0LmNhbGwocmVQYXR0ZXJuLCBiZWZvcmUpID09PSBmYWxzZSApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICBpZiAoIHNhZmUuUmVnRXhwX3Rlc3QuY2FsbChyZUNvbmRpdGlvbiwgYmVmb3JlKSA9PT0gZmFsc2UgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgY29uc3QgYWZ0ZXIgPSBwYXR0ZXJuICE9PSAnJwogICAgICAgICAgICA/IGJlZm9yZS5yZXBsYWNlKHJlUGF0dGVybiwgcmVwbGFjZW1lbnQpCiAgICAgICAgICAgIDogcmVwbGFjZW1lbnQ7CiAgICAgICAgbm9kZS50ZXh0Q29udGVudCA9IGFmdGVyOwogICAgICAgIGlmICggc2hvdWxkTG9nICE9PSAwICkgewogICAgICAgICAgICBzYWZlLnVib0xvZygncmVwbGFjZS1ub2RlLXRleHQuZm4gYmVmb3JlOlxuJywgYmVmb3JlKTsKICAgICAgICAgICAgc2FmZS51Ym9Mb2coJ3JlcGxhY2Utbm9kZS10ZXh0LmZuIGFmdGVyOlxuJywgYWZ0ZXIpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VkQ291bnQgPT09IDAgfHwgKHNlZENvdW50IC09IDEpICE9PSAwOwogICAgfTsKICAgIGNvbnN0IGhhbmRsZU11dGF0aW9ucyA9IG11dGF0aW9ucyA9PiB7CiAgICAgICAgZm9yICggY29uc3QgbXV0YXRpb24gb2YgbXV0YXRpb25zICkgewogICAgICAgICAgICBmb3IgKCBjb25zdCBub2RlIG9mIG11dGF0aW9uLmFkZGVkTm9kZXMgKSB7CiAgICAgICAgICAgICAgICBpZiAoIHJlTm9kZU5hbWUudGVzdChub2RlLm5vZGVOYW1lKSA9PT0gZmFsc2UgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgICAgICBpZiAoIGhhbmRsZU5vZGUobm9kZSkgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgICAgICBzdG9wKGZhbHNlKTsgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoaGFuZGxlTXV0YXRpb25zKTsKICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pOwogICAgaWYgKCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgKSB7CiAgICAgICAgY29uc3QgdHJlZVdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoCiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwKICAgICAgICAgICAgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQgfCBOb2RlRmlsdGVyLlNIT1dfVEVYVAogICAgICAgICk7CiAgICAgICAgbGV0IGNvdW50ID0gMDsKICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0cmVlV2Fsa2VyLm5leHROb2RlKCk7CiAgICAgICAgICAgIGNvdW50ICs9IDE7CiAgICAgICAgICAgIGlmICggbm9kZSA9PT0gbnVsbCApIHsgYnJlYWs7IH0KICAgICAgICAgICAgaWYgKCByZU5vZGVOYW1lLnRlc3Qobm9kZS5ub2RlTmFtZSkgPT09IGZhbHNlICkgeyBjb250aW51ZTsgfQogICAgICAgICAgICBpZiAoIGhhbmRsZU5vZGUobm9kZSkgKSB7IGNvbnRpbnVlOyB9CiAgICAgICAgICAgIHN0b3AoKTsgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmICggc2hvdWxkTG9nICE9PSAwICkgewogICAgICAgICAgICBzYWZlLnVib0xvZyhgcmVwbGFjZS1ub2RlLXRleHQtY29yZS5mbiAke2NvdW50fSBub2RlcyBwcmVzZW50IGJlZm9yZSBpbnN0YWxsaW5nIG11dGF0aW9uIG9ic2VydmVyYCk7CiAgICAgICAgfQogICAgfQogICAgaWYgKCBleHRyYUFyZ3Muc3RheSApIHsgcmV0dXJuOyB9CiAgICBydW5BdCgoICkgPT4gewogICAgICAgIGNvbnN0IHF1aXRBZnRlciA9IGV4dHJhQXJncy5xdWl0QWZ0ZXIgfHwgMDsKICAgICAgICBpZiAoIHF1aXRBZnRlciAhPT0gMCApIHsKICAgICAgICAgICAgc2V0VGltZW91dCgoICkgPT4geyBzdG9wKCk7IH0sIHF1aXRBZnRlcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RvcCgpOwogICAgICAgIH0KICAgIH0sICdpbnRlcmFjdGl2ZScpOwp9CgogIChmdW5jdGlvbiByZXBsYWNlTm9kZVRleHQoCiAgICBub2RlTmFtZSwKICAgIHBhdHRlcm4sCiAgICByZXBsYWNlbWVudCwKICAgIC4uLmV4dHJhQXJncwopIHsKICAgIHJlcGxhY2VOb2RlVGV4dEZuKG5vZGVOYW1lLCBwYXR0ZXJuLCByZXBsYWNlbWVudCwgLi4uZXh0cmFBcmdzKTsKfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"trusted-set-constant.js","aliases":["trusted-set.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-cookie.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-cookie-reload.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQpmdW5jdGlvbiBzZXRDb29raWVGbigKICAgIHRydXN0ZWQgPSBmYWxzZSwKICAgIG5hbWUgPSAnJywKICAgIHZhbHVlID0gJycsCiAgICBleHBpcmVzID0gJycsCiAgICBwYXRoID0gJycsCiAgICBvcHRpb25zID0ge30sCikgewogICAgY29uc3QgZ2V0Q29va2llVmFsdWUgPSBuYW1lID0+IHsKICAgICAgICBmb3IgKCBjb25zdCBzIG9mIGRvY3VtZW50LmNvb2tpZS5zcGxpdCgvXHMqO1xzKi8pICkgewogICAgICAgICAgICBjb25zdCBwb3MgPSBzLmluZGV4T2YoJz0nKTsKICAgICAgICAgICAgaWYgKCBwb3MgPT09IC0xICkgeyBjb250aW51ZTsgfQogICAgICAgICAgICBpZiAoIHMuc2xpY2UoMCwgcG9zKSAhPT0gbmFtZSApIHsgY29udGludWU7IH0KICAgICAgICAgICAgcmV0dXJuIHMuc2xpY2UocG9zKzEpOwogICAgICAgIH0KICAgIH07CgogICAgY29uc3QgY29va2llQmVmb3JlID0gZ2V0Q29va2llVmFsdWUobmFtZSk7CiAgICBpZiAoIGNvb2tpZUJlZm9yZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuZG9udE92ZXJ3cml0ZSApIHsgcmV0dXJuOyB9CiAgICBpZiAoIGNvb2tpZUJlZm9yZSA9PT0gdmFsdWUgJiYgb3B0aW9ucy5yZWxvYWQgKSB7IHJldHVybjsgfQoKICAgIGNvbnN0IGNvb2tpZVBhcnRzID0gWyBuYW1lLCAnPScsIHZhbHVlIF07CiAgICBpZiAoIGV4cGlyZXMgIT09ICcnICkgewogICAgICAgIGNvb2tpZVBhcnRzLnB1c2goJzsgZXhwaXJlcz0nLCBleHBpcmVzKTsKICAgIH0KCiAgICBpZiAoIHBhdGggPT09ICcnICkgeyBwYXRoID0gJy8nOyB9CiAgICBlbHNlIGlmICggcGF0aCA9PT0gJ25vbmUnICkgeyBwYXRoID0gJyc7IH0KICAgIGlmICggcGF0aCAhPT0gJycgJiYgcGF0aCAhPT0gJy8nICkgeyByZXR1cm47IH0KICAgIGlmICggcGF0aCA9PT0gJy8nICkgewogICAgICAgIGNvb2tpZVBhcnRzLnB1c2goJzsgcGF0aD0vJyk7CiAgICB9CgogICAgaWYgKCB0cnVzdGVkICkgewogICAgICAgIGlmICggb3B0aW9ucy5kb21haW4gKSB7CiAgICAgICAgICAgIGNvb2tpZVBhcnRzLnB1c2goYDsgZG9tYWluPSR7b3B0aW9ucy5kb21haW59YCk7CiAgICAgICAgfQogICAgICAgIGNvb2tpZVBhcnRzLnB1c2goJzsgU2VjdXJlJyk7CiAgICB9CgogICAgdHJ5IHsKICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWVQYXJ0cy5qb2luKCcnKTsKICAgIH0gY2F0Y2goXykgewogICAgfQoKICAgIGlmICggb3B0aW9ucy5yZWxvYWQgJiYgZ2V0Q29va2llVmFsdWUobmFtZSkgPT09IHZhbHVlICkgewogICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKICAgIH0KfQpmdW5jdGlvbiB0cnVzdGVkU2V0Q29va2llKAogICAgbmFtZSA9ICcnLAogICAgdmFsdWUgPSAnJywKICAgIG9mZnNldEV4cGlyZXNTZWMgPSAnJywKICAgIHBhdGggPSAnJwopIHsKICAgIGlmICggbmFtZSA9PT0gJycgKSB7IHJldHVybjsgfQoKICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZSgpOwoKICAgIGlmICggdmFsdWUgPT09ICckbm93JCcgKSB7CiAgICAgICAgdmFsdWUgPSBEYXRlLm5vdygpOwogICAgfSBlbHNlIGlmICggdmFsdWUgPT09ICckY3VycmVudERhdGUkJyApIHsKICAgICAgICB2YWx1ZSA9IHRpbWUudG9VVENTdHJpbmcoKTsKICAgIH0KCiAgICBsZXQgZXhwaXJlcyA9ICcnOwogICAgaWYgKCBvZmZzZXRFeHBpcmVzU2VjICE9PSAnJyApIHsKICAgICAgICBpZiAoIG9mZnNldEV4cGlyZXNTZWMgPT09ICcxZGF5JyApIHsKICAgICAgICAgICAgdGltZS5zZXREYXRlKHRpbWUuZ2V0RGF0ZSgpICsgMSk7CiAgICAgICAgfSBlbHNlIGlmICggb2Zmc2V0RXhwaXJlc1NlYyA9PT0gJzF5ZWFyJyApIHsKICAgICAgICAgICAgdGltZS5zZXRGdWxsWWVhcih0aW1lLmdldEZ1bGxZZWFyKCkgKyAxKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoIC9eXGQrJC8udGVzdChvZmZzZXRFeHBpcmVzU2VjKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICB0aW1lLnNldFNlY29uZHModGltZS5nZXRTZWNvbmRzKCkgKyBwYXJzZUludChvZmZzZXRFeHBpcmVzU2VjLCAxMCkpOwogICAgICAgIH0KICAgICAgICBleHBpcmVzID0gdGltZS50b1VUQ1N0cmluZygpOwogICAgfQoKICAgIHNldENvb2tpZUZuKAogICAgICAgIHRydWUsCiAgICAgICAgbmFtZSwKICAgICAgICB2YWx1ZSwKICAgICAgICBleHBpcmVzLAogICAgICAgIHBhdGgsCiAgICAgICAgc2FmZVNlbGYoKS5nZXRFeHRyYUFyZ3MoQXJyYXkuZnJvbShhcmd1bWVudHMpLCA0KQogICAgKTsKfQoKICAoZnVuY3Rpb24gdHJ1c3RlZFNldENvb2tpZVJlbG9hZChuYW1lLCB2YWx1ZSwgb2Zmc2V0RXhwaXJlc1NlYywgcGF0aCwgLi4uYXJncykgewogICAgdHJ1c3RlZFNldENvb2tpZShuYW1lLCB2YWx1ZSwgb2Zmc2V0RXhwaXJlc1NlYywgcGF0aCwgJ3JlbG9hZCcsICcxJywgLi4uYXJncyk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"trusted-set-local-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbJ3t7MX19JywgJ3t7Mn19JywgJ3t7M319JywgJ3t7NH19JywgJ3t7NX19JywgJ3t7Nn19JywgJ3t7N319JywgJ3t7OH19JywgJ3t7OX19J107CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuaGFzKCdzYWZlU2VsZicpICkgewogICAgICAgIHJldHVybiBzY3JpcHRsZXRHbG9iYWxzLmdldCgnc2FmZVNlbGYnKTsKICAgIH0KICAgIGNvbnN0IHNlbGYgPSBnbG9iYWxUaGlzOwogICAgY29uc3Qgc2FmZSA9IHsKICAgICAgICAnQXJyYXlfZnJvbSc6IEFycmF5LmZyb20sCiAgICAgICAgJ0Vycm9yJzogc2VsZi5FcnJvciwKICAgICAgICAnTWF0aF9mbG9vcic6IE1hdGguZmxvb3IsCiAgICAgICAgJ01hdGhfcmFuZG9tJzogTWF0aC5yYW5kb20sCiAgICAgICAgJ09iamVjdF9kZWZpbmVQcm9wZXJ0eSc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eS5iaW5kKE9iamVjdCksCiAgICAgICAgJ1JlZ0V4cCc6IHNlbGYuUmVnRXhwLAogICAgICAgICdSZWdFeHBfdGVzdCc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS50ZXN0LAogICAgICAgICdSZWdFeHBfZXhlYyc6IHNlbGYuUmVnRXhwLnByb3RvdHlwZS5leGVjLAogICAgICAgICdSZXF1ZXN0X2Nsb25lJzogc2VsZi5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSwKICAgICAgICAnWE1MSHR0cFJlcXVlc3QnOiBzZWxmLlhNTEh0dHBSZXF1ZXN0LAogICAgICAgICdhZGRFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciwKICAgICAgICAncmVtb3ZlRXZlbnRMaXN0ZW5lcic6IHNlbGYuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIsCiAgICAgICAgJ2ZldGNoJzogc2VsZi5mZXRjaCwKICAgICAgICAnSlNPTic6IHNlbGYuSlNPTiwKICAgICAgICAnSlNPTl9wYXJzZUZuJzogc2VsZi5KU09OLnBhcnNlLAogICAgICAgICdKU09OX3N0cmluZ2lmeUZuJzogc2VsZi5KU09OLnN0cmluZ2lmeSwKICAgICAgICAnSlNPTl9wYXJzZSc6ICguLi5hcmdzKSA9PiBzYWZlLkpTT05fcGFyc2VGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5JzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9zdHJpbmdpZnlGbi5jYWxsKHNhZmUuSlNPTiwgLi4uYXJncyksCiAgICAgICAgJ2xvZyc6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksCiAgICAgICAgdWJvTG9nKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCBzY3JpcHRsZXRHbG9iYWxzLmhhcygnY2FuRGVidWcnKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBgJHthcmdzWzBdfWAgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdGhpcy5sb2coJ1t1Qk9dJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgZXhwZWN0ID0gKG9wdGlvbnMuY2FuTmVnYXRlICE9PSB0cnVlIHx8IHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpID09PSBmYWxzZSk7CiAgICAgICAgICAgIGlmICggZXhwZWN0ID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNsaWNlKDEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL15cLyguKylcLyhbZ2ltc3VdKikkLy5leGVjKHBhdHRlcm4pOwogICAgICAgICAgICBpZiAoIG1hdGNoICE9PSBudWxsICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXR0ZXJuLAogICAgICAgICAgICAgICAgcmU6IG5ldyB0aGlzLlJlZ0V4cChwYXR0ZXJuLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAgICAgL1suKis/XiR7fSgpfFtcXVxcXS9nLCAnXFwkJicpLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmxhZ3MKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICB0ZXN0UGF0dGVybihkZXRhaWxzLCBoYXlzdGFjaykgewogICAgICAgICAgICBpZiAoIGRldGFpbHMubWF0Y2hBbGwgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIHJldHVybiB0aGlzLlJlZ0V4cF90ZXN0LmNhbGwoZGV0YWlscy5yZSwgaGF5c3RhY2spID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHBhdHRlcm4ucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh2ZXJiYXRpbSA/IGBeJHtyZVN0cn0kYCA6IHJlU3RyLCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSB8fCBmbGFncyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpOwogICAgICAgIH0sCiAgICB9OwogICAgc2NyaXB0bGV0R2xvYmFscy5zZXQoJ3NhZmVTZWxmJywgc2FmZSk7CiAgICByZXR1cm4gc2FmZTsKfQpmdW5jdGlvbiBzZXRMb2NhbFN0b3JhZ2VJdGVtRm4oCiAgICB3aGljaCA9ICdsb2NhbCcsCiAgICB0cnVzdGVkID0gZmFsc2UsCiAgICBrZXkgPSAnJywKICAgIHZhbHVlID0gJycsCikgewogICAgaWYgKCBrZXkgPT09ICcnICkgeyByZXR1cm47IH0KCiAgICBjb25zdCB0cnVzdGVkVmFsdWVzID0gWwogICAgICAgICcnLAogICAgICAgICd1bmRlZmluZWQnLCAnbnVsbCcsCiAgICAgICAgJ2ZhbHNlJywgJ3RydWUnLAogICAgICAgICdvbicsICdvZmYnLAogICAgICAgICd5ZXMnLCAnbm8nLAogICAgICAgICd7fScsICdbXScsICciIicsCiAgICAgICAgJyRyZW1vdmUkJywKICAgIF07CgogICAgaWYgKCB0cnVzdGVkICkgewogICAgICAgIGlmICggdmFsdWUgPT09ICckbm93JCcgKSB7CiAgICAgICAgICAgIHZhbHVlID0gRGF0ZS5ub3coKTsKICAgICAgICB9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gJyRjdXJyZW50RGF0ZSQnICkgewogICAgICAgICAgICB2YWx1ZSA9IGAke0RhdGUoKX1gOwogICAgICAgIH0gZWxzZSBpZiAoIHZhbHVlID09PSAnJGN1cnJlbnRJU09EYXRlJCcgKSB7CiAgICAgICAgICAgIHZhbHVlID0gKG5ldyBEYXRlKCkpLnRvSVNPU3RyaW5nKCk7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBpZiAoIHRydXN0ZWRWYWx1ZXMuaW5jbHVkZXModmFsdWUudG9Mb3dlckNhc2UoKSkgPT09IGZhbHNlICkgewogICAgICAgICAgICBpZiAoIC9eXGQrJC8udGVzdCh2YWx1ZSkgPT09IGZhbHNlICkgeyByZXR1cm47IH0KICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApOwogICAgICAgICAgICBpZiAoIHZhbHVlID4gMzI3NjcgKSB7IHJldHVybjsgfQogICAgICAgIH0KICAgIH0KCiAgICB0cnkgewogICAgICAgIGNvbnN0IHN0b3JhZ2UgPSBzZWxmW2Ake3doaWNofVN0b3JhZ2VgXTsKICAgICAgICBpZiAoIHZhbHVlID09PSAnJHJlbW92ZSQnICkgewogICAgICAgICAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgICAgICAgICAgY29uc3QgcGF0dGVybiA9IHNhZmUucGF0dGVyblRvUmVnZXgoa2V5LCB1bmRlZmluZWQsIHRydWUgKTsKICAgICAgICAgICAgY29uc3QgdG9SZW1vdmUgPSBbXTsKICAgICAgICAgICAgZm9yICggbGV0IGkgPSAwLCBuID0gc3RvcmFnZS5sZW5ndGg7IGkgPCBuOyBpKysgKSB7CiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBzdG9yYWdlLmtleShpKTsKICAgICAgICAgICAgICAgIGlmICggcGF0dGVybi50ZXN0KGtleSkgKSB7IHRvUmVtb3ZlLnB1c2goa2V5KTsgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoIGNvbnN0IGtleSBvZiB0b1JlbW92ZSApIHsKICAgICAgICAgICAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RvcmFnZS5zZXRJdGVtKGtleSwgYCR7dmFsdWV9YCk7CiAgICAgICAgfQogICAgfSBjYXRjaChleCkgewogICAgfQp9CgogIChmdW5jdGlvbiB0cnVzdGVkU2V0TG9jYWxTdG9yYWdlSXRlbShrZXkgPSAnJywgdmFsdWUgPSAnJykgewogICAgc2V0TG9jYWxTdG9yYWdlSXRlbUZuKCdsb2NhbCcsIHRydWUsIGtleSwgdmFsdWUpOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"trusted-replace-fetch-response.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-replace-xhr-response.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-click-element.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-prune-inbound-object.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-prune-outbound-object.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""}]